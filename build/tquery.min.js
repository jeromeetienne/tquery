var tQuery = function (a, b) {
    if (a instanceof THREE.Mesh && tQuery.Mesh) return new tQuery.Mesh(a); if (a instanceof THREE.DirectionalLight && tQuery.DirectionalLight) return new tQuery.DirectionalLight(a); if (a instanceof THREE.AmbientLight && tQuery.AmbientLight) return new tQuery.AmbientLight(a); if (a instanceof THREE.Light && tQuery.Light) return new tQuery.Light(a); if (a instanceof THREE.Object3D && tQuery.Object3D) return new tQuery.Object3D(a); if (a instanceof THREE.Geometry && tQuery.Geometry) return new tQuery.Geometry(a);
    if (a instanceof THREE.Material && tQuery.Material) return new tQuery.Material(a); if ("string" === typeof a && tQuery.Object3D) return new tQuery.Object3D(a, b); if (a instanceof THREE.TrackballControls && tQuery.TrackballControl) return new tQuery.TrackballControl(a); console.assert(!1, "unsupported type")
}; tQuery.VERSION = "0.0.1"; tQuery.data = function (a, b, c) { console.assert(a, "invalid parameters"); console.assert("string" === typeof b, "invalid parameters"); a._tqData = a._tqData || {}; c && (a._tqData[b] = c); return a._tqData[b] };
tQuery.removeData = function (a, b) { b instanceof Array ? b.forEach(function (b) { tQuery.removeData(a, b) }) : (console.assert("string" === typeof b), delete a._tqData[b]) }; tQuery.each = function (a, b) { for (var c = 0; c < a.length; c++) if (!1 === b(a[c])) return !1; return !0 }; tQuery.inherit = function (a, b) { var c = function () { }; c.prototype = b.prototype; a.prototype = new c; a.parent = b.prototype; a.prototype.constructor = a };
tQuery.extend = function (a, b) { var c = {}; b && Object.keys(b).forEach(function (a) { c[a] = b[a] }); a && Object.keys(a).forEach(function (b) { c[b] = a[b] }); return c }; tQuery.pluginsOn = function (a, b) { b = b || a.prototype || a; a.register = function (a, d) { if (b[a]) throw Error("Conflict! Already method called: " + a); b[a] = d }; a.unregister = function (a) { if (!1 === b.hasOwnProperty(a)) throw Error("Plugin not found: " + a); delete b[a] }; a.registered = function (a) { return !0 === b.hasOwnProperty(a) } }; tQuery.pluginsInstanceOn = function (a) { return tQuery.pluginsOn(a) };
tQuery.pluginsStaticOn = function (a) { return tQuery.pluginsOn(a.klass) }; tQuery.pluginsOn(tQuery, tQuery);
tQuery.mixinAttributes = function (a, b) {
    a.prototype._attrProps = tQuery.extend(a.prototype._attrProps, b); a.prototype.attr = function (a, b) { a instanceof Object && void 0 === b ? Object.keys(a).forEach(function (b) { this.attr(b, a[b]) } .bind(this)) : "string" === typeof a ? console.assert(-1 !== Object.keys(this._attrProps).indexOf(a), "invalid property name:" + a) : console.assert(!1, "invalid parameter"); return void 0 !== b ? (b = (0, this._attrProps[a])(b), this.each(function (e) { e[a] = b }), this) : 0 === this.length ? void 0 : this.get(0)[a] }; Object.keys(b).forEach(function (b) {
        a.prototype[b] =
function (a) { return this.attr(b, a) } 
    } .bind(this))
}; tQuery.Flow = function () { var a, b = [], c = setTimeout(function () { c = null; a._next() }, 0); return a = { destroy: function () { c && clearTimeout(c) }, par: function (c, e) { (e || !(b[b.length - 1] instanceof Array)) && b.push([]); b[b.length - 1].push(c); return a }, seq: function (b) { return a.par(b, !0) }, _next: function (c, e) { var f = [], h = [], m = b.shift() || [], g = m.length, n = 1 == g; m && m.forEach(function (b, l) { b(function (b, c) { f[l] = b; h[l] = c; 0 == --g && a._next(n ? f[0] : f, n ? h[0] : h) }, c, e) }) } } };
tQuery.MicroeventMixin = function (a) {
    a.bind = function (a, c) { void 0 === this._events && (this._events = {}); this._events[a] = this._events[a] || []; this._events[a].push(c); return c }; a.unbind = function (a, c) { void 0 === this._events && (this._events = {}); !1 !== a in this._events && this._events[a].splice(this._events[a].indexOf(c), 1) }; a.trigger = function (a) {
        void 0 === this._events && (this._events = {}); if (void 0 !== this._events[a]) for (var c = this._events[a].slice(), d = 0; d < c.length; d++) c[d].apply(this, Array.prototype.slice.call(arguments,
1))
    } 
}; tQuery.convert = {}; tQuery.convert.toThreeColor = function (a) { if (1 === arguments.length && "number" === typeof a) return new THREE.Color(a); if (1 === arguments.length && a instanceof THREE.Color) return a; console.assert(!1, "invalid parameter") }; tQuery.convert.toNumber = function (a) { if (1 === arguments.length && "number" === typeof a) return a; console.assert(!1, "invalid parameter") }; tQuery.convert.identity = function (a) { return a };
tQuery.convert.toBool = function (a) { if (1 === arguments.length && "boolean" === typeof a) return a; console.assert(!1, "invalid parameter") }; tQuery.Node = function (a) { this._lists = a instanceof Array ? a : a ? [a] : []; this.length = this._lists.length }; tQuery.Node.prototype.get = function (a) { if (void 0 === a) return this._lists; console.assert(this._lists[a], "element not defined"); return this._lists[a] }; tQuery.Node.prototype.each = function (a) { return tQuery.each(this._lists, a) };
tQuery.Node.prototype.back = function (a) { if (void 0 === a) return this._back; this._back = a; return this }; tQuery.Node.prototype.data = function (a, b) { if (b) return this.each(function (c) { tQuery.data(c, a, b) }), this; if (0 < this.length) return tQuery.data(this.get(0), a); console.assert(0 === this.length) }; tQuery.Node.prototype.removeData = function (a) { this.each(function (b) { tQuery.removeData(b, a) }); return this };
tQuery.Object3D = function (a, b) { "string" === typeof a && (a = tQuery.Object3D._select(a, b)); tQuery.Object3D.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.Object3D) }) }; tQuery.inherit(tQuery.Object3D, tQuery.Node); tQuery.pluginsInstanceOn(tQuery.Object3D); tQuery.Object3D.prototype.geometry = function () { var a = []; this.each(function (b) { a.push(b.geometry) }); return (new tQuery.Geometry(a)).back(this) };
tQuery.Object3D.prototype.material = function () { var a = []; this.each(function (b) { a.push(b.material) }); return new tQuery.Material(a) }; tQuery.Object3D.prototype.addTo = function (a) { console.assert(a instanceof tQuery.World || a instanceof tQuery.Object3D); this.each(function (b) { a.add(b) } .bind(this)); return this }; tQuery.Object3D.prototype.removeFrom = function (a) { console.assert(a instanceof tQuery.World || a instanceof tQuery.Object3D); this.each(function (b) { a.remove(b) } .bind(this)); return this };
tQuery.Object3D.prototype.add = function (a) { console.assert(a instanceof tQuery.Object3D); this.each(function (b) { a.each(function (a) { b.add(a) }) } .bind(this)); return this }; tQuery.Object3D.prototype.remove = function (a) { console.assert(a instanceof tQuery.Object3D); this.each(function (b) { a.each(function (a) { b.remove(a) }) } .bind(this)); return this };
tQuery.Object3D.prototype.id = function (a) { console.assert(1 >= this.length, "tQuery.Object3D.id used on multi-elements"); if (void 0 !== a) { if (0 < this.length) { var b = this.get(0); b._tqId = a } return this } if (0 < this.length) return b = this.get(0), b._tqId }; tQuery.Object3D.prototype.addClass = function (a) { this.each(function (b) { b._tqClasses = b._tqClasses || ""; tQuery.Object3D._hasClassOne(b, a) || (b._tqClasses += " " + a) } .bind(this)); return this };
tQuery.Object3D.prototype.removeClass = function (a) { this.each(function (b) { tQuery.Object3D._removeClassOne(b, a) } .bind(this)); return this }; tQuery.Object3D.prototype.hasClass = function (a) { return this.each(function (b) { b._tqClasses = b._tqClasses || ""; return tQuery.Object3D._hasClassOne(b, a) ? !1 : !0 } .bind(this)) ? !1 : !0 }; tQuery.Object3D._hasClassOne = function (a, b) { return void 0 === a._tqClasses ? !1 : a._tqClasses.match(RegExp("(^| |\t)+(" + b + ")($| |\t)+")) ? !0 : !1 };
tQuery.Object3D._removeClassOne = function (a, b) { void 0 !== a._tqClasses && (a._tqClasses = a._tqClasses.replace(RegExp("(^| |\t)(" + b + ")($| |\t)"), " ")) }; tQuery.Object3D._select = function (a, b) { var b = b || tQuery.world.scene(), c = a.split(" ").filter(function (a) { return 0 < a.length }), d = []; b.children.forEach(function (a) { a = this._crawls(a, c); d = d.concat(a) } .bind(this)); return d };
tQuery.Object3D._crawls = function (a, b) { var c = []; console.assert(1 <= b.length); var d = this._selectItemMatch(a, b[0]) ? b.slice(1) : b; if (0 === d.length) return [a]; a.children.forEach(function (a) { a = this._crawls(a, d); c = c.concat(a) } .bind(this)); return c }; tQuery.Object3D._selectableGeometries = Object.keys(THREE).filter(function (a) { return a.match(/.+Geometry$/) }).map(function (a) { return a.replace(/Geometry$/, "").toLowerCase() });
tQuery.Object3D._selectableLights = Object.keys(THREE).filter(function (a) { return a.match(/.+Light$/) }).map(function (a) { return a.replace(/Light$/, "").toLowerCase() }); tQuery.Object3D._selectableClasses = ["mesh", "light"];
tQuery.Object3D._selectItemMatch = function (a, b) {
    console.assert(a instanceof THREE.Object3D); console.assert("string" === typeof b); var c = b.match(RegExp("([^.#]+|.[^.#]+|#[^.#]+)", "g")); return tQuery.each(c, function (b) {
        var c = b.charAt(0), f = b.slice(1); if ("." === c) return tQuery.Object3D._hasClassOne(a, f) ? !0 : !1; if ("#" === c) return a._tqId === f ? !0 : !1; if ("*" === b) return !0; if (-1 !== this._selectableGeometries.indexOf(b)) return c = a.geometry, b = b.charAt(0).toUpperCase() + b.slice(1) + "Geometry", c instanceof THREE[b]; if (-1 !==
this._selectableLights.indexOf(b)) return b = b.charAt(0).toUpperCase() + b.slice(1) + "Light", a instanceof THREE[b]; if (-1 !== this._selectableClasses.indexOf(b)) return b = b.charAt(0).toUpperCase() + b.slice(1), a instanceof THREE[b]; console.assert(!1, "invalid selector: " + b); return !0
    } .bind(this)) ? !0 : !1
}; tQuery.Geometry = function (a) { tQuery.Geometry.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.Geometry) }) }; tQuery.inherit(tQuery.Geometry, tQuery.Node); tQuery.pluginsInstanceOn(tQuery.Geometry);
tQuery.Material = function (a) { tQuery.Material.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.Material) }) }; tQuery.inherit(tQuery.Material, tQuery.Node); tQuery.pluginsInstanceOn(tQuery.Material); tQuery.mixinAttributes(tQuery.Material, { opacity: tQuery.convert.toNumber, transparent: tQuery.convert.toBool }); tQuery.Light = function (a) { tQuery.Light.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.Light) }) };
tQuery.inherit(tQuery.Light, tQuery.Object3D); tQuery.pluginsInstanceOn(tQuery.Light); tQuery.mixinAttributes(tQuery.Light, { color: tQuery.convert.toThreeColor }); tQuery.Mesh = function (a) { tQuery.Mesh.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.Mesh) }) }; tQuery.inherit(tQuery.Mesh, tQuery.Object3D); tQuery.pluginsInstanceOn(tQuery.Mesh);
tQuery.Mesh.prototype.material = function (a) { var b = tQuery.Mesh.parent; if (void 0 == a) return b.material.call(this); this.each(function (b) { b.material = a }); return this };
tQuery.World = function () {
    tQuery.world = this; this._scene = new THREE.Scene; if (this._hasWebGL) this._renderer = new THREE.WebGLRenderer({ antialias: !0, preserveDrawingBuffer: !0 }), this._renderer.setClearColorHex(12303291, 1); else throw this._addGetWebGLMessage(), Error("WebGL required and not available"); this._renderer.setSize(window.innerWidth, window.innerHeight); this._camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.01, 1E4); this._camera.position.set(0, 0, 3); this._scene.add(this._camera);
    this._loop = new tQuery.Loop(this)
}; tQuery.pluginsInstanceOn(tQuery.World); tQuery.MicroeventMixin(tQuery.World.prototype); tQuery.World.prototype.destroy = function () { this.trigger("destroy"); this._loop.destroy(); this.removeCameraControls(); var a = this._renderer.domElement.parentElement; a && a.removeChild(this._renderer.domElement); tQuery.world === this && (tQuery.world = null) }; tQuery.World.prototype._hasWebGL = function () { try { return !!window.WebGLRenderingContext && !!document.createElement("canvas").getContext("experimental-webgl") } catch (a) { return !1 } } ();
tQuery.World.prototype._addGetWebGLMessage = function (a) {
    var a = a || document.body, b = document.createElement("div"); b.style.fontFamily = "monospace"; b.style.fontSize = "13px"; b.style.textAlign = "center"; b.style.background = "#eee"; b.style.color = "#000"; b.style.padding = "1em"; b.style.width = "475px"; b.style.margin = "5em auto 0"; b.innerHTML = window.WebGLRenderingContext ? 'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">WebGL</a>.<br />\nFind out how to get it <a href="http://get.webgl.org/">here</a>.' :
'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">WebGL</a>.<br/>\nFind out how to get it <a href="http://get.webgl.org/">here</a>.'; a.appendChild(b)
}; tQuery.World.prototype.setCameraControls = function (a) { this.hasCameraControls() && this.removeCameraControls(); this._cameraControls = a; return this }; tQuery.World.prototype.removeCameraControls = function () { if (!1 === this.hasCameraControls()) return this; this._cameraControls = void 0; return this };
tQuery.World.prototype.getCameraControls = function () { return this._cameraControls }; tQuery.World.prototype.hasCameraControls = function () { return void 0 !== this._cameraControls ? !0 : !1 }; tQuery.World.prototype.add = function (a) { a instanceof tQuery.Object3D ? a.each(function (a) { this._scene.add(a) } .bind(this)) : a instanceof THREE.Object3D ? this._scene.add(a) : console.assert(!1, "invalid type"); return this };
tQuery.World.prototype.remove = function (a) { a instanceof tQuery.Object3D ? a.each(function (a) { this._scene.remove(a) } .bind(this)) : a instanceof THREE.Object3D ? this._scene.remove(a) : console.assert(!1, "invalid type"); return this }; tQuery.World.prototype.appendTo = function (a) { a.appendChild(this._renderer.domElement); this._renderer.setSize(a.offsetWidth, a.offsetHeight); return this }; tQuery.World.prototype.start = function () { this._loop.start(); return this };
tQuery.World.prototype.stop = function () { this._loop.stop(); return this }; tQuery.World.prototype.loop = function () { return this._loop }; tQuery.World.prototype.renderer = function () { return this._renderer }; tQuery.World.prototype.camera = function () { return this._camera }; tQuery.World.prototype.scene = function () { return this._scene }; tQuery.World.prototype.get = function () { return this._scene };
tQuery.World.prototype.render = function () { this.hasCameraControls() && this._cameraControls.update(); this._renderer.render(this._scene, this._camera) }; tQuery.Loop = function (a) { this._world = a; this._hooks = []; this._lastTime = null; this._world && this.hookOnRender(function () { this._world.render() } .bind(this)) }; tQuery.pluginsInstanceOn(tQuery.Loop); tQuery.Loop.prototype.destroy = function () { this.stop(); tQuery.loop === this && (tQuery.loop = null) };
tQuery.Loop.prototype.start = function () { this._timerId && this.stop(); this._timerId = requestAnimationFrame(this._onAnimationFrame.bind(this)); return this }; tQuery.Loop.prototype.stop = function () { cancelAnimationFrame(this._timerId); this._timerId = null; return this };
tQuery.Loop.prototype._onAnimationFrame = function (a) { this._timerId = requestAnimationFrame(this._onAnimationFrame.bind(this)); a /= 1E3; this._lastTime || (this._lastTime = a - 1 / 60); var b = a - this._lastTime; this._lastTime = a; for (var c = 0; c <= this._hooks.length; c++) if (void 0 !== this._hooks[c]) for (var d = this._hooks[c].slice(0), e = 0; e < d.length; e++) d[e](b, a) }; tQuery.Loop.prototype.PRE_RENDER = 20; tQuery.Loop.prototype.ON_RENDER = 50; tQuery.Loop.prototype.POST_RENDER = 80;
tQuery.Loop.prototype.hook = function (a, b) { "function" === typeof a && (b = a, a = this.PRE_RENDER); this._hooks[a] = this._hooks[a] || []; console.assert(-1 === this._hooks[a].indexOf(b)); this._hooks[a].push(b); return this }; tQuery.Loop.prototype.unhook = function (a, b) { "function" === typeof a && (b = a, a = this.PRE_RENDER); var c = this._hooks[a].indexOf(b); console.assert(-1 !== c); this._hooks[a].splice(c, 1); 0 === this._hooks[a].length && delete this._hooks[a]; return this };
tQuery.Loop.prototype.hookPreRender = function (a) { return this.hook(this.PRE_RENDER, a) }; tQuery.Loop.prototype.hookOnRender = function (a) { return this.hook(this.ON_RENDER, a) }; tQuery.Loop.prototype.hookPostRender = function (a) { return this.hook(this.POST_RENDER, a) }; tQuery.Loop.prototype.unhookPreRender = function (a) { return this.unhook(this.PRE_RENDER, a) }; tQuery.Loop.prototype.unhookOnRender = function (a) { return this.unhook(this.ON_RENDER, a) };
tQuery.Loop.prototype.unhookPostRender = function (a) { return this.unhook(this.POST_RENDER, a) }; tQuery.register("createWorld", function () { return new tQuery.World }); tQuery.register("createLoop", function (a) { return new tQuery.Loop(a) }); tQuery.register("createDirectionalLight", function () { var a = new THREE.DirectionalLight(16777215 * Math.random()); a.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize(); return tQuery(a) });
tQuery.register("createAmbientLight", function () { var a = new THREE.AmbientLight(16777215); return tQuery(a) }); tQuery.register("defaultObject3DMaterial", new THREE.MeshNormalMaterial); tQuery.Geometry.prototype.toMesh = function (a) { var b = []; this.each(function (c) { a = a || tQuery.defaultObject3DMaterial; c = new THREE.Mesh(c, a); b.push(c) }); return new tQuery.Mesh(b) }; tQuery.register("createCube", function () { return this._createMesh(THREE.CubeGeometry, [1, 1, 1], arguments) });
tQuery.register("createTorus", function () { return this._createMesh(THREE.TorusGeometry, [0.35, 0.15], arguments) }); tQuery.register("createSphere", function () { return this._createMesh(THREE.SphereGeometry, [0.5, 32, 16], arguments) }); tQuery.register("createPlane", function () { return this._createMesh(THREE.PlaneGeometry, [1, 1, 16, 16], arguments) }); tQuery.register("createCylinder", function () { return this._createMesh(THREE.CylinderGeometry, [0.5, 0.5, 1, 16, 4], arguments) });
tQuery.register("_createMesh", function (a, b, c) { var c = Array.prototype.slice.call(c), d = tQuery.defaultObject3DMaterial; c.length && c[c.length - 1] instanceof THREE.Material && (d = c.pop()); 0 === c.length && (c = b.slice()); c.unshift(a); a = function (a, b, c, d, g, n, i, l, k) { console.assert(9 >= arguments.length); return new a(b, c, d, g, n, i, l, k) } .apply(this, c); a.dynamic = !0; d = new THREE.Mesh(a, d); return tQuery(d) }); tQuery.register("createAxis", function () { var a = new THREE.AxisHelper; a.scale.multiplyScalar(0.025); return tQuery(a) });
tQuery.AmbientLight = function (a) { tQuery.AmbientLight.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.AmbientLight) }) }; tQuery.inherit(tQuery.AmbientLight, tQuery.Light); tQuery.pluginsInstanceOn(tQuery.AmbientLight); tQuery.DirectionalLight = function (a) { tQuery.DirectionalLight.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.DirectionalLight) }) }; tQuery.inherit(tQuery.DirectionalLight, tQuery.Light); tQuery.pluginsInstanceOn(tQuery.DirectionalLight);
tQuery.mixinAttributes(tQuery.DirectionalLight, { intensity: tQuery.convert.toNumber, distance: tQuery.convert.toNumber }); tQuery.PointLight = function (a) { tQuery.PointLight.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.PointLight) }) }; tQuery.inherit(tQuery.PointLight, tQuery.Light); tQuery.pluginsInstanceOn(tQuery.PointLight); tQuery.mixinAttributes(tQuery.PointLight, { intensity: tQuery.convert.toNumber, distance: tQuery.convert.toNumber });
(function () {
    tQuery.Geometry.register("computeAll", function () { this.each(function (a) { a.computeBoundingBox(); a.computeCentroids(); a.computeFaceNormals(); a.computeVertexNormals() }); return this }); tQuery.Geometry.register("scaleBy", function (a) {
        "number" === typeof a && 1 === arguments.length ? a = new THREE.Vector3(a, a, a) : "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Geometry.vector3 parameter error"); this.each(function (b) {
            for (var c =
0; c < b.vertices.length; c++) b.vertices[c].position.multiplySelf(a); b.__dirtyVertices = !0; b.computeBoundingBox()
        }); return this
    }); tQuery.Geometry.register("size", function () { console.assert(1 >= this.length); if (0 !== this.length) { var a = this.get(0), b = new THREE.Vector3; b.x = a.boundingBox.max.x - a.boundingBox.min.x; b.y = a.boundingBox.max.y - a.boundingBox.min.y; b.z = a.boundingBox.max.z - a.boundingBox.min.z; return b } }); tQuery.Geometry.register("normalize", function () {
        this.each(function (a) {
            var a = tQuery(a), b = a.size(); b.x >=
b.y && b.x >= b.z ? a.zoom(1 / b.x) : b.y >= b.x && b.y >= b.z ? a.zoom(1 / b.y) : a.zoom(1 / b.z)
        }); return this
    }); tQuery.Geometry.register("middlePoint", function () { console.assert(1 >= this.length); if (0 !== this.length) { var a = this.get(0), b = new THREE.Vector3; b.x = (a.boundingBox.max.x + a.boundingBox.min.x) / 2; b.y = (a.boundingBox.max.y + a.boundingBox.min.y) / 2; b.z = (a.boundingBox.max.z + a.boundingBox.min.z) / 2; return b } }); tQuery.Geometry.register("translate", function (a) {
        "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0],
arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Geometry.translate parameter error"); this.each(function (b) { for (var c = 0; c < b.vertices.length; c++) b.vertices[c].position.addSelf(a); b.__dirtyVertices = !0; b.computeBoundingBox() }); return this
    }); tQuery.Geometry.register("rotate", function (a, b) {
        "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Geometry.rotate parameter error"); var b = b || "XYZ",
c = new THREE.Matrix4; c.setRotationFromEuler(a, b); this.each(function (a) { a.applyMatrix(c); a.__dirtyVertices = !0; a.computeBoundingBox() }); return this
    }); tQuery.Geometry.register("center", function (a, b, c) { this.each(function (d) { var d = tQuery(d), e = d.middlePoint().negate(); a && (e.x = 0); b && (e.y = 0); c && (e.z = 0); return d.translate(e) }); return this }); tQuery.Geometry.register("translateX", function (a) { return this.translate(a, 0, 0) }); tQuery.Geometry.register("translateY", function (a) { return this.translate(0, a, 0) }); tQuery.Geometry.register("translateZ",
function (a) { return this.translate(0, 0, a) }); tQuery.Geometry.register("rotateX", function (a) { return this.rotate(a, 0, 0) }); tQuery.Geometry.register("rotateY", function (a) { return this.rotate(0, a, 0) }); tQuery.Geometry.register("rotateZ", function (a) { return this.rotate(0, 0, a) }); tQuery.Geometry.register("scaleXBy", function (a) { return this.scaleBy(a, 1, 1) }); tQuery.Geometry.register("scaleYBy", function (a) { return this.scaleBy(1, a, 1) }); tQuery.Geometry.register("scaleZBy", function (a) { return this.scaleBy(1, 1, a) }); tQuery.Geometry.register("zoom",
function (a) { return this.scaleBy(a) }); tQuery.Geometry.register("zoomX", function (a) { return this.zoom(a, 1, 1) }); tQuery.Geometry.register("zoomY", function (a) { return this.zoom(1, a, 1) }); tQuery.Geometry.register("zoomZ", function (a) { return this.zoom(1, 1, a) })
})();
(function () {
    tQuery.Object3D.register("scale", function (a) { "number" === typeof a && 1 === arguments.length ? a = new THREE.Vector3(a, a, a) : "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Geometry.scale parameter error"); this.each(function (b) { b.scale.copy(a) }); return this }); tQuery.Object3D.register("position", function (a) {
        "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2]));
        console.assert(a instanceof THREE.Vector3, "Object3D.position parameter error"); this.each(function (b) { b.position.copy(a) }); return this
    }); tQuery.Object3D.register("rotation", function (a) { "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Object3D.rotation parameter error"); this.each(function (b) { b.rotation.copy(a) }); return this }); tQuery.Object3D.register("translate", function (a) {
        "number" === typeof a && 3 === arguments.length &&
(a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Object3D.translate parameter error"); this.each(function (b) { b.position.addSelf(a) }); return this
    }); tQuery.Object3D.register("rotate", function (a) { "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Object3D.rotate parameter error"); this.each(function (b) { b.rotation.addSelf(a) }); return this }); tQuery.Object3D.register("scaleBy",
function (a) { "number" === typeof a && 1 === arguments.length ? a = new THREE.Vector3(a, a, a) : "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "Object3D.rotate parameter error"); this.each(function (b) { b.scale.multiplySelf(a) }); return this }); tQuery.Object3D.register("translateX", function (a) { return this.translate(a, 0, 0) }); tQuery.Object3D.register("translateY", function (a) { return this.translate(0, a, 0) }); tQuery.Object3D.register("translateZ",
function (a) { return this.translate(0, 0, a) }); tQuery.Object3D.register("rotateX", function (a) { return this.rotate(a, 0, 0) }); tQuery.Object3D.register("rotateY", function (a) { return this.rotate(0, a, 0) }); tQuery.Object3D.register("rotateZ", function (a) { return this.rotate(0, 0, a) }); tQuery.Object3D.register("scaleXBy", function (a) { return this.scaleBy(a, 1, 1) }); tQuery.Object3D.register("scaleYBy", function (a) { return this.scaleBy(1, a, 1) }); tQuery.Object3D.register("scaleZBy", function (a) { return this.scaleBy(1, 1, a) }); tQuery.Object3D.register("zoom",
function (a) { return this.scaleBy(a) }); tQuery.Object3D.register("zoomX", function (a) { return this.zoom(a, 1, 1) }); tQuery.Object3D.register("zoomY", function (a) { return this.zoom(1, a, 1) }); tQuery.Object3D.register("zoomZ", function (a) { return this.zoom(1, 1, a) })
})(); tQuery.World.register("fullpage", function () { console.log("world.fullpage() is obsolete. use world.boilerplate() instead."); return this.boilerplate() });
tQuery.World.register("boilerplate", function (a) { var b = document.body; b.style.margin = "0"; b.style.padding = "0"; b.style.overflow = "hidden"; this.appendTo(b); this.addBoilerplate(a); return this });
tQuery.World.register("addBoilerplate", function (a) {
    console.assert(!0 !== this.hasBoilerplate()); var a = tQuery.extend(a, { stats: !0, cameraControls: !0, windowResize: !0, screenshot: !0, fullscreen: !0 }), b = {}; tQuery.data(this, "_boilerplateCtx", b); a.stats && (b.stats = new Stats, b.stats.domElement.style.position = "absolute", b.stats.domElement.style.bottom = "0px", document.body.appendChild(b.stats.domElement), b.loopStats = function () { b.stats.update() }, this.loop().hook(b.loopStats)); var c = this.camera(), d = this.renderer(); a.cameraControls &&
(b.cameraControls = new THREEx.DragPanControls(c), this.setCameraControls(b.cameraControls)); a.windowResize && (b.windowResize = THREEx.WindowResize.bind(d, c)); a.screenshot && (b.screenshot = THREEx.Screenshot.bindKey(d)); a.fullscreen && THREEx.FullScreen.available() && (b.fullscreen = THREEx.FullScreen.bindKey()); b._$onDestroy = this.bind("destroy", function () { this.hasBoilerplate() !== false && this.removeBoilerplate() }); return this
});
tQuery.World.register("hasBoilerplate", function () { return void 0 === tQuery.data(this, "_boilerplateCtx") ? !1 : !0 });
tQuery.World.register("removeBoilerplate", function () { var a = tQuery.data(this, "_boilerplateCtx"); if (void 0 === a) return this; tQuery.removeData(this, "_boilerplateCtx"); this.unbind("destroy", this._$onDestroy); a.stats && document.body.removeChild(a.stats.domElement); a.stats && this.loop().unhook(a.loopStats); a.cameraControls && this.removeCameraControls(); a.windowResize && a.windowResize.stop(); a.screenshot && a.screenshot.unbind(); a.fullscreen && a.fullscreen.unbind() });
tQuery.Control = function (a) { tQuery.Control.parent.constructor.call(this, a) }; tQuery.inherit(tQuery.Control, tQuery.Node); tQuery.Control.prototype.update = function () { this._lists.forEach(function (a) { a.update() }) }; tQuery.Control.prototype.setOn = function (a) { console.assert(a instanceof tQuery.World, "Control.setOn world parameter error"); this._lists[0].object = a.camera(); a.setCameraControls(this); return this }; tQuery.pluginsInstanceOn(tQuery.Control);
tQuery.TrackballControl = function (a) { tQuery.TrackballControl.parent.constructor.call(this, a); this._lists.forEach(function (a) { console.assert(a instanceof THREE.TrackballControls) }) }; tQuery.inherit(tQuery.TrackballControl, tQuery.Control); tQuery.pluginsInstanceOn(tQuery.TrackballControl);
tQuery.mixinAttributes(tQuery.TrackballControl, { rotateSpeed: tQuery.convert.toNumber, zoomSpeed: tQuery.convert.toNumber, minDistance: tQuery.convert.toNumber, maxDistance: tQuery.convert.toNumber, noZoom: tQuery.convert.toBool, noPan: tQuery.convert.toBool, staticMoving: tQuery.convert.toBool, dynamicDampingFactor: tQuery.convert.toNumber, keys: tQuery.convert.identity });
tQuery.TrackballControl.register("target", function (a) { if ("undefined" === typeof a) return this._lists[0].target; "number" === typeof a && 3 === arguments.length && (a = new THREE.Vector3(arguments[0], arguments[1], arguments[2])); console.assert(a instanceof THREE.Vector3, "TrackballControl.target parameter error"); this._lists[0].target.copy(a); return this });
tQuery.register("createTrackballControl", function (a) {
    var a = tQuery.extend(a, { rotateSpeed: 1, zoomSpeed: 1.2, minDistance: 1, maxDistance: 1E3, noZoom: !1, noPan: !1, staticMoving: !1, dynamicDampingFactor: 0.15, keys: [65, 83, 68] }), b = new THREE.TrackballControls(null); b.target.set(0, 0, 0); b.rotateSpeed = a.rotateSpeed; b.zoomSpeed = a.zoomSpeed; b.minDistance = a.minDistance; b.maxDistance = a.maxDistance; b.noZoom = a.noZoom; b.noPan = a.noPan; b.staticMoving = a.staticMoving; b.dynamicDampingFactor = a.dynamicDampingFactor; b.keys = a.keys;
    return tQuery(b)
});
var TWEEN = TWEEN || function () {
    var a, b, c = 60, d = !1, e = [], f; return { setFPS: function (a) { c = a || 60 }, start: function (a) { 0 != arguments.length && this.setFPS(a); b = setInterval(this.update, 1E3 / c) }, stop: function () { clearInterval(b) }, setAutostart: function (a) { (d = a) && !b && this.start() }, add: function (a) { e.push(a); d && !b && this.start() }, getAll: function () { return e }, removeAll: function () { e = [] }, remove: function (b) { a = e.indexOf(b); -1 !== a && e.splice(a, 1) }, update: function (b) {
        a = 0; f = e.length; for (b = b || Date.now(); a < f; ) e[a].update(b) ? a++ : (e.splice(a,
1), f--); 0 == f && !0 == d && this.stop()
    } 
    }
} ();
TWEEN.Tween = function (a) {
    var b = {}, c = {}, d = {}, e = 1E3, f = 0, h = null, m = TWEEN.Easing.Linear.EaseNone, g = null, n = null, i = null; this.to = function (b, c) { null !== c && (e = c); for (var g in b) null !== a[g] && (d[g] = b[g]); return this }; this.start = function (e) { TWEEN.add(this); h = e ? e + f : Date.now() + f; for (var g in d) null !== a[g] && (b[g] = a[g], c[g] = d[g] - a[g]); return this }; this.stop = function () { TWEEN.remove(this); return this }; this.delay = function (a) { f = a; return this }; this.easing = function (a) { m = a; return this }; this.chain = function (a) { g = a }; this.onUpdate =
function (a) { n = a; return this }; this.onComplete = function (a) { i = a; return this }; this.update = function (d) { var f, j; if (d < h) return !0; d = (d - h) / e; d = 1 < d ? 1 : d; j = m(d); for (f in c) a[f] = b[f] + c[f] * j; null !== n && n.call(a, j); return 1 == d ? (null !== i && i.call(a), null !== g && g.start(), !1) : !0 } 
}; TWEEN.Easing = { Linear: {}, Quadratic: {}, Cubic: {}, Quartic: {}, Quintic: {}, Sinusoidal: {}, Exponential: {}, Circular: {}, Elastic: {}, Back: {}, Bounce: {} }; TWEEN.Easing.Linear.EaseNone = function (a) { return a };
TWEEN.Easing.Quadratic.EaseIn = function (a) { return a * a }; TWEEN.Easing.Quadratic.EaseOut = function (a) { return -a * (a - 2) }; TWEEN.Easing.Quadratic.EaseInOut = function (a) { return 1 > (a *= 2) ? 0.5 * a * a : -0.5 * (--a * (a - 2) - 1) }; TWEEN.Easing.Cubic.EaseIn = function (a) { return a * a * a }; TWEEN.Easing.Cubic.EaseOut = function (a) { return --a * a * a + 1 }; TWEEN.Easing.Cubic.EaseInOut = function (a) { return 1 > (a *= 2) ? 0.5 * a * a * a : 0.5 * ((a -= 2) * a * a + 2) }; TWEEN.Easing.Quartic.EaseIn = function (a) { return a * a * a * a };
TWEEN.Easing.Quartic.EaseOut = function (a) { return -(--a * a * a * a - 1) }; TWEEN.Easing.Quartic.EaseInOut = function (a) { return 1 > (a *= 2) ? 0.5 * a * a * a * a : -0.5 * ((a -= 2) * a * a * a - 2) }; TWEEN.Easing.Quintic.EaseIn = function (a) { return a * a * a * a * a }; TWEEN.Easing.Quintic.EaseOut = function (a) { return (a -= 1) * a * a * a * a + 1 }; TWEEN.Easing.Quintic.EaseInOut = function (a) { return 1 > (a *= 2) ? 0.5 * a * a * a * a * a : 0.5 * ((a -= 2) * a * a * a * a + 2) }; TWEEN.Easing.Sinusoidal.EaseIn = function (a) { return -Math.cos(a * Math.PI / 2) + 1 };
TWEEN.Easing.Sinusoidal.EaseOut = function (a) { return Math.sin(a * Math.PI / 2) }; TWEEN.Easing.Sinusoidal.EaseInOut = function (a) { return -0.5 * (Math.cos(Math.PI * a) - 1) }; TWEEN.Easing.Exponential.EaseIn = function (a) { return 0 == a ? 0 : Math.pow(2, 10 * (a - 1)) }; TWEEN.Easing.Exponential.EaseOut = function (a) { return 1 == a ? 1 : -Math.pow(2, -10 * a) + 1 }; TWEEN.Easing.Exponential.EaseInOut = function (a) { return 0 == a ? 0 : 1 == a ? 1 : 1 > (a *= 2) ? 0.5 * Math.pow(2, 10 * (a - 1)) : 0.5 * (-Math.pow(2, -10 * (a - 1)) + 2) };
TWEEN.Easing.Circular.EaseIn = function (a) { return -(Math.sqrt(1 - a * a) - 1) }; TWEEN.Easing.Circular.EaseOut = function (a) { return Math.sqrt(1 - --a * a) }; TWEEN.Easing.Circular.EaseInOut = function (a) { return 1 > (a /= 0.5) ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1) }; TWEEN.Easing.Elastic.EaseIn = function (a) { var b, c = 0.1, d = 0.4; if (0 == a) return 0; if (1 == a) return 1; d || (d = 0.3); !c || 1 > c ? (c = 1, b = d / 4) : b = d / (2 * Math.PI) * Math.asin(1 / c); return -(c * Math.pow(2, 10 * (a -= 1)) * Math.sin(2 * (a - b) * Math.PI / d)) };
TWEEN.Easing.Elastic.EaseOut = function (a) { var b, c = 0.1, d = 0.4; if (0 == a) return 0; if (1 == a) return 1; d || (d = 0.3); !c || 1 > c ? (c = 1, b = d / 4) : b = d / (2 * Math.PI) * Math.asin(1 / c); return c * Math.pow(2, -10 * a) * Math.sin(2 * (a - b) * Math.PI / d) + 1 }; TWEEN.Easing.Elastic.EaseInOut = function (a) { var b, c = 0.1, d = 0.4; if (0 == a) return 0; if (1 == a) return 1; d || (d = 0.3); !c || 1 > c ? (c = 1, b = d / 4) : b = d / (2 * Math.PI) * Math.asin(1 / c); return 1 > (a *= 2) ? -0.5 * c * Math.pow(2, 10 * (a -= 1)) * Math.sin(2 * (a - b) * Math.PI / d) : 0.5 * c * Math.pow(2, -10 * (a -= 1)) * Math.sin(2 * (a - b) * Math.PI / d) + 1 };
TWEEN.Easing.Back.EaseIn = function (a) { return a * a * (2.70158 * a - 1.70158) }; TWEEN.Easing.Back.EaseOut = function (a) { return (a -= 1) * a * (2.70158 * a + 1.70158) + 1 }; TWEEN.Easing.Back.EaseInOut = function (a) { return 1 > (a *= 2) ? 0.5 * a * a * (3.5949095 * a - 2.5949095) : 0.5 * ((a -= 2) * a * (3.5949095 * a + 2.5949095) + 2) }; TWEEN.Easing.Bounce.EaseIn = function (a) { return 1 - TWEEN.Easing.Bounce.EaseOut(1 - a) };
TWEEN.Easing.Bounce.EaseOut = function (a) { return (a /= 1) < 1 / 2.75 ? 7.5625 * a * a : a < 2 / 2.75 ? 7.5625 * (a -= 1.5 / 2.75) * a + 0.75 : a < 2.5 / 2.75 ? 7.5625 * (a -= 2.25 / 2.75) * a + 0.9375 : 7.5625 * (a -= 2.625 / 2.75) * a + 0.984375 }; TWEEN.Easing.Bounce.EaseInOut = function (a) { return 0.5 > a ? 0.5 * TWEEN.Easing.Bounce.EaseIn(2 * a) : 0.5 * TWEEN.Easing.Bounce.EaseOut(2 * a - 1) + 0.5 };
(function () { var a = function () { TWEEN.update() }; tQuery.register("hookTweenUpdate", function (b) { this._loop = b || tQuery.world.loop(); this._loop.hookPreRender(a); tQuery.world.tweenActive = !0 }); tQuery.register("unhookTweenUpdate", function (b) { this._loop = b || tQuery.world.loop(); this._loop.unhookPreRender(a); tQuery.world.tweenActive = !1 }) })();
tQuery.TrackballControl.register("moveCameraTo", function (a, b) {
    console.assert(a instanceof THREE.Vector3, "TrackballControl.moveCameraTo target parameter error"); console.assert("number" === typeof b, "TrackballControl.moveCameraTo time parameter error"); console.assert(!0 === tQuery.world.tweenActive, "TrackballControl.moveCameraTo requires Tween to animate, please hook Tween"); var c = this._lists[0].object, d = { x: c.position.x, y: c.position.y, z: c.position.z }, e = { x: a.x, y: a.y, z: a.z }; (new TWEEN.Tween(d)).to(e, b).start().onUpdate(function () {
        c.position.set(d.x,
d.y, d.z)
    })
});
tQuery.TrackballControl.register("moveCameraTargetTo", function (a, b) {
    console.assert(a instanceof THREE.Vector3, "TrackballControl.moveCameraTo target parameter error"); console.assert("number" === typeof b, "TrackballControl.moveCameraTo time parameter error"); console.assert(!0 === tQuery.world.tweenActive, "TrackballControl.moveCameraTargetTo requires Tween to animate, please hook Tween"); var c = this, d = c.target(), e = { x: d.x, y: d.y, z: d.z }, d = { x: a.x, y: a.y, z: a.z }; (new TWEEN.Tween(e)).to(d, b).start().onUpdate(function () {
        c.target(e.x, e.y,
e.z)
    })
});
tQuery.TrackballControl.register("panCameraTo", function (a, b) {
    console.assert(a instanceof THREE.Vector3, "TrackballControl.moveCameraTo target parameter error"); console.assert("number" === typeof b, "TrackballControl.moveCameraTo time parameter error"); console.assert(!0 === tQuery.world.tweenActive, "TrackballControl.panCameraTo requires Tween to animate, please hook Tween"); var c = tQuery.world.getCameraControls().target(), d = tQuery.world.camera().position, e = new THREE.Vector3; e.copy(a); e = e.add(e, d); e = e.sub(e,
c); this.moveCameraTo(e, b); this.moveCameraTargetTo(a, b)
}); var THREEx = THREEx || {}; THREEx.WindowResize = function (a, b) { var c = function () { a.setSize(window.innerWidth, window.innerHeight); b.aspect = window.innerWidth / window.innerHeight; b.updateProjectionMatrix() }; window.addEventListener("resize", c, !1); return { stop: function () { window.removeEventListener("resize", c) } } }; THREEx.WindowResize.bind = function (a, b) { return THREEx.WindowResize(a, b) }; THREEx = THREEx || {};
(function () {
    var a = function (a, c, d, e) { var f = function (a, b) { return function () { return a.apply(b, arguments) } } (function () { var a, b, f = document.createElement("canvas"); f.width = c; f.height = d; var i = f.getContext("2d"); i.fillStyle = "black"; i.fillRect(0, 0, f.width, f.height); a = f.width; var l = f.height, k = h.width; b = h.height; var j = b / k; k >= a && 1 >= j ? (k = a, b = a * j) : b >= l && (b = l, k = l / j); a = k; i.drawImage(h, (f.width - a) / 2, (f.height - b) / 2, a, b); f = f.toDataURL("image/png"); e && e(f) }, this), h = new Image; h.onload = f; h.src = a }; THREEx.Screenshot = { toDataURL: function (a,
c) { return a.domElement.toDataURL(c || "image/png") }, bindKey: function (b, c) { var c = c || {}, d = c.charCode || 112, e = c.width, f = c.height, h = c.callback || function (a) { window.open(a, "name-" + Math.random()) }, m = function (a, b) { return function () { return a.apply(b, arguments) } } (function (c) { c.which === d && (c = this.toDataURL(b), void 0 === e && void 0 === f ? h(c) : a(c, e, f, h)) }, this); document.addEventListener("keypress", m, !1); return { unbind: function () { document.removeEventListener("keypress", m, !1) } } } 
    }
})(); THREEx = THREEx || {};
THREEx.FullScreen = THREEx.FullScreen || {}; THREEx.FullScreen.available = function () { return this._hasWebkitFullScreen || this._hasMozFullScreen }; THREEx.FullScreen.activated = function () { if (this._hasWebkitFullScreen) return document.webkitIsFullScreen; if (this._hasMozFullScreen) return document.mozFullScreen; console.assert(!1) };
THREEx.FullScreen.request = function (a) { a = a || document.body; this._hasWebkitFullScreen ? a.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT) : this._hasMozFullScreen ? a.mozRequestFullScreen() : console.assert(!1) }; THREEx.FullScreen.cancel = function () { this._hasWebkitFullScreen ? document.webkitCancelFullScreen() : this._hasMozFullScreen ? document.mozCancelFullScreen() : console.assert(!1) }; THREEx.FullScreen._hasWebkitFullScreen = "webkitCancelFullScreen" in document ? !0 : !1;
THREEx.FullScreen._hasMozFullScreen = "mozCancelFullScreen" in document ? !0 : !1;
THREEx.FullScreen.bindKey = function (a) {
    var a = a || {}, b = a.charCode || 102, c = void 0 !== a.dblclick ? a.dblclick : !1, d = a.element, e = function () { THREEx.FullScreen.activated() ? THREEx.FullScreen.cancel() : THREEx.FullScreen.request(d) }, f = function (a, b) { return function () { return a.apply(b, arguments) } } (function (a) { a.which === b && e() }, this); document.addEventListener("keypress", f, !1); c && document.addEventListener("dblclick", e, !1); return { unbind: function () {
        document.removeEventListener("keypress", f, !1); c && document.removeEventListener("dblclick",
e, !1)
    } 
    }
}; THREEx = THREEx || {};
THREEx.DragPanControls = function (a, b) {
    this._object = a; this._domElement = b || document; this.target = new THREE.Vector3(0, 0, 0); this.speedY = this.speedX = 0.03; this.rangeX = -40; this.rangeY = 40; this._mouseY = this._mouseX = 0; var c = this; this._$onMouseMove = function () { c._onMouseMove.apply(c, arguments) }; this._$onTouchStart = function () { c._onTouchStart.apply(c, arguments) }; this._$onTouchMove = function () { c._onTouchMove.apply(c, arguments) }; this._domElement.addEventListener("mousemove", this._$onMouseMove, !1); this._domElement.addEventListener("touchstart",
this._$onTouchStart, !1); this._domElement.addEventListener("touchmove", this._$onTouchMove, !1)
}; THREEx.DragPanControls.prototype.destroy = function () { this._domElement.removeEventListener("mousemove", this._$onMouseMove, !1); this._domElement.removeEventListener("touchstart", this._$onTouchStart, !1); this._domElement.removeEventListener("touchmove", this._$onTouchMove, !1) };
THREEx.DragPanControls.prototype.update = function () { this._object.position.x += (this._mouseX * this.rangeX - this._object.position.x) * this.speedX; this._object.position.y += (this._mouseY * this.rangeY - this._object.position.y) * this.speedY; this._object.lookAt(this.target) }; THREEx.DragPanControls.prototype._onMouseMove = function (a) { this._mouseX = a.clientX / window.innerWidth - 0.5; this._mouseY = a.clientY / window.innerHeight - 0.5 };
THREEx.DragPanControls.prototype._onTouchStart = function (a) { 1 == a.touches.length && (this._mouseX = a.touches[0].pageX / window.innerWidth - 0.5, this._mouseY = a.touches[0].pageY / window.innerHeight - 0.5) }; THREEx.DragPanControls.prototype._onTouchMove = function (a) { 1 == a.touches.length && (a.preventDefault(), this._mouseX = a.touches[0].pageX / window.innerWidth - 0.5, this._mouseY = a.touches[0].pageY / window.innerHeight - 0.5) };
var Stats = function () {
    var a, b, c = 0, d = 0, e = Date.now(), f = e, h = e, m = 0, g = 1E3, n = 0, i, l, k, j = [[16, 16, 48], [0, 255, 255]], s = 0, t = 1E3, u = 0, p, r, q, o = [[16, 48, 16], [0, 255, 0]]; a = document.createElement("div"); a.style.cursor = "pointer"; a.style.width = "80px"; a.style.opacity = "0.9"; a.style.zIndex = "10001"; a.addEventListener("mousedown", function (a) { a.preventDefault(); c = (c + 1) % 2; 0 == c ? (i.style.display = "block", p.style.display = "none") : (i.style.display = "none", p.style.display = "block") }, !1); i = document.createElement("div"); i.style.textAlign =
"left"; i.style.lineHeight = "1.2em"; i.style.backgroundColor = "rgb(" + Math.floor(j[0][0] / 2) + "," + Math.floor(j[0][1] / 2) + "," + Math.floor(j[0][2] / 2) + ")"; i.style.padding = "0 0 3px 3px"; a.appendChild(i); l = document.createElement("div"); l.style.fontFamily = "Helvetica, Arial, sans-serif"; l.style.fontSize = "9px"; l.style.color = "rgb(" + j[1][0] + "," + j[1][1] + "," + j[1][2] + ")"; l.style.fontWeight = "bold"; l.innerHTML = "FPS"; i.appendChild(l); k = document.createElement("div"); k.style.position = "relative"; k.style.width = "74px"; k.style.height =
"30px"; k.style.backgroundColor = "rgb(" + j[1][0] + "," + j[1][1] + "," + j[1][2] + ")"; for (i.appendChild(k); 74 > k.children.length; ) b = document.createElement("span"), b.style.width = "1px", b.style.height = "30px", b.style.cssFloat = "left", b.style.backgroundColor = "rgb(" + j[0][0] + "," + j[0][1] + "," + j[0][2] + ")", k.appendChild(b); p = document.createElement("div"); p.style.textAlign = "left"; p.style.lineHeight = "1.2em"; p.style.backgroundColor = "rgb(" + Math.floor(o[0][0] / 2) + "," + Math.floor(o[0][1] / 2) + "," + Math.floor(o[0][2] / 2) + ")"; p.style.padding =
"0 0 3px 3px"; p.style.display = "none"; a.appendChild(p); r = document.createElement("div"); r.style.fontFamily = "Helvetica, Arial, sans-serif"; r.style.fontSize = "9px"; r.style.color = "rgb(" + o[1][0] + "," + o[1][1] + "," + o[1][2] + ")"; r.style.fontWeight = "bold"; r.innerHTML = "MS"; p.appendChild(r); q = document.createElement("div"); q.style.position = "relative"; q.style.width = "74px"; q.style.height = "30px"; q.style.backgroundColor = "rgb(" + o[1][0] + "," + o[1][1] + "," + o[1][2] + ")"; for (p.appendChild(q); 74 > q.children.length; ) b = document.createElement("span"),
b.style.width = "1px", b.style.height = 30 * Math.random() + "px", b.style.cssFloat = "left", b.style.backgroundColor = "rgb(" + o[0][0] + "," + o[0][1] + "," + o[0][2] + ")", q.appendChild(b); return { domElement: a, update: function () {
    e = Date.now(); s = e - f; t = Math.min(t, s); u = Math.max(u, s); r.textContent = s + " MS (" + t + "-" + u + ")"; var a = Math.min(30, 30 - 30 * (s / 200)); q.appendChild(q.firstChild).style.height = a + "px"; f = e; d++; e > h + 1E3 && (m = Math.round(1E3 * d / (e - h)), g = Math.min(g, m), n = Math.max(n, m), l.textContent = m + " FPS (" + g + "-" + n + ")", a = Math.min(30, 30 -
30 * (m / 100)), k.appendChild(k.firstChild).style.height = a + "px", h = e, d = 0)
} 
}
};