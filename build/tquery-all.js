// tquery.js - https://github.com/jeromeetienne/tquery - MIT License
// tquery.js - https://github.com/jeromeetienne/tquery - MIT License
// Three.js r47 - http://github.com/mrdoob/three.js
'use strict';var THREE=THREE||{};if(!self.Int32Array)self.Int32Array=Array,self.Float32Array=Array;
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"RequestCancelAnimationFrame"];if(!window.requestAnimationFrame)window.requestAnimationFrame=function(b){var c=(new Date).getTime(),f=Math.max(0,16-(c-a)),g=window.setTimeout(function(){b(c+f)},f);a=c+f;return g};if(!window.cancelAnimationFrame)window.cancelAnimationFrame=
function(a){clearTimeout(a)}})();THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};THREE.Clock.prototype.start=function(){this.oldTime=this.startTime=Date.now();this.running=!0};THREE.Clock.prototype.stop=function(){this.getElapsedTime();this.running=!1};THREE.Clock.prototype.getElapsedTime=function(){return this.elapsedTime+=this.getDelta()};
THREE.Clock.prototype.getDelta=function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=Date.now(),a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a};THREE.Color=function(a){void 0!==a&&this.setHex(a);return this};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);
this.b=Math.sqrt(this.b);return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSV:function(a,b,c){var d,e,f;if(0===c)this.r=this.g=this.b=0;else switch(d=Math.floor(6*a),e=6*a-d,a=c*(1-b),f=c*(1-b*e),b=c*(1-b*(1-e)),d){case 1:this.r=f;this.g=c;this.b=a;break;case 2:this.r=a;this.g=c;this.b=b;break;case 3:this.r=a;this.g=f;this.b=c;break;case 4:this.r=b;this.g=a;this.b=c;break;case 5:this.r=c;this.g=a;this.b=f;break;case 6:case 0:this.r=c,this.g=b,this.b=a}return this},setHex:function(a){a=
Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},getHex:function(){return Math.floor(255*this.r)<<16^Math.floor(255*this.g)<<8^Math.floor(255*this.b)},getContextStyle:function(){return"rgb("+Math.floor(255*this.r)+","+Math.floor(255*this.g)+","+Math.floor(255*this.b)+")"},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},copy:function(a){this.x=a.x;this.y=a.y;return this},clone:function(){return new THREE.Vector2(this.x,this.y)},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},
divideScalar:function(a){a?(this.x/=a,this.y/=a):this.set(0,0);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,a=this.y-a.y;return b*b+a*a},setLength:function(a){return this.normalize().multiplyScalar(a)},
equals:function(a){return a.x===this.x&&a.y===this.y}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},
addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},multiply:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},multiplySelf:function(a){this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},divideSelf:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},
divideScalar:function(a){a?(this.x/=a,this.y/=a,this.z/=a):this.z=this.y=this.x=0;return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.lengthSq())},lengthManhattan:function(){return this.x+this.y+this.z},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.normalize().multiplyScalar(a)},
cross:function(a,b){this.x=a.y*b.z-a.z*b.y;this.y=a.z*b.x-a.x*b.z;this.z=a.x*b.y-a.y*b.x;return this},crossSelf:function(a){var b=this.x,c=this.y,d=this.z;this.x=c*a.z-d*a.y;this.y=d*a.x-b*a.z;this.z=b*a.y-c*a.x;return this},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){return(new THREE.Vector3).sub(this,a).lengthSq()},setPositionFromMatrix:function(a){this.x=a.n14;this.y=a.n24;this.z=a.n34},setRotationFromMatrix:function(a){var b=Math.cos(this.y);
this.y=Math.asin(a.n13);1.0E-5<Math.abs(b)?(this.x=Math.atan2(-a.n23/b,a.n33/b),this.z=Math.atan2(-a.n12/b,a.n11/b)):(this.x=0,this.z=Math.atan2(a.n21,a.n22))},isZero:function(){return 1.0E-4>this.lengthSq()}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)},add:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addSelf:function(a){this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},sub:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-
b.z;this.w=a.w-b.w;return this},subSelf:function(a){this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},divideScalar:function(a){a?(this.x/=a,this.y/=a,this.z/=a,this.w/=a):(this.z=this.y=this.x=0,this.w=1);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.dot(this)},length:function(){return Math.sqrt(this.lengthSq())},
normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.normalize().multiplyScalar(a)},lerpSelf:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this}};THREE.Frustum=function(){this.planes=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4]};
THREE.Frustum.prototype.setFromMatrix=function(a){var b,c=this.planes;c[0].set(a.n41-a.n11,a.n42-a.n12,a.n43-a.n13,a.n44-a.n14);c[1].set(a.n41+a.n11,a.n42+a.n12,a.n43+a.n13,a.n44+a.n14);c[2].set(a.n41+a.n21,a.n42+a.n22,a.n43+a.n23,a.n44+a.n24);c[3].set(a.n41-a.n21,a.n42-a.n22,a.n43-a.n23,a.n44-a.n24);c[4].set(a.n41-a.n31,a.n42-a.n32,a.n43-a.n33,a.n44-a.n34);c[5].set(a.n41+a.n31,a.n42+a.n32,a.n43+a.n33,a.n44+a.n34);for(a=0;6>a;a++)b=c[a],b.divideScalar(Math.sqrt(b.x*b.x+b.y*b.y+b.z*b.z))};
THREE.Frustum.prototype.contains=function(a){for(var b=this.planes,c=a.matrixWorld,d=THREE.Frustum.__v1.set(c.getColumnX().length(),c.getColumnY().length(),c.getColumnZ().length()),d=-a.geometry.boundingSphere.radius*Math.max(d.x,Math.max(d.y,d.z)),e=0;6>e;e++)if(a=b[e].x*c.n14+b[e].y*c.n24+b[e].z*c.n34+b[e].w,a<=d)return!1;return!0};THREE.Frustum.__v1=new THREE.Vector3;
THREE.Ray=function(a,b){function c(a,b,c){o.sub(c,a);r=o.dot(b);s=p.add(a,m.copy(b).multiplyScalar(r));return t=c.distanceTo(s)}function d(a,b,c,d){o.sub(d,b);p.sub(c,b);m.sub(a,b);u=o.dot(o);v=o.dot(p);x=o.dot(m);B=p.dot(p);D=p.dot(m);C=1/(u*B-v*v);A=(B*x-v*D)*C;H=(u*D-v*x)*C;return 0<=A&&0<=H&&1>A+H}this.origin=a||new THREE.Vector3;this.direction=b||new THREE.Vector3;this.intersectScene=function(a){return this.intersectObjects(a.children)};this.intersectObjects=function(a){var b,c,d=[];for(b=0,
c=a.length;b<c;b++)Array.prototype.push.apply(d,this.intersectObject(a[b]));d.sort(function(a,b){return a.distance-b.distance});return d};var e=new THREE.Vector3,f=new THREE.Vector3,g=new THREE.Vector3,h=new THREE.Vector3,i=new THREE.Vector3,l=new THREE.Vector3,k=new THREE.Vector3,n=new THREE.Vector3,q=new THREE.Vector3;this.intersectObject=function(a){for(var b,m=[],o=0,p=a.children.length;o<p;o++)Array.prototype.push.apply(m,this.intersectObject(a.children[o]));if(a instanceof THREE.Particle){o=
c(this.origin,this.direction,a.matrixWorld.getPosition());if(o>a.scale.x)return[];b={distance:o,point:a.position,face:null,object:a};m.push(b)}else if(a instanceof THREE.Mesh){o=c(this.origin,this.direction,a.matrixWorld.getPosition());p=THREE.Frustum.__v1.set(a.matrixWorld.getColumnX().length(),a.matrixWorld.getColumnY().length(),a.matrixWorld.getColumnZ().length());if(o>a.geometry.boundingSphere.radius*Math.max(p.x,Math.max(p.y,p.z)))return m;var r,s,j=a.geometry,t=j.vertices,y;a.matrixRotationWorld.extractRotation(a.matrixWorld);
for(o=0,p=j.faces.length;o<p;o++)if(b=j.faces[o],i.copy(this.origin),l.copy(this.direction),y=a.matrixWorld,k=y.multiplyVector3(k.copy(b.centroid)).subSelf(i),n=a.matrixRotationWorld.multiplyVector3(n.copy(b.normal)),r=l.dot(n),!(1.0E-4>Math.abs(r))&&(s=n.dot(k)/r,!(0>s)&&(a.doubleSided||(a.flipSided?0<r:0>r))))if(q.add(i,l.multiplyScalar(s)),b instanceof THREE.Face3)e=y.multiplyVector3(e.copy(t[b.a].position)),f=y.multiplyVector3(f.copy(t[b.b].position)),g=y.multiplyVector3(g.copy(t[b.c].position)),
d(q,e,f,g)&&(b={distance:i.distanceTo(q),point:q.clone(),face:b,object:a},m.push(b));else if(b instanceof THREE.Face4&&(e=y.multiplyVector3(e.copy(t[b.a].position)),f=y.multiplyVector3(f.copy(t[b.b].position)),g=y.multiplyVector3(g.copy(t[b.c].position)),h=y.multiplyVector3(h.copy(t[b.d].position)),d(q,e,f,h)||d(q,f,g,h)))b={distance:i.distanceTo(q),point:q.clone(),face:b,object:a},m.push(b)}return m};var o=new THREE.Vector3,p=new THREE.Vector3,m=new THREE.Vector3,r,s,t,u,v,x,B,D,C,A,H};
THREE.Rectangle=function(){function a(){f=d-b;g=e-c}var b,c,d,e,f,g,h=!0;this.getX=function(){return b};this.getY=function(){return c};this.getWidth=function(){return f};this.getHeight=function(){return g};this.getLeft=function(){return b};this.getTop=function(){return c};this.getRight=function(){return d};this.getBottom=function(){return e};this.set=function(f,g,k,n){h=!1;b=f;c=g;d=k;e=n;a()};this.addPoint=function(f,g){h?(h=!1,b=f,c=g,d=f,e=g):(b=b<f?b:f,c=c<g?c:g,d=d>f?d:f,e=e>g?e:g);a()};this.add3Points=
function(f,g,k,n,q,o){h?(h=!1,b=f<k?f<q?f:q:k<q?k:q,c=g<n?g<o?g:o:n<o?n:o,d=f>k?f>q?f:q:k>q?k:q,e=g>n?g>o?g:o:n>o?n:o):(b=f<k?f<q?f<b?f:b:q<b?q:b:k<q?k<b?k:b:q<b?q:b,c=g<n?g<o?g<c?g:c:o<c?o:c:n<o?n<c?n:c:o<c?o:c,d=f>k?f>q?f>d?f:d:q>d?q:d:k>q?k>d?k:d:q>d?q:d,e=g>n?g>o?g>e?g:e:o>e?o:e:n>o?n>e?n:e:o>e?o:e);a()};this.addRectangle=function(f){h?(h=!1,b=f.getLeft(),c=f.getTop(),d=f.getRight(),e=f.getBottom()):(b=b<f.getLeft()?b:f.getLeft(),c=c<f.getTop()?c:f.getTop(),d=d>f.getRight()?d:f.getRight(),e=e>
f.getBottom()?e:f.getBottom());a()};this.inflate=function(f){b-=f;c-=f;d+=f;e+=f;a()};this.minSelf=function(f){b=b>f.getLeft()?b:f.getLeft();c=c>f.getTop()?c:f.getTop();d=d<f.getRight()?d:f.getRight();e=e<f.getBottom()?e:f.getBottom();a()};this.intersects=function(a){return d<a.getLeft()||b>a.getRight()||e<a.getTop()||c>a.getBottom()?!1:!0};this.empty=function(){h=!0;e=d=c=b=0;a()};this.isEmpty=function(){return h}};
THREE.Math={clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())}};THREE.Matrix3=function(){this.m=[]};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,transpose:function(){var a,b=this.m;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},transposeIntoArray:function(a){var b=this.m;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this}};
THREE.Matrix4=function(a,b,c,d,e,f,g,h,i,l,k,n,q,o,p,m){this.set(void 0!==a?a:1,b||0,c||0,d||0,e||0,void 0!==f?f:1,g||0,h||0,i||0,l||0,void 0!==k?k:1,n||0,q||0,o||0,p||0,void 0!==m?m:1);this.flat=Array(16);this.m33=new THREE.Matrix3};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,i,l,k,n,q,o,p,m){this.n11=a;this.n12=b;this.n13=c;this.n14=d;this.n21=e;this.n22=f;this.n23=g;this.n24=h;this.n31=i;this.n32=l;this.n33=k;this.n34=n;this.n41=q;this.n42=o;this.n43=p;this.n44=m;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.set(a.n11,a.n12,a.n13,a.n14,a.n21,a.n22,a.n23,a.n24,a.n31,a.n32,a.n33,a.n34,a.n41,a.n42,a.n43,a.n44);return this},lookAt:function(a,
b,c){var d=THREE.Matrix4.__v1,e=THREE.Matrix4.__v2,f=THREE.Matrix4.__v3;f.sub(a,b).normalize();if(0===f.length())f.z=1;d.cross(c,f).normalize();0===d.length()&&(f.x+=1.0E-4,d.cross(c,f).normalize());e.cross(f,d).normalize();this.n11=d.x;this.n12=e.x;this.n13=f.x;this.n21=d.y;this.n22=e.y;this.n23=f.y;this.n31=d.z;this.n32=e.z;this.n33=f.z;return this},multiply:function(a,b){var c=a.n11,d=a.n12,e=a.n13,f=a.n14,g=a.n21,h=a.n22,i=a.n23,l=a.n24,k=a.n31,n=a.n32,q=a.n33,o=a.n34,p=a.n41,m=a.n42,r=a.n43,
s=a.n44,t=b.n11,u=b.n12,v=b.n13,x=b.n14,B=b.n21,D=b.n22,C=b.n23,A=b.n24,H=b.n31,I=b.n32,N=b.n33,$=b.n34,K=b.n41,Q=b.n42,L=b.n43,G=b.n44;this.n11=c*t+d*B+e*H+f*K;this.n12=c*u+d*D+e*I+f*Q;this.n13=c*v+d*C+e*N+f*L;this.n14=c*x+d*A+e*$+f*G;this.n21=g*t+h*B+i*H+l*K;this.n22=g*u+h*D+i*I+l*Q;this.n23=g*v+h*C+i*N+l*L;this.n24=g*x+h*A+i*$+l*G;this.n31=k*t+n*B+q*H+o*K;this.n32=k*u+n*D+q*I+o*Q;this.n33=k*v+n*C+q*N+o*L;this.n34=k*x+n*A+q*$+o*G;this.n41=p*t+m*B+r*H+s*K;this.n42=p*u+m*D+r*I+s*Q;this.n43=p*v+m*
C+r*N+s*L;this.n44=p*x+m*A+r*$+s*G;return this},multiplySelf:function(a){return this.multiply(this,a)},multiplyToArray:function(a,b,c){this.multiply(a,b);c[0]=this.n11;c[1]=this.n21;c[2]=this.n31;c[3]=this.n41;c[4]=this.n12;c[5]=this.n22;c[6]=this.n32;c[7]=this.n42;c[8]=this.n13;c[9]=this.n23;c[10]=this.n33;c[11]=this.n43;c[12]=this.n14;c[13]=this.n24;c[14]=this.n34;c[15]=this.n44;return this},multiplyScalar:function(a){this.n11*=a;this.n12*=a;this.n13*=a;this.n14*=a;this.n21*=a;this.n22*=a;this.n23*=
a;this.n24*=a;this.n31*=a;this.n32*=a;this.n33*=a;this.n34*=a;this.n41*=a;this.n42*=a;this.n43*=a;this.n44*=a;return this},multiplyVector3:function(a){var b=a.x,c=a.y,d=a.z,e=1/(this.n41*b+this.n42*c+this.n43*d+this.n44);a.x=(this.n11*b+this.n12*c+this.n13*d+this.n14)*e;a.y=(this.n21*b+this.n22*c+this.n23*d+this.n24)*e;a.z=(this.n31*b+this.n32*c+this.n33*d+this.n34)*e;return a},multiplyVector4:function(a){var b=a.x,c=a.y,d=a.z,e=a.w;a.x=this.n11*b+this.n12*c+this.n13*d+this.n14*e;a.y=this.n21*b+this.n22*
c+this.n23*d+this.n24*e;a.z=this.n31*b+this.n32*c+this.n33*d+this.n34*e;a.w=this.n41*b+this.n42*c+this.n43*d+this.n44*e;return a},rotateAxis:function(a){var b=a.x,c=a.y,d=a.z;a.x=b*this.n11+c*this.n12+d*this.n13;a.y=b*this.n21+c*this.n22+d*this.n23;a.z=b*this.n31+c*this.n32+d*this.n33;a.normalize();return a},crossVector:function(a){var b=new THREE.Vector4;b.x=this.n11*a.x+this.n12*a.y+this.n13*a.z+this.n14*a.w;b.y=this.n21*a.x+this.n22*a.y+this.n23*a.z+this.n24*a.w;b.z=this.n31*a.x+this.n32*a.y+this.n33*
a.z+this.n34*a.w;b.w=a.w?this.n41*a.x+this.n42*a.y+this.n43*a.z+this.n44*a.w:1;return b},determinant:function(){var a=this.n11,b=this.n12,c=this.n13,d=this.n14,e=this.n21,f=this.n22,g=this.n23,h=this.n24,i=this.n31,l=this.n32,k=this.n33,n=this.n34,q=this.n41,o=this.n42,p=this.n43,m=this.n44;return d*g*l*q-c*h*l*q-d*f*k*q+b*h*k*q+c*f*n*q-b*g*n*q-d*g*i*o+c*h*i*o+d*e*k*o-a*h*k*o-c*e*n*o+a*g*n*o+d*f*i*p-b*h*i*p-d*e*l*p+a*h*l*p+b*e*n*p-a*f*n*p-c*f*i*m+b*g*i*m+c*e*l*m-a*g*l*m-b*e*k*m+a*f*k*m},transpose:function(){var a;
a=this.n21;this.n21=this.n12;this.n12=a;a=this.n31;this.n31=this.n13;this.n13=a;a=this.n32;this.n32=this.n23;this.n23=a;a=this.n41;this.n41=this.n14;this.n14=a;a=this.n42;this.n42=this.n24;this.n24=a;a=this.n43;this.n43=this.n34;this.n34=a;return this},clone:function(){var a=new THREE.Matrix4;a.n11=this.n11;a.n12=this.n12;a.n13=this.n13;a.n14=this.n14;a.n21=this.n21;a.n22=this.n22;a.n23=this.n23;a.n24=this.n24;a.n31=this.n31;a.n32=this.n32;a.n33=this.n33;a.n34=this.n34;a.n41=this.n41;a.n42=this.n42;
a.n43=this.n43;a.n44=this.n44;return a},flatten:function(){this.flat[0]=this.n11;this.flat[1]=this.n21;this.flat[2]=this.n31;this.flat[3]=this.n41;this.flat[4]=this.n12;this.flat[5]=this.n22;this.flat[6]=this.n32;this.flat[7]=this.n42;this.flat[8]=this.n13;this.flat[9]=this.n23;this.flat[10]=this.n33;this.flat[11]=this.n43;this.flat[12]=this.n14;this.flat[13]=this.n24;this.flat[14]=this.n34;this.flat[15]=this.n44;return this.flat},flattenToArray:function(a){a[0]=this.n11;a[1]=this.n21;a[2]=this.n31;
a[3]=this.n41;a[4]=this.n12;a[5]=this.n22;a[6]=this.n32;a[7]=this.n42;a[8]=this.n13;a[9]=this.n23;a[10]=this.n33;a[11]=this.n43;a[12]=this.n14;a[13]=this.n24;a[14]=this.n34;a[15]=this.n44;return a},flattenToArrayOffset:function(a,b){a[b]=this.n11;a[b+1]=this.n21;a[b+2]=this.n31;a[b+3]=this.n41;a[b+4]=this.n12;a[b+5]=this.n22;a[b+6]=this.n32;a[b+7]=this.n42;a[b+8]=this.n13;a[b+9]=this.n23;a[b+10]=this.n33;a[b+11]=this.n43;a[b+12]=this.n14;a[b+13]=this.n24;a[b+14]=this.n34;a[b+15]=this.n44;return a},
setTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},setScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},setRotationX:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},setRotationY:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},setRotationZ:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},
setRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,i=e*f,l=e*g;this.set(i*f+c,i*g-d*h,i*h+d*g,0,i*g+d*h,l*g+c,l*h-d*f,0,i*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},setPosition:function(a){this.n14=a.x;this.n24=a.y;this.n34=a.z;return this},getPosition:function(){return THREE.Matrix4.__v1.set(this.n14,this.n24,this.n34)},getColumnX:function(){return THREE.Matrix4.__v1.set(this.n11,this.n21,this.n31)},getColumnY:function(){return THREE.Matrix4.__v1.set(this.n12,
this.n22,this.n32)},getColumnZ:function(){return THREE.Matrix4.__v1.set(this.n13,this.n23,this.n33)},getInverse:function(a){var b=a.n11,c=a.n12,d=a.n13,e=a.n14,f=a.n21,g=a.n22,h=a.n23,i=a.n24,l=a.n31,k=a.n32,n=a.n33,q=a.n34,o=a.n41,p=a.n42,m=a.n43,r=a.n44;this.n11=h*q*p-i*n*p+i*k*m-g*q*m-h*k*r+g*n*r;this.n12=e*n*p-d*q*p-e*k*m+c*q*m+d*k*r-c*n*r;this.n13=d*i*p-e*h*p+e*g*m-c*i*m-d*g*r+c*h*r;this.n14=e*h*k-d*i*k-e*g*n+c*i*n+d*g*q-c*h*q;this.n21=i*n*o-h*q*o-i*l*m+f*q*m+h*l*r-f*n*r;this.n22=d*q*o-e*n*o+
e*l*m-b*q*m-d*l*r+b*n*r;this.n23=e*h*o-d*i*o-e*f*m+b*i*m+d*f*r-b*h*r;this.n24=d*i*l-e*h*l+e*f*n-b*i*n-d*f*q+b*h*q;this.n31=g*q*o-i*k*o+i*l*p-f*q*p-g*l*r+f*k*r;this.n32=e*k*o-c*q*o-e*l*p+b*q*p+c*l*r-b*k*r;this.n33=c*i*o-e*g*o+e*f*p-b*i*p-c*f*r+b*g*r;this.n34=e*g*l-c*i*l-e*f*k+b*i*k+c*f*q-b*g*q;this.n41=h*k*o-g*n*o-h*l*p+f*n*p+g*l*m-f*k*m;this.n42=c*n*o-d*k*o+d*l*p-b*n*p-c*l*m+b*k*m;this.n43=d*g*o-c*h*o-d*f*p+b*h*p+c*f*m-b*g*m;this.n44=c*h*l-d*g*l+d*f*k-b*h*k-c*f*n+b*g*n;this.multiplyScalar(1/a.determinant());
return this},setRotationFromEuler:function(a,b){var c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);switch(b){case "YXZ":var i=g*h,l=g*e,k=d*h,n=d*e;this.n11=i+n*c;this.n12=k*c-l;this.n13=f*d;this.n21=f*e;this.n22=f*h;this.n23=-c;this.n31=l*c-k;this.n32=n+i*c;this.n33=f*g;break;case "ZXY":i=g*h;l=g*e;k=d*h;n=d*e;this.n11=i-n*c;this.n12=-f*e;this.n13=k+l*c;this.n21=l+k*c;this.n22=f*h;this.n23=n-i*c;this.n31=-f*d;this.n32=c;this.n33=f*g;break;case "ZYX":i=
f*h;l=f*e;k=c*h;n=c*e;this.n11=g*h;this.n12=k*d-l;this.n13=i*d+n;this.n21=g*e;this.n22=n*d+i;this.n23=l*d-k;this.n31=-d;this.n32=c*g;this.n33=f*g;break;case "YZX":i=f*g;l=f*d;k=c*g;n=c*d;this.n11=g*h;this.n12=n-i*e;this.n13=k*e+l;this.n21=e;this.n22=f*h;this.n23=-c*h;this.n31=-d*h;this.n32=l*e+k;this.n33=i-n*e;break;case "XZY":i=f*g;l=f*d;k=c*g;n=c*d;this.n11=g*h;this.n12=-e;this.n13=d*h;this.n21=i*e+n;this.n22=f*h;this.n23=l*e-k;this.n31=k*e-l;this.n32=c*h;this.n33=n*e+i;break;default:i=f*h,l=f*
e,k=c*h,n=c*e,this.n11=g*h,this.n12=-g*e,this.n13=d,this.n21=l+k*d,this.n22=i-n*d,this.n23=-c*g,this.n31=n-i*d,this.n32=k+l*d,this.n33=f*g}return this},setRotationFromQuaternion:function(a){var b=a.x,c=a.y,d=a.z,e=a.w,f=b+b,g=c+c,h=d+d,a=b*f,i=b*g,b=b*h,l=c*g,c=c*h,d=d*h,f=e*f,g=e*g,e=e*h;this.n11=1-(l+d);this.n12=i-e;this.n13=b+g;this.n21=i+e;this.n22=1-(a+d);this.n23=c-f;this.n31=b-g;this.n32=c+f;this.n33=1-(a+l);return this},scale:function(a){var b=a.x,c=a.y,a=a.z;this.n11*=b;this.n12*=c;this.n13*=
a;this.n21*=b;this.n22*=c;this.n23*=a;this.n31*=b;this.n32*=c;this.n33*=a;this.n41*=b;this.n42*=c;this.n43*=a;return this},compose:function(a,b,c){var d=THREE.Matrix4.__m1,e=THREE.Matrix4.__m2;d.identity();d.setRotationFromQuaternion(b);e.setScale(c.x,c.y,c.z);this.multiply(d,e);this.n14=a.x;this.n24=a.y;this.n34=a.z;return this},decompose:function(a,b,c){var d=THREE.Matrix4.__v1,e=THREE.Matrix4.__v2,f=THREE.Matrix4.__v3;d.set(this.n11,this.n21,this.n31);e.set(this.n12,this.n22,this.n32);f.set(this.n13,
this.n23,this.n33);a=a instanceof THREE.Vector3?a:new THREE.Vector3;b=b instanceof THREE.Quaternion?b:new THREE.Quaternion;c=c instanceof THREE.Vector3?c:new THREE.Vector3;c.x=d.length();c.y=e.length();c.z=f.length();a.x=this.n14;a.y=this.n24;a.z=this.n34;d=THREE.Matrix4.__m1;d.copy(this);d.n11/=c.x;d.n21/=c.x;d.n31/=c.x;d.n12/=c.y;d.n22/=c.y;d.n32/=c.y;d.n13/=c.z;d.n23/=c.z;d.n33/=c.z;b.setFromRotationMatrix(d);return[a,b,c]},extractPosition:function(a){this.n14=a.n14;this.n24=a.n24;this.n34=a.n34;
return this},extractRotation:function(a){var b=THREE.Matrix4.__v1,c=1/b.set(a.n11,a.n21,a.n31).length(),d=1/b.set(a.n12,a.n22,a.n32).length(),b=1/b.set(a.n13,a.n23,a.n33).length();this.n11=a.n11*c;this.n21=a.n21*c;this.n31=a.n31*c;this.n12=a.n12*d;this.n22=a.n22*d;this.n32=a.n32*d;this.n13=a.n13*b;this.n23=a.n23*b;this.n33=a.n33*b;return this},rotateByAxis:function(a,b){if(1===a.x&&0===a.y&&0===a.z)return this.rotateX(b);if(0===a.x&&1===a.y&&0===a.z)return this.rotateY(b);if(0===a.x&&0===a.y&&1===
a.z)return this.rotateZ(b);var c=a.x,d=a.y,e=a.z,f=Math.sqrt(c*c+d*d+e*e),c=c/f,d=d/f,e=e/f,f=c*c,g=d*d,h=e*e,i=Math.cos(b),l=Math.sin(b),k=1-i,n=c*d*k,q=c*e*k,k=d*e*k,c=c*l,o=d*l,l=e*l,e=f+(1-f)*i,f=n+l,d=q-o,n=n-l,g=g+(1-g)*i,l=k+c,q=q+o,k=k-c,h=h+(1-h)*i,i=this.n11,c=this.n21,o=this.n31,p=this.n41,m=this.n12,r=this.n22,s=this.n32,t=this.n42,u=this.n13,v=this.n23,x=this.n33,B=this.n43;this.n11=e*i+f*m+d*u;this.n21=e*c+f*r+d*v;this.n31=e*o+f*s+d*x;this.n41=e*p+f*t+d*B;this.n12=n*i+g*m+l*u;this.n22=
n*c+g*r+l*v;this.n32=n*o+g*s+l*x;this.n42=n*p+g*t+l*B;this.n13=q*i+k*m+h*u;this.n23=q*c+k*r+h*v;this.n33=q*o+k*s+h*x;this.n43=q*p+k*t+h*B;return this},rotateX:function(a){var b=this.n12,c=this.n22,d=this.n32,e=this.n42,f=this.n13,g=this.n23,h=this.n33,i=this.n43,l=Math.cos(a),a=Math.sin(a);this.n12=l*b+a*f;this.n22=l*c+a*g;this.n32=l*d+a*h;this.n42=l*e+a*i;this.n13=l*f-a*b;this.n23=l*g-a*c;this.n33=l*h-a*d;this.n43=l*i-a*e;return this},rotateY:function(a){var b=this.n11,c=this.n21,d=this.n31,e=this.n41,
f=this.n13,g=this.n23,h=this.n33,i=this.n43,l=Math.cos(a),a=Math.sin(a);this.n11=l*b-a*f;this.n21=l*c-a*g;this.n31=l*d-a*h;this.n41=l*e-a*i;this.n13=l*f+a*b;this.n23=l*g+a*c;this.n33=l*h+a*d;this.n43=l*i+a*e;return this},rotateZ:function(a){var b=this.n11,c=this.n21,d=this.n31,e=this.n41,f=this.n12,g=this.n22,h=this.n32,i=this.n42,l=Math.cos(a),a=Math.sin(a);this.n11=l*b+a*f;this.n21=l*c+a*g;this.n31=l*d+a*h;this.n41=l*e+a*i;this.n12=l*f-a*b;this.n22=l*g-a*c;this.n32=l*h-a*d;this.n42=l*i-a*e;return this},
translate:function(a){var b=a.x,c=a.y,a=a.z;this.n14=this.n11*b+this.n12*c+this.n13*a+this.n14;this.n24=this.n21*b+this.n22*c+this.n23*a+this.n24;this.n34=this.n31*b+this.n32*c+this.n33*a+this.n34;this.n44=this.n41*b+this.n42*c+this.n43*a+this.n44;return this}};
THREE.Matrix4.makeInvert3x3=function(a){var b=a.m33,c=b.m,d=a.n33*a.n22-a.n32*a.n23,e=-a.n33*a.n21+a.n31*a.n23,f=a.n32*a.n21-a.n31*a.n22,g=-a.n33*a.n12+a.n32*a.n13,h=a.n33*a.n11-a.n31*a.n13,i=-a.n32*a.n11+a.n31*a.n12,l=a.n23*a.n12-a.n22*a.n13,k=-a.n23*a.n11+a.n21*a.n13,n=a.n22*a.n11-a.n21*a.n12,a=a.n11*d+a.n21*g+a.n31*l;if(0===a)return null;a=1/a;c[0]=a*d;c[1]=a*e;c[2]=a*f;c[3]=a*g;c[4]=a*h;c[5]=a*i;c[6]=a*l;c[7]=a*k;c[8]=a*n;return b};
THREE.Matrix4.makeFrustum=function(a,b,c,d,e,f){var g;g=new THREE.Matrix4;g.n11=2*e/(b-a);g.n12=0;g.n13=(b+a)/(b-a);g.n14=0;g.n21=0;g.n22=2*e/(d-c);g.n23=(d+c)/(d-c);g.n24=0;g.n31=0;g.n32=0;g.n33=-(f+e)/(f-e);g.n34=-2*f*e/(f-e);g.n41=0;g.n42=0;g.n43=-1;g.n44=0;return g};THREE.Matrix4.makePerspective=function(a,b,c,d){var e,a=c*Math.tan(a*Math.PI/360);e=-a;return THREE.Matrix4.makeFrustum(e*b,a*b,e,a,c,d)};
THREE.Matrix4.makeOrtho=function(a,b,c,d,e,f){var g,h,i,l;g=new THREE.Matrix4;h=b-a;i=c-d;l=f-e;g.n11=2/h;g.n12=0;g.n13=0;g.n14=-((b+a)/h);g.n21=0;g.n22=2/i;g.n23=0;g.n24=-((c+d)/i);g.n31=0;g.n32=0;g.n33=-2/l;g.n34=-((f+e)/l);g.n41=0;g.n42=0;g.n43=0;g.n44=1;return g};THREE.Matrix4.__v1=new THREE.Vector3;THREE.Matrix4.__v2=new THREE.Vector3;THREE.Matrix4.__v3=new THREE.Vector3;THREE.Matrix4.__m1=new THREE.Matrix4;THREE.Matrix4.__m2=new THREE.Matrix4;
THREE.Object3D=function(){this.name="";this.id=THREE.Object3DCount++;this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.eulerOrder="XYZ";this.scale=new THREE.Vector3(1,1,1);this.flipSided=this.doubleSided=this.dynamic=!1;this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixRotationWorld=new THREE.Matrix4;this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=
!0;this.quaternion=new THREE.Quaternion;this.useQuaternion=!1;this.boundRadius=0;this.boundRadiusScale=1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this._vector=new THREE.Vector3};
THREE.Object3D.prototype={constructor:THREE.Object3D,translate:function(a,b){this.matrix.rotateAxis(b);this.position.addSelf(b.multiplyScalar(a))},translateX:function(a){this.translate(a,this._vector.set(1,0,0))},translateY:function(a){this.translate(a,this._vector.set(0,1,0))},translateZ:function(a){this.translate(a,this._vector.set(0,0,1))},lookAt:function(a){this.matrix.lookAt(a,this.position,this.up);this.rotationAutoUpdate&&this.rotation.setRotationFromMatrix(this.matrix)},add:function(a){if(-1===
this.children.indexOf(a)){void 0!==a.parent&&a.parent.remove(a);a.parent=this;this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.removeObject(a)}},getChildByName:function(a,b){var c,d,e;for(c=0,d=this.children.length;c<d;c++){e=this.children[c];if(e.name===
a||b&&(e=e.getChildByName(a,b),void 0!==e))return e}},updateMatrix:function(){this.matrix.setPosition(this.position);this.useQuaternion?this.matrix.setRotationFromQuaternion(this.quaternion):this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder);if(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,Math.max(this.scale.y,this.scale.z));this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){this.matrixAutoUpdate&&
this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)}};THREE.Object3DCount=0;
THREE.Projector=function(){function a(){var a=g[f]=g[f]||new THREE.RenderableObject;f++;return a}function b(){var a=l[i]=l[i]||new THREE.RenderableVertex;i++;return a}function c(a,b){return b.z-a.z}function d(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,g=-a.z+a.w,h=-b.z+b.w;if(0<=e&&0<=f&&0<=g&&0<=h)return!0;if(0>e&&0>f||0>g&&0>h)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>g?c=Math.max(c,g/(g-h)):0>h&&(d=Math.min(d,g/(g-h)));if(d<c)return!1;a.lerpSelf(b,c);b.lerpSelf(a,1-d);return!0}
var e,f,g=[],h,i,l=[],k,n,q=[],o,p=[],m,r,s=[],t,u,v=[],x={objects:[],sprites:[],lights:[],elements:[]},B=new THREE.Vector3,D=new THREE.Vector4,C=new THREE.Matrix4,A=new THREE.Matrix4,H=new THREE.Frustum,I=new THREE.Vector4,N=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);C.multiply(b.projectionMatrix,b.matrixWorldInverse);C.multiplyVector3(a);return a};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);C.multiply(b.matrixWorld,
b.projectionMatrixInverse);C.multiplyVector3(a);return a};this.pickingRay=function(a,b){var c;a.z=-1;c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.subSelf(a).normalize();return new THREE.Ray(a,c)};this.projectGraph=function(b,d){f=0;x.objects.length=0;x.sprites.length=0;x.lights.length=0;var g=function(b){if(!1!==b.visible){(b instanceof THREE.Mesh||b instanceof THREE.Line)&&(!1===b.frustumCulled||H.contains(b))?(C.multiplyVector3(B.copy(b.position)),e=a(),e.object=
b,e.z=B.z,x.objects.push(e)):b instanceof THREE.Sprite||b instanceof THREE.Particle?(C.multiplyVector3(B.copy(b.position)),e=a(),e.object=b,e.z=B.z,x.sprites.push(e)):b instanceof THREE.Light&&x.lights.push(b);for(var c=0,d=b.children.length;c<d;c++)g(b.children[c])}};g(b);d&&x.objects.sort(c);return x};this.projectScene=function(a,e,f){var g=e.near,G=e.far,j,B,y,E,S,T,R,ka,ga,V,ba,ca,da,ha,Qa,la;u=r=o=n=0;x.elements.length=0;void 0===e.parent&&(console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it..."),
a.add(e));a.updateMatrixWorld();e.matrixWorldInverse.getInverse(e.matrixWorld);C.multiply(e.projectionMatrix,e.matrixWorldInverse);H.setFromMatrix(C);x=this.projectGraph(a,!1);for(a=0,j=x.objects.length;a<j;a++)if(ga=x.objects[a].object,V=ga.matrixWorld,ca=ga.material,i=0,ga instanceof THREE.Mesh){ba=ga.geometry;da=ga.geometry.materials;E=ba.vertices;ha=ba.faces;Qa=ba.faceVertexUvs;ba=ga.matrixRotationWorld.extractRotation(V);for(B=0,y=E.length;B<y;B++)h=b(),h.positionWorld.copy(E[B].position),V.multiplyVector3(h.positionWorld),
h.positionScreen.copy(h.positionWorld),C.multiplyVector4(h.positionScreen),h.positionScreen.x/=h.positionScreen.w,h.positionScreen.y/=h.positionScreen.w,h.visible=h.positionScreen.z>g&&h.positionScreen.z<G;for(E=0,B=ha.length;E<B;E++){y=ha[E];if(y instanceof THREE.Face3)if(S=l[y.a],T=l[y.b],R=l[y.c],S.visible&&T.visible&&R.visible&&(ga.doubleSided||ga.flipSided!=0>(R.positionScreen.x-S.positionScreen.x)*(T.positionScreen.y-S.positionScreen.y)-(R.positionScreen.y-S.positionScreen.y)*(T.positionScreen.x-
S.positionScreen.x)))ka=q[n]=q[n]||new THREE.RenderableFace3,n++,k=ka,k.v1.copy(S),k.v2.copy(T),k.v3.copy(R);else continue;else if(y instanceof THREE.Face4)if(S=l[y.a],T=l[y.b],R=l[y.c],ka=l[y.d],S.visible&&T.visible&&R.visible&&ka.visible&&(ga.doubleSided||ga.flipSided!=(0>(ka.positionScreen.x-S.positionScreen.x)*(T.positionScreen.y-S.positionScreen.y)-(ka.positionScreen.y-S.positionScreen.y)*(T.positionScreen.x-S.positionScreen.x)||0>(T.positionScreen.x-R.positionScreen.x)*(ka.positionScreen.y-
R.positionScreen.y)-(T.positionScreen.y-R.positionScreen.y)*(ka.positionScreen.x-R.positionScreen.x))))la=p[o]=p[o]||new THREE.RenderableFace4,o++,k=la,k.v1.copy(S),k.v2.copy(T),k.v3.copy(R),k.v4.copy(ka);else continue;k.normalWorld.copy(y.normal);ba.multiplyVector3(k.normalWorld);k.centroidWorld.copy(y.centroid);V.multiplyVector3(k.centroidWorld);k.centroidScreen.copy(k.centroidWorld);C.multiplyVector3(k.centroidScreen);R=y.vertexNormals;for(S=0,T=R.length;S<T;S++)ka=k.vertexNormalsWorld[S],ka.copy(R[S]),
ba.multiplyVector3(ka);for(S=0,T=Qa.length;S<T;S++)if(la=Qa[S][E])for(R=0,ka=la.length;R<ka;R++)k.uvs[S][R]=la[R];k.material=ca;k.faceMaterial=null!==y.materialIndex?da[y.materialIndex]:null;k.z=k.centroidScreen.z;x.elements.push(k)}}else if(ga instanceof THREE.Line){A.multiply(C,V);E=ga.geometry.vertices;S=b();S.positionScreen.copy(E[0].position);A.multiplyVector4(S.positionScreen);for(B=1,y=E.length;B<y;B++)if(S=b(),S.positionScreen.copy(E[B].position),A.multiplyVector4(S.positionScreen),T=l[i-
2],I.copy(S.positionScreen),N.copy(T.positionScreen),d(I,N))I.multiplyScalar(1/I.w),N.multiplyScalar(1/N.w),ga=s[r]=s[r]||new THREE.RenderableLine,r++,m=ga,m.v1.positionScreen.copy(I),m.v2.positionScreen.copy(N),m.z=Math.max(I.z,N.z),m.material=ca,x.elements.push(m)}for(a=0,j=x.sprites.length;a<j;a++)if(ga=x.sprites[a].object,V=ga.matrixWorld,ga instanceof THREE.Particle&&(D.set(V.n14,V.n24,V.n34,1),C.multiplyVector4(D),D.z/=D.w,0<D.z&&1>D.z))g=v[u]=v[u]||new THREE.RenderableParticle,u++,t=g,t.x=
D.x/D.w,t.y=D.y/D.w,t.z=D.z,t.rotation=ga.rotation.z,t.scale.x=ga.scale.x*Math.abs(t.x-(D.x+e.projectionMatrix.n11)/(D.w+e.projectionMatrix.n14)),t.scale.y=ga.scale.y*Math.abs(t.y-(D.y+e.projectionMatrix.n22)/(D.w+e.projectionMatrix.n24)),t.material=ga.material,x.elements.push(t);f&&x.elements.sort(c);return x}};THREE.Quaternion=function(a,b,c,d){this.set(a||0,b||0,c||0,void 0!==d?d:1)};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w;return this},setFromEuler:function(a){var b=Math.PI/360,c=a.x*b,d=a.y*b,e=a.z*b,a=Math.cos(d),d=Math.sin(d),b=Math.cos(-e),e=Math.sin(-e),f=Math.cos(c),c=Math.sin(c),g=a*b,h=d*e;this.w=g*f-h*c;this.x=g*c+h*f;this.y=d*b*f+a*e*c;this.z=a*e*f-d*b*c;return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);
this.x=a.x*d;this.y=a.y*d;this.z=a.z*d;this.w=Math.cos(c);return this},setFromRotationMatrix:function(a){var b=Math.pow(a.determinant(),1/3);this.w=Math.sqrt(Math.max(0,b+a.n11+a.n22+a.n33))/2;this.x=Math.sqrt(Math.max(0,b+a.n11-a.n22-a.n33))/2;this.y=Math.sqrt(Math.max(0,b-a.n11+a.n22-a.n33))/2;this.z=Math.sqrt(Math.max(0,b-a.n11-a.n22+a.n33))/2;this.x=0>a.n32-a.n23?-Math.abs(this.x):Math.abs(this.x);this.y=0>a.n13-a.n31?-Math.abs(this.y):Math.abs(this.y);this.z=0>a.n21-a.n12?-Math.abs(this.z):Math.abs(this.z);
this.normalize();return this},calculateW:function(){this.w=-Math.sqrt(Math.abs(1-this.x*this.x-this.y*this.y-this.z*this.z));return this},inverse:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var a=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);0===a?this.w=this.z=this.y=this.x=0:(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a);return this},multiplySelf:function(a){var b=
this.x,c=this.y,d=this.z,e=this.w,f=a.x,g=a.y,h=a.z,a=a.w;this.x=b*a+e*f+c*h-d*g;this.y=c*a+e*g+d*f-b*h;this.z=d*a+e*h+b*g-c*f;this.w=e*a-b*f-c*g-d*h;return this},multiply:function(a,b){this.x=a.x*b.w+a.y*b.z-a.z*b.y+a.w*b.x;this.y=-a.x*b.z+a.y*b.w+a.z*b.x+a.w*b.y;this.z=a.x*b.y-a.y*b.x+a.z*b.w+a.w*b.z;this.w=-a.x*b.x-a.y*b.y-a.z*b.z+a.w*b.w;return this},multiplyVector3:function(a,b){b||(b=a);var c=a.x,d=a.y,e=a.z,f=this.x,g=this.y,h=this.z,i=this.w,l=i*c+g*e-h*d,k=i*d+h*c-f*e,n=i*e+f*d-g*c,c=-f*
c-g*d-h*e;b.x=l*i+c*-f+k*-h-n*-g;b.y=k*i+c*-g+n*-f-l*-h;b.z=n*i+c*-h+l*-g-k*-f;return b}};
THREE.Quaternion.slerp=function(a,b,c,d){var e=a.w*b.w+a.x*b.x+a.y*b.y+a.z*b.z;0>e?(c.w=-b.w,c.x=-b.x,c.y=-b.y,c.z=-b.z,e=-e):c.copy(b);if(1<=Math.abs(e))return c.w=a.w,c.x=a.x,c.y=a.y,c.z=a.z,c;var f=Math.acos(e),e=Math.sqrt(1-e*e);if(0.001>Math.abs(e))return c.w=0.5*(a.w+b.w),c.x=0.5*(a.x+b.x),c.y=0.5*(a.y+b.y),c.z=0.5*(a.z+b.z),c;b=Math.sin((1-d)*f)/e;d=Math.sin(d*f)/e;c.w=a.w*b+c.w*d;c.x=a.x*b+c.x*d;c.y=a.y*b+c.y*d;c.z=a.z*b+c.z*d;return c};THREE.Vertex=function(a){this.position=a||new THREE.Vector3};
THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=f;this.centroid=new THREE.Vector3};
THREE.Face4=function(a,b,c,d,e,f,g){this.a=a;this.b=b;this.c=c;this.d=d;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.color=f instanceof THREE.Color?f:new THREE.Color;this.vertexColors=f instanceof Array?f:[];this.vertexTangents=[];this.materialIndex=g;this.centroid=new THREE.Vector3};THREE.UV=function(a,b){this.u=a||0;this.v=b||0};
THREE.UV.prototype={constructor:THREE.UV,set:function(a,b){this.u=a;this.v=b;return this},copy:function(a){this.u=a.u;this.v=a.v;return this},clone:function(){return new THREE.UV(this.u,this.v)}};
THREE.Geometry=function(){this.id=THREE.GeometryCount++;this.vertices=[];this.colors=[];this.materials=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.dynamic=this.hasTangents=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){var b=new THREE.Matrix4;b.extractRotation(a,new THREE.Vector3(1,1,1));for(var c=0,d=this.vertices.length;c<d;c++)a.multiplyVector3(this.vertices[c].position);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];b.multiplyVector3(e.normal);for(var f=0,g=e.vertexNormals.length;f<g;f++)b.multiplyVector3(e.vertexNormals[f]);a.multiplyVector3(e.centroid)}},computeCentroids:function(){var a,b,c;for(a=0,b=this.faces.length;a<
b;a++)c=this.faces[a],c.centroid.set(0,0,0),c instanceof THREE.Face3?(c.centroid.addSelf(this.vertices[c.a].position),c.centroid.addSelf(this.vertices[c.b].position),c.centroid.addSelf(this.vertices[c.c].position),c.centroid.divideScalar(3)):c instanceof THREE.Face4&&(c.centroid.addSelf(this.vertices[c.a].position),c.centroid.addSelf(this.vertices[c.b].position),c.centroid.addSelf(this.vertices[c.c].position),c.centroid.addSelf(this.vertices[c.d].position),c.centroid.divideScalar(4))},computeFaceNormals:function(){var a,
b,c,d,e,f,g=new THREE.Vector3,h=new THREE.Vector3;for(a=0,b=this.faces.length;a<b;a++)c=this.faces[a],d=this.vertices[c.a],e=this.vertices[c.b],f=this.vertices[c.c],g.sub(f.position,e.position),h.sub(d.position,e.position),g.crossSelf(h),g.isZero()||g.normalize(),c.normal.copy(g)},computeVertexNormals:function(){var a,b,c,d;if(void 0===this.__tmpVertices){d=this.__tmpVertices=Array(this.vertices.length);for(a=0,b=this.vertices.length;a<b;a++)d[a]=new THREE.Vector3;for(a=0,b=this.faces.length;a<b;a++)if(c=
this.faces[a],c instanceof THREE.Face3)c.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];else if(c instanceof THREE.Face4)c.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]}else{d=this.__tmpVertices;for(a=0,b=this.vertices.length;a<b;a++)d[a].set(0,0,0)}for(a=0,b=this.faces.length;a<b;a++)c=this.faces[a],c instanceof THREE.Face3?(d[c.a].addSelf(c.normal),d[c.b].addSelf(c.normal),d[c.c].addSelf(c.normal)):c instanceof THREE.Face4&&(d[c.a].addSelf(c.normal),
d[c.b].addSelf(c.normal),d[c.c].addSelf(c.normal),d[c.d].addSelf(c.normal));for(a=0,b=this.vertices.length;a<b;a++)d[a].normalize();for(a=0,b=this.faces.length;a<b;a++)c=this.faces[a],c instanceof THREE.Face3?(c.vertexNormals[0].copy(d[c.a]),c.vertexNormals[1].copy(d[c.b]),c.vertexNormals[2].copy(d[c.c])):c instanceof THREE.Face4&&(c.vertexNormals[0].copy(d[c.a]),c.vertexNormals[1].copy(d[c.b]),c.vertexNormals[2].copy(d[c.c]),c.vertexNormals[3].copy(d[c.d]))},computeTangents:function(){function a(a,
b,c,d,e,f,T){h=a.vertices[b].position;i=a.vertices[c].position;l=a.vertices[d].position;k=g[e];n=g[f];q=g[T];o=i.x-h.x;p=l.x-h.x;m=i.y-h.y;r=l.y-h.y;s=i.z-h.z;t=l.z-h.z;u=n.u-k.u;v=q.u-k.u;x=n.v-k.v;B=q.v-k.v;D=1/(u*B-v*x);I.set((B*o-x*p)*D,(B*m-x*r)*D,(B*s-x*t)*D);N.set((u*p-v*o)*D,(u*r-v*m)*D,(u*t-v*s)*D);A[b].addSelf(I);A[c].addSelf(I);A[d].addSelf(I);H[b].addSelf(N);H[c].addSelf(N);H[d].addSelf(N)}var b,c,d,e,f,g,h,i,l,k,n,q,o,p,m,r,s,t,u,v,x,B,D,C,A=[],H=[],I=new THREE.Vector3,N=new THREE.Vector3,
$=new THREE.Vector3,K=new THREE.Vector3,Q=new THREE.Vector3;for(b=0,c=this.vertices.length;b<c;b++)A[b]=new THREE.Vector3,H[b]=new THREE.Vector3;for(b=0,c=this.faces.length;b<c;b++)f=this.faces[b],g=this.faceVertexUvs[0][b],f instanceof THREE.Face3?a(this,f.a,f.b,f.c,0,1,2):f instanceof THREE.Face4&&(a(this,f.a,f.b,f.c,0,1,2),a(this,f.a,f.b,f.d,0,1,3));var L=["a","b","c","d"];for(b=0,c=this.faces.length;b<c;b++){f=this.faces[b];for(d=0;d<f.vertexNormals.length;d++)Q.copy(f.vertexNormals[d]),e=f[L[d]],
C=A[e],$.copy(C),$.subSelf(Q.multiplyScalar(Q.dot(C))).normalize(),K.cross(f.vertexNormals[d],C),e=K.dot(H[e]),e=0>e?-1:1,f.vertexTangents[d]=new THREE.Vector4($.x,$.y,$.z,e)}this.hasTangents=!0},computeBoundingBox:function(){if(0<this.vertices.length){var a;a=this.vertices[0].position;this.boundingBox?(this.boundingBox.min.copy(a),this.boundingBox.max.copy(a)):this.boundingBox={min:a.clone(),max:a.clone()};for(var b=this.boundingBox.min,c=this.boundingBox.max,d=1,e=this.vertices.length;d<e;d++){a=
this.vertices[d].position;if(a.x<b.x)b.x=a.x;else if(a.x>c.x)c.x=a.x;if(a.y<b.y)b.y=a.y;else if(a.y>c.y)c.y=a.y;if(a.z<b.z)b.z=a.z;else if(a.z>c.z)c.z=a.z}}},computeBoundingSphere:function(){for(var a,b=0,c=0,d=this.vertices.length;c<d;c++)a=this.vertices[c].position.length(),a>b&&(b=a);this.boundingSphere={radius:b}},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;for(f=0,g=this.vertices.length;f<g;f++)d=this.vertices[f].position,d=[Math.round(d.x*e),Math.round(d.y*e),Math.round(d.z*
e)].join("_"),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];for(f=0,g=this.faces.length;f<g;f++)if(a=this.faces[f],a instanceof THREE.Face3)a.a=c[a.a],a.b=c[a.b],a.c=c[a.c];else if(a instanceof THREE.Face4)a.a=c[a.a],a.b=c[a.b],a.c=c[a.c],a.d=c[a.d];this.vertices=b}};THREE.GeometryCount=0;
THREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,i,l,k,n,q;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?f:f+1;c[3]=f>this.points.length-3?f:f+2;l=this.points[c[0]];k=this.points[c[1]];
n=this.points[c[2]];q=this.points[c[3]];h=g*g;i=g*h;d.x=b(l.x,k.x,n.x,q.x,g,h,i);d.y=b(l.y,k.y,n.y,q.y,g,h,i);d.z=b(l.z,k.z,n.z,q.z,g,h,i);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],i=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=a/c,d=this.getPoint(b),g.copy(d),i+=g.distanceTo(f),
f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(h[b]=i,e=b);h[h.length]=i;return{chunks:h,total:i}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],i=new THREE.Vector3,l=this.getLength();h.push(i.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=l.chunks[b]-l.chunks[b-1];g=Math.ceil(a*c/l.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+c*(1/g)*(f-e),d=this.getPoint(d),h.push(i.copy(d).clone());h.push(i.copy(this.points[b]).clone())}this.points=
h}};THREE.Edge=function(a,b,c,d){this.vertices=[a,b];this.vertexIndices=[c,d];this.faces=[];this.faceIndices=[]};THREE.Camera=function(){if(arguments.length)return console.warn("DEPRECATED: Camera() is now PerspectiveCamera() or OrthographicCamera()."),new THREE.PerspectiveCamera(arguments[0],arguments[1],arguments[2],arguments[3]);THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};
THREE.Camera.prototype=new THREE.Object3D;THREE.Camera.prototype.constructor=THREE.Camera;THREE.Camera.prototype.lookAt=function(a){this.matrix.lookAt(this.position,a,this.up);this.rotationAutoUpdate&&this.rotation.setRotationFromMatrix(this.matrix)};THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=new THREE.Camera;
THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera;THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix=THREE.Matrix4.makeOrtho(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=new THREE.Camera;
THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera;THREE.PerspectiveCamera.prototype.setLens=function(a,b){this.fov=2*Math.atan((void 0!==b?b:43.25)/(2*a));this.fov*=180/Math.PI;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(this.fov*Math.PI/360)*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix=THREE.Matrix4.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix=THREE.Matrix4.makePerspective(this.fov,this.aspect,this.near,
this.far)};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=new THREE.Object3D;THREE.Light.prototype.constructor=THREE.Light;THREE.Light.prototype.supr=THREE.Object3D.prototype;THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=new THREE.Light;THREE.AmbientLight.prototype.constructor=THREE.AmbientLight;
THREE.DirectionalLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.onlyShadow=this.castShadow=!1;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=
this.shadowMap=null};THREE.DirectionalLight.prototype=new THREE.Light;THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight;THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,0,0);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=new THREE.Light;THREE.PointLight.prototype.constructor=THREE.PointLight;
THREE.SpotLight=function(a,b,c,d){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.castShadow=void 0!==d?d:!1;this.onlyShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};
THREE.SpotLight.prototype=new THREE.Light;THREE.SpotLight.prototype.constructor=THREE.SpotLight;
THREE.Material=function(a){a=a||{};this.name="";this.id=THREE.MaterialCount++;this.opacity=void 0!==a.opacity?a.opacity:1;this.transparent=void 0!==a.transparent?a.transparent:!1;this.blending=void 0!==a.blending?a.blending:THREE.NormalBlending;this.depthTest=void 0!==a.depthTest?a.depthTest:!0;this.depthWrite=void 0!==a.depthWrite?a.depthWrite:!0;this.polygonOffset=void 0!==a.polygonOffset?a.polygonOffset:!1;this.polygonOffsetFactor=void 0!==a.polygonOffsetFactor?a.polygonOffsetFactor:0;this.polygonOffsetUnits=
void 0!==a.polygonOffsetUnits?a.polygonOffsetUnits:0;this.alphaTest=void 0!==a.alphaTest?a.alphaTest:0;this.overdraw=void 0!==a.overdraw?a.overdraw:!1};THREE.MaterialCount=0;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NormalBlending=0;THREE.AdditiveBlending=1;THREE.SubtractiveBlending=2;THREE.MultiplyBlending=3;THREE.AdditiveAlphaBlending=4;
THREE.LineBasicMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.linewidth=void 0!==a.linewidth?a.linewidth:1;this.linecap=void 0!==a.linecap?a.linecap:"round";this.linejoin=void 0!==a.linejoin?a.linejoin:"round";this.vertexColors=a.vertexColors?a.vertexColors:!1;this.fog=void 0!==a.fog?a.fog:!0};THREE.LineBasicMaterial.prototype=new THREE.Material;THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:null;this.lightMap=void 0!==a.lightMap?a.lightMap:null;this.envMap=void 0!==a.envMap?a.envMap:null;this.combine=void 0!==a.combine?a.combine:THREE.MultiplyOperation;this.reflectivity=void 0!==a.reflectivity?a.reflectivity:1;this.refractionRatio=void 0!==a.refractionRatio?a.refractionRatio:0.98;this.fog=void 0!==a.fog?a.fog:
!0;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.wireframeLinecap=void 0!==a.wireframeLinecap?a.wireframeLinecap:"round";this.wireframeLinejoin=void 0!==a.wireframeLinejoin?a.wireframeLinejoin:"round";this.vertexColors=void 0!==a.vertexColors?a.vertexColors:!1;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:
!1};THREE.MeshBasicMaterial.prototype=new THREE.Material;THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.ambient=void 0!==a.ambient?new THREE.Color(a.ambient):new THREE.Color(328965);this.wrapAround=void 0!==a.wrapAround?a.wrapAround:!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.map=void 0!==a.map?a.map:null;this.lightMap=void 0!==a.lightMap?a.lightMap:null;this.envMap=void 0!==a.envMap?a.envMap:null;this.combine=void 0!==a.combine?a.combine:THREE.MultiplyOperation;
this.reflectivity=void 0!==a.reflectivity?a.reflectivity:1;this.refractionRatio=void 0!==a.refractionRatio?a.refractionRatio:0.98;this.fog=void 0!==a.fog?a.fog:!0;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.wireframeLinecap=void 0!==a.wireframeLinecap?a.wireframeLinecap:"round";this.wireframeLinejoin=void 0!==a.wireframeLinejoin?a.wireframeLinejoin:
"round";this.vertexColors=void 0!==a.vertexColors?a.vertexColors:!1;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:!1};THREE.MeshLambertMaterial.prototype=new THREE.Material;THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial;
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.ambient=void 0!==a.ambient?new THREE.Color(a.ambient):new THREE.Color(328965);this.specular=void 0!==a.specular?new THREE.Color(a.specular):new THREE.Color(1118481);this.shininess=void 0!==a.shininess?a.shininess:30;this.metal=void 0!==a.metal?a.metal:!1;this.perPixel=void 0!==a.perPixel?a.perPixel:!1;this.wrapAround=void 0!==a.wrapAround?a.wrapAround:
!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.map=void 0!==a.map?a.map:null;this.lightMap=void 0!==a.lightMap?a.lightMap:null;this.envMap=void 0!==a.envMap?a.envMap:null;this.combine=void 0!==a.combine?a.combine:THREE.MultiplyOperation;this.reflectivity=void 0!==a.reflectivity?a.reflectivity:1;this.refractionRatio=void 0!==a.refractionRatio?a.refractionRatio:0.98;this.fog=void 0!==a.fog?a.fog:!0;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:
!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.wireframeLinecap=void 0!==a.wireframeLinecap?a.wireframeLinecap:"round";this.wireframeLinejoin=void 0!==a.wireframeLinejoin?a.wireframeLinejoin:"round";this.vertexColors=void 0!==a.vertexColors?a.vertexColors:!1;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:!1};THREE.MeshPhongMaterial.prototype=new THREE.Material;
THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;THREE.MeshDepthMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1};THREE.MeshDepthMaterial.prototype=new THREE.Material;THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;
THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.shading=a.shading?a.shading:THREE.FlatShading;this.wireframe=a.wireframe?a.wireframe:!1;this.wireframeLinewidth=a.wireframeLinewidth?a.wireframeLinewidth:1};THREE.MeshNormalMaterial.prototype=new THREE.Material;THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;THREE.MeshFaceMaterial=function(){};
THREE.MeshShaderMaterial=function(a){console.warn("DEPRECATED: MeshShaderMaterial() is now ShaderMaterial().");return new THREE.ShaderMaterial(a)};
THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:null;this.size=void 0!==a.size?a.size:1;this.sizeAttenuation=void 0!==a.sizeAttenuation?a.sizeAttenuation:!0;this.vertexColors=void 0!==a.vertexColors?a.vertexColors:!1;this.fog=void 0!==a.fog?a.fog:!0};THREE.ParticleBasicMaterial.prototype=new THREE.Material;THREE.ParticleBasicMaterial.prototype.constructor=THREE.ParticleBasicMaterial;
THREE.ParticleCanvasMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.program=void 0!==a.program?a.program:function(){}};THREE.ParticleCanvasMaterial.prototype=new THREE.Material;THREE.ParticleCanvasMaterial.prototype.constructor=THREE.ParticleCanvasMaterial;THREE.ParticleDOMMaterial=function(a){THREE.Material.call(this);this.domElement=a};
THREE.ShaderMaterial=function(a){THREE.Material.call(this,a);a=a||{};this.fragmentShader=void 0!==a.fragmentShader?a.fragmentShader:"void main() {}";this.vertexShader=void 0!==a.vertexShader?a.vertexShader:"void main() {}";this.uniforms=void 0!==a.uniforms?a.uniforms:{};this.attributes=a.attributes;this.shading=void 0!==a.shading?a.shading:THREE.SmoothShading;this.wireframe=void 0!==a.wireframe?a.wireframe:!1;this.wireframeLinewidth=void 0!==a.wireframeLinewidth?a.wireframeLinewidth:1;this.fog=void 0!==
a.fog?a.fog:!1;this.lights=void 0!==a.lights?a.lights:!1;this.vertexColors=void 0!==a.vertexColors?a.vertexColors:!1;this.skinning=void 0!==a.skinning?a.skinning:!1;this.morphTargets=void 0!==a.morphTargets?a.morphTargets:!1};THREE.ShaderMaterial.prototype=new THREE.Material;THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;
THREE.Texture=function(a,b,c,d,e,f,g,h){this.id=THREE.TextureCount++;this.image=a;this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=
!0;this.needsUpdate=!1;this.onUpdate=null};THREE.Texture.prototype={constructor:THREE.Texture,clone:function(){var a=new THREE.Texture(this.image,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter,this.format,this.type);a.offset.copy(this.offset);a.repeat.copy(this.repeat);return a}};THREE.TextureCount=0;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.LatitudeReflectionMapping=function(){};
THREE.LatitudeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.UVMapping=function(){};THREE.RepeatWrapping=0;THREE.ClampToEdgeWrapping=1;THREE.MirroredRepeatWrapping=2;THREE.NearestFilter=3;THREE.NearestMipMapNearestFilter=4;THREE.NearestMipMapLinearFilter=5;THREE.LinearFilter=6;THREE.LinearMipMapNearestFilter=7;THREE.LinearMipMapLinearFilter=8;THREE.ByteType=9;THREE.UnsignedByteType=10;THREE.ShortType=11;
THREE.UnsignedShortType=12;THREE.IntType=13;THREE.UnsignedIntType=14;THREE.FloatType=15;THREE.AlphaFormat=16;THREE.RGBFormat=17;THREE.RGBAFormat=18;THREE.LuminanceFormat=19;THREE.LuminanceAlphaFormat=20;THREE.DataTexture=function(a,b,c,d,e,f,g,h,i,l){THREE.Texture.call(this,null,f,g,h,i,l,d,e);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=new THREE.Texture;THREE.DataTexture.prototype.constructor=THREE.DataTexture;
THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture(this.image.data,this.image.width,this.image.height,this.format,this.type,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter);a.offset.copy(this.offset);a.repeat.copy(this.repeat);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=new THREE.Object3D;THREE.Particle.prototype.constructor=THREE.Particle;
THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b;this.sortParticles=!1;if(this.geometry)this.geometry.boundingSphere||this.geometry.computeBoundingSphere(),this.boundRadius=a.boundingSphere.radius;this.frustumCulled=!1};THREE.ParticleSystem.prototype=new THREE.Object3D;THREE.ParticleSystem.prototype.constructor=THREE.ParticleSystem;
THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=a;this.material=b;this.type=void 0!==c?c:THREE.LineStrip;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=new THREE.Object3D;THREE.Line.prototype.constructor=THREE.Line;
THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b;if(b instanceof Array)console.warn("DEPRECATED: Mesh material can no longer be an Array. Using material at index 0..."),this.material=b[0];if(this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere(),this.boundRadius=a.boundingSphere.radius,this.geometry.morphTargets.length)){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};
for(var c=0;c<this.geometry.morphTargets.length;c++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[c].name]=c}};THREE.Mesh.prototype=new THREE.Object3D;THREE.Mesh.prototype.constructor=THREE.Mesh;THREE.Mesh.prototype.supr=THREE.Object3D.prototype;
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=new THREE.Object3D;THREE.Bone.prototype.constructor=THREE.Bone;THREE.Bone.prototype.supr=THREE.Object3D.prototype;
THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiply(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};
THREE.SkinnedMesh=function(a,b){THREE.Mesh.call(this,a,b);this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var c,d,e,f,g,h;if(void 0!==this.geometry.bones){for(c=0;c<this.geometry.bones.length;c++)e=this.geometry.bones[c],f=e.pos,g=e.rotq,h=e.scl,d=this.addBone(),d.name=e.name,d.position.set(f[0],f[1],f[2]),d.quaternion.set(g[0],g[1],g[2],g[3]),d.useQuaternion=!0,void 0!==h?d.scale.set(h[0],h[1],h[2]):d.scale.set(1,1,1);for(c=0;c<this.bones.length;c++)e=this.geometry.bones[c],
d=this.bones[c],-1===e.parent?this.add(d):this.bones[e.parent].add(d);this.boneMatrices=new Float32Array(16*this.bones.length);this.pose()}};THREE.SkinnedMesh.prototype=new THREE.Mesh;THREE.SkinnedMesh.prototype.constructor=THREE.SkinnedMesh;THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var a=0,b=this.children.length;a<b;a++){var c=this.children[a];c instanceof THREE.Bone?c.update(this.identityMatrix,!1):c.updateMatrixWorld(!0)}for(var b=this.bones.length,c=this.bones,d=this.boneMatrices,a=0;a<b;a++)c[a].skinMatrix.flattenToArrayOffset(d,
16*a)};
THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);for(var a,b=[],c=0;c<this.bones.length;c++){a=this.bones[c];var d=new THREE.Matrix4;d.getInverse(a.skinMatrix);b.push(d);a.skinMatrix.flattenToArrayOffset(this.boneMatrices,16*c)}if(void 0===this.geometry.skinVerticesA){this.geometry.skinVerticesA=[];this.geometry.skinVerticesB=[];for(a=0;a<this.geometry.skinIndices.length;a++){var c=this.geometry.vertices[a].position,e=this.geometry.skinIndices[a].x,f=this.geometry.skinIndices[a].y,d=
new THREE.Vector3(c.x,c.y,c.z);this.geometry.skinVerticesA.push(b[e].multiplyVector3(d));d=new THREE.Vector3(c.x,c.y,c.z);this.geometry.skinVerticesB.push(b[f].multiplyVector3(d));1!==this.geometry.skinWeights[a].x+this.geometry.skinWeights[a].y&&(c=0.5*(1-(this.geometry.skinWeights[a].x+this.geometry.skinWeights[a].y)),this.geometry.skinWeights[a].x+=c,this.geometry.skinWeights[a].y+=c)}}};
THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype=new THREE.Mesh;THREE.MorphAnimMesh.prototype.constructor=THREE.MorphAnimMesh;
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/(this.geometry.morphTargets.length-1);this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time){this.direction*=-1;if(this.time>this.duration)this.time=this.duration,this.directionBackwards=!0;if(0>this.time)this.time=0,this.directionBackwards=!1}}else this.time%=this.duration;a=THREE.Math.clamp(Math.floor(this.time/b),0,this.geometry.morphTargets.length-1);if(a!=this.currentKeyframe)this.morphTargetInfluences[this.lastKeyframe]=
0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a;b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=new THREE.Object3D;THREE.Ribbon.prototype.constructor=THREE.Ribbon;
THREE.LOD=function(){THREE.Object3D.call(this);this.LODs=[]};THREE.LOD.prototype=new THREE.Object3D;THREE.LOD.prototype.constructor=THREE.LOD;THREE.LOD.prototype.supr=THREE.Object3D.prototype;THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);for(var b=Math.abs(b),c=0;c<this.LODs.length&&!(b<this.LODs[c].visibleAtDistance);c++);this.LODs.splice(c,0,{visibleAtDistance:b,object3D:a});this.add(a)};
THREE.LOD.prototype.update=function(a){if(1<this.LODs.length){a.matrixWorldInverse.getInverse(a.matrixWorld);a=a.matrixWorldInverse;a=-(a.n31*this.position.x+a.n32*this.position.y+a.n33*this.position.z+a.n34);this.LODs[0].object3D.visible=!0;for(var b=1;b<this.LODs.length;b++)if(a>=this.LODs[b].visibleAtDistance)this.LODs[b-1].object3D.visible=!1,this.LODs[b].object3D.visible=!0;else break;for(;b<this.LODs.length;b++)this.LODs[b].object3D.visible=!1}};
THREE.Sprite=function(a){THREE.Object3D.call(this);this.color=void 0!==a.color?new THREE.Color(a.color):new THREE.Color(16777215);this.map=void 0!==a.map?a.map:new THREE.Texture;this.blending=void 0!==a.blending?a.blending:THREE.NormalBlending;this.useScreenCoordinates=void 0!==a.useScreenCoordinates?a.useScreenCoordinates:!0;this.mergeWith3D=void 0!==a.mergeWith3D?a.mergeWith3D:!this.useScreenCoordinates;this.affectedByDistance=void 0!==a.affectedByDistance?a.affectedByDistance:!this.useScreenCoordinates;
this.scaleByViewport=void 0!==a.scaleByViewport?a.scaleByViewport:!this.affectedByDistance;this.alignment=a.alignment instanceof THREE.Vector2?a.alignment:THREE.SpriteAlignment.center;this.rotation3d=this.rotation;this.rotation=0;this.opacity=1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1)};THREE.Sprite.prototype=new THREE.Object3D;THREE.Sprite.prototype.constructor=THREE.Sprite;
THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);if(1!==this.scale.x||1!==this.scale.y)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,this.scale.y);this.matrixWorldNeedsUpdate=!0};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);
THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);
THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.objects=[];this.lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=new THREE.Object3D;THREE.Scene.prototype.constructor=THREE.Scene;
THREE.Scene.prototype.addObject=function(a){if(a instanceof THREE.Light)-1===this.lights.indexOf(a)&&this.lights.push(a);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.objects.indexOf(a)){this.objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.addObject(a.children[b])};
THREE.Scene.prototype.removeObject=function(a){if(a instanceof THREE.Light){var b=this.lights.indexOf(a);-1!==b&&this.lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.objects.indexOf(a),-1!==b&&(this.objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.removeObject(a.children[b])};
THREE.Fog=function(a,b,c){this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.FogExp2=function(a,b){this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};
THREE.DOMRenderer=function(){var a=null,b=new THREE.Projector,c,d,e,f;this.domElement=document.createElement("div");this.setSize=function(a,b){c=a;d=b;e=c/2;f=d/2};this.render=function(c,d){var i,l,k,n,q,o,p,m;a=b.projectScene(c,d);for(i=0,l=a.length;i<l;i++)if(q=a[i],q instanceof THREE.RenderableParticle){p=q.x*e+e;m=q.y*f+f;for(k=0,n=q.material.length;k<n;k++)if(o=q.material[k],o instanceof THREE.ParticleDOMMaterial)o=o.domElement,o.style.left=p+"px",o.style.top=m+"px"}}};
THREE.CanvasRenderer=function(a){function b(a){if(t!=a)m.globalAlpha=t=a}function c(a){if(u!=a){switch(a){case THREE.NormalBlending:m.globalCompositeOperation="source-over";break;case THREE.AdditiveBlending:m.globalCompositeOperation="lighter";break;case THREE.SubtractiveBlending:m.globalCompositeOperation="darker"}u=a}}function d(a){if(v!=a)m.strokeStyle=v=a}function e(a){if(x!=a)m.fillStyle=x=a}var a=a||{},f=this,g,h,i,l=new THREE.Projector,k=void 0!==a.canvas?a.canvas:document.createElement("canvas"),
n,q,o,p,m=k.getContext("2d"),r=new THREE.Color(0),s=0,t=1,u=0,v=null,x=null,B=null,D=null,C=null,A,H,I,N,$=new THREE.RenderableVertex,K=new THREE.RenderableVertex,Q,L,G,j,W,y,E,S,T,R,ka,ga,V=new THREE.Color,ba=new THREE.Color,ca=new THREE.Color,da=new THREE.Color,ha=new THREE.Color,Qa=[],la=[],za,Aa,Ja,Da,$a,Ta,ib,db,Wa,Xa,ra=new THREE.Rectangle,Ba=new THREE.Rectangle,ja=new THREE.Rectangle,ab=!1,aa=new THREE.Color,P=new THREE.Color,O=new THREE.Color,Ea=new THREE.Vector3,gc,hc,Kc,eb,ic,uc,a=16;gc=
document.createElement("canvas");gc.width=gc.height=2;hc=gc.getContext("2d");hc.fillStyle="rgba(0,0,0,1)";hc.fillRect(0,0,2,2);Kc=hc.getImageData(0,0,2,2);eb=Kc.data;ic=document.createElement("canvas");ic.width=ic.height=a;uc=ic.getContext("2d");uc.translate(-a/2,-a/2);uc.scale(a,a);a--;this.domElement=k;this.sortElements=this.sortObjects=this.autoClear=!0;this.info={render:{vertices:0,faces:0}};this.setSize=function(a,b){n=a;q=b;o=Math.floor(n/2);p=Math.floor(q/2);k.width=n;k.height=q;ra.set(-o,
-p,o,p);Ba.set(-o,-p,o,p);t=1;u=0;C=D=B=x=v=null};this.setClearColor=function(a,b){r.copy(a);s=b;Ba.set(-o,-p,o,p)};this.setClearColorHex=function(a,b){r.setHex(a);s=b;Ba.set(-o,-p,o,p)};this.clear=function(){m.setTransform(1,0,0,-1,o,p);Ba.isEmpty()||(Ba.minSelf(ra),Ba.inflate(2),1>s&&m.clearRect(Math.floor(Ba.getX()),Math.floor(Ba.getY()),Math.floor(Ba.getWidth()),Math.floor(Ba.getHeight())),0<s&&(c(THREE.NormalBlending),b(1),e("rgba("+Math.floor(255*r.r)+","+Math.floor(255*r.g)+","+Math.floor(255*
r.b)+","+s+")"),m.fillRect(Math.floor(Ba.getX()),Math.floor(Ba.getY()),Math.floor(Ba.getWidth()),Math.floor(Ba.getHeight()))),Ba.empty())};this.render=function(a,k){function q(a){var b,c,d,e;aa.setRGB(0,0,0);P.setRGB(0,0,0);O.setRGB(0,0,0);for(b=0,c=a.length;b<c;b++)d=a[b],e=d.color,d instanceof THREE.AmbientLight?(aa.r+=e.r,aa.g+=e.g,aa.b+=e.b):d instanceof THREE.DirectionalLight?(P.r+=e.r,P.g+=e.g,P.b+=e.b):d instanceof THREE.PointLight&&(O.r+=e.r,O.g+=e.g,O.b+=e.b)}function n(a,b,c,d){var e,f,
g,aa,j,h;for(e=0,f=a.length;e<f;e++)g=a[e],aa=g.color,g instanceof THREE.DirectionalLight?(j=g.matrixWorld.getPosition(),h=c.dot(j),0>=h||(h*=g.intensity,d.r+=aa.r*h,d.g+=aa.g*h,d.b+=aa.b*h)):g instanceof THREE.PointLight&&(j=g.matrixWorld.getPosition(),h=c.dot(Ea.sub(j,b).normalize()),0>=h||(h*=0==g.distance?1:1-Math.min(b.distanceTo(j)/g.distance,1),0!=h&&(h*=g.intensity,d.r+=aa.r*h,d.g+=aa.g*h,d.b+=aa.b*h)))}function r(a,f,g){b(g.opacity);c(g.blending);var aa,j,h,i,l,k;if(g instanceof THREE.ParticleBasicMaterial){if(g.map)i=
g.map.image,l=i.width>>1,k=i.height>>1,g=f.scale.x*o,h=f.scale.y*p,aa=g*l,j=h*k,ja.set(a.x-aa,a.y-j,a.x+aa,a.y+j),ra.intersects(ja)&&(m.save(),m.translate(a.x,a.y),m.rotate(-f.rotation),m.scale(g,-h),m.translate(-l,-k),m.drawImage(i,0,0),m.restore())}else g instanceof THREE.ParticleCanvasMaterial&&(aa=f.scale.x*o,j=f.scale.y*p,ja.set(a.x-aa,a.y-j,a.x+aa,a.y+j),ra.intersects(ja)&&(d(g.color.getContextStyle()),e(g.color.getContextStyle()),m.save(),m.translate(a.x,a.y),m.rotate(-f.rotation),m.scale(aa,
j),g.program(m),m.restore()))}function s(a,e,f,g){b(g.opacity);c(g.blending);m.beginPath();m.moveTo(a.positionScreen.x,a.positionScreen.y);m.lineTo(e.positionScreen.x,e.positionScreen.y);m.closePath();if(g instanceof THREE.LineBasicMaterial){a=g.linewidth;if(B!=a)m.lineWidth=B=a;a=g.linecap;if(D!=a)m.lineCap=D=a;a=g.linejoin;if(C!=a)m.lineJoin=C=a;d(g.color.getContextStyle());m.stroke();ja.inflate(2*g.linewidth)}}function t(a,d,e,g,h,l,P,O){f.info.render.vertices+=3;f.info.render.faces++;b(O.opacity);
c(O.blending);Q=a.positionScreen.x;L=a.positionScreen.y;G=d.positionScreen.x;j=d.positionScreen.y;W=e.positionScreen.x;y=e.positionScreen.y;v(Q,L,G,j,W,y);if(O instanceof THREE.MeshBasicMaterial)if(O.map)O.map.mapping instanceof THREE.UVMapping&&(Da=P.uvs[0],Lc(Q,L,G,j,W,y,Da[g].u,Da[g].v,Da[h].u,Da[h].v,Da[l].u,Da[l].v,O.map));else if(O.envMap){if(O.envMap.mapping instanceof THREE.SphericalReflectionMapping)a=k.matrixWorldInverse,Ea.copy(P.vertexNormalsWorld[g]),$a=0.5*(Ea.x*a.n11+Ea.y*a.n12+Ea.z*
a.n13)+0.5,Ta=0.5*-(Ea.x*a.n21+Ea.y*a.n22+Ea.z*a.n23)+0.5,Ea.copy(P.vertexNormalsWorld[h]),ib=0.5*(Ea.x*a.n11+Ea.y*a.n12+Ea.z*a.n13)+0.5,db=0.5*-(Ea.x*a.n21+Ea.y*a.n22+Ea.z*a.n23)+0.5,Ea.copy(P.vertexNormalsWorld[l]),Wa=0.5*(Ea.x*a.n11+Ea.y*a.n12+Ea.z*a.n13)+0.5,Xa=0.5*-(Ea.x*a.n21+Ea.y*a.n22+Ea.z*a.n23)+0.5,Lc(Q,L,G,j,W,y,$a,Ta,ib,db,Wa,Xa,O.envMap)}else O.wireframe?Fb(O.color,O.wireframeLinewidth,O.wireframeLinecap,O.wireframeLinejoin):Ab(O.color);else if(O instanceof THREE.MeshLambertMaterial)O.map&&
!O.wireframe&&(O.map.mapping instanceof THREE.UVMapping&&(Da=P.uvs[0],Lc(Q,L,G,j,W,y,Da[g].u,Da[g].v,Da[h].u,Da[h].v,Da[l].u,Da[l].v,O.map)),c(THREE.SubtractiveBlending)),ab?!O.wireframe&&O.shading==THREE.SmoothShading&&3==P.vertexNormalsWorld.length?(ba.r=ca.r=da.r=aa.r,ba.g=ca.g=da.g=aa.g,ba.b=ca.b=da.b=aa.b,n(i,P.v1.positionWorld,P.vertexNormalsWorld[0],ba),n(i,P.v2.positionWorld,P.vertexNormalsWorld[1],ca),n(i,P.v3.positionWorld,P.vertexNormalsWorld[2],da),ba.r=Math.max(0,Math.min(O.color.r*ba.r,
1)),ba.g=Math.max(0,Math.min(O.color.g*ba.g,1)),ba.b=Math.max(0,Math.min(O.color.b*ba.b,1)),ca.r=Math.max(0,Math.min(O.color.r*ca.r,1)),ca.g=Math.max(0,Math.min(O.color.g*ca.g,1)),ca.b=Math.max(0,Math.min(O.color.b*ca.b,1)),da.r=Math.max(0,Math.min(O.color.r*da.r,1)),da.g=Math.max(0,Math.min(O.color.g*da.g,1)),da.b=Math.max(0,Math.min(O.color.b*da.b,1)),ha.r=0.5*(ca.r+da.r),ha.g=0.5*(ca.g+da.g),ha.b=0.5*(ca.b+da.b),Ja=vc(ba,ca,da,ha),Yb(Q,L,G,j,W,y,0,0,1,0,0,1,Ja)):(V.r=aa.r,V.g=aa.g,V.b=aa.b,n(i,
P.centroidWorld,P.normalWorld,V),V.r=Math.max(0,Math.min(O.color.r*V.r,1)),V.g=Math.max(0,Math.min(O.color.g*V.g,1)),V.b=Math.max(0,Math.min(O.color.b*V.b,1)),O.wireframe?Fb(V,O.wireframeLinewidth,O.wireframeLinecap,O.wireframeLinejoin):Ab(V)):O.wireframe?Fb(O.color,O.wireframeLinewidth,O.wireframeLinecap,O.wireframeLinejoin):Ab(O.color);else if(O instanceof THREE.MeshDepthMaterial)za=k.near,Aa=k.far,ba.r=ba.g=ba.b=1-Tb(a.positionScreen.z,za,Aa),ca.r=ca.g=ca.b=1-Tb(d.positionScreen.z,za,Aa),da.r=
da.g=da.b=1-Tb(e.positionScreen.z,za,Aa),ha.r=0.5*(ca.r+da.r),ha.g=0.5*(ca.g+da.g),ha.b=0.5*(ca.b+da.b),Ja=vc(ba,ca,da,ha),Yb(Q,L,G,j,W,y,0,0,1,0,0,1,Ja);else if(O instanceof THREE.MeshNormalMaterial)V.r=Zb(P.normalWorld.x),V.g=Zb(P.normalWorld.y),V.b=Zb(P.normalWorld.z),O.wireframe?Fb(V,O.wireframeLinewidth,O.wireframeLinecap,O.wireframeLinejoin):Ab(V)}function u(a,d,e,g,h,O,l,P,m){f.info.render.vertices+=4;f.info.render.faces++;b(P.opacity);c(P.blending);if(P.map||P.envMap)t(a,d,g,0,1,3,l,P,m),
t(h,e,O,1,2,3,l,P,m);else if(Q=a.positionScreen.x,L=a.positionScreen.y,G=d.positionScreen.x,j=d.positionScreen.y,W=e.positionScreen.x,y=e.positionScreen.y,E=g.positionScreen.x,S=g.positionScreen.y,T=h.positionScreen.x,R=h.positionScreen.y,ka=O.positionScreen.x,ga=O.positionScreen.y,P instanceof THREE.MeshBasicMaterial)x(Q,L,G,j,W,y,E,S),P.wireframe?Fb(P.color,P.wireframeLinewidth,P.wireframeLinecap,P.wireframeLinejoin):Ab(P.color);else if(P instanceof THREE.MeshLambertMaterial)ab?!P.wireframe&&P.shading==
THREE.SmoothShading&&4==l.vertexNormalsWorld.length?(ba.r=ca.r=da.r=ha.r=aa.r,ba.g=ca.g=da.g=ha.g=aa.g,ba.b=ca.b=da.b=ha.b=aa.b,n(i,l.v1.positionWorld,l.vertexNormalsWorld[0],ba),n(i,l.v2.positionWorld,l.vertexNormalsWorld[1],ca),n(i,l.v4.positionWorld,l.vertexNormalsWorld[3],da),n(i,l.v3.positionWorld,l.vertexNormalsWorld[2],ha),ba.r=Math.max(0,Math.min(P.color.r*ba.r,1)),ba.g=Math.max(0,Math.min(P.color.g*ba.g,1)),ba.b=Math.max(0,Math.min(P.color.b*ba.b,1)),ca.r=Math.max(0,Math.min(P.color.r*ca.r,
1)),ca.g=Math.max(0,Math.min(P.color.g*ca.g,1)),ca.b=Math.max(0,Math.min(P.color.b*ca.b,1)),da.r=Math.max(0,Math.min(P.color.r*da.r,1)),da.g=Math.max(0,Math.min(P.color.g*da.g,1)),da.b=Math.max(0,Math.min(P.color.b*da.b,1)),ha.r=Math.max(0,Math.min(P.color.r*ha.r,1)),ha.g=Math.max(0,Math.min(P.color.g*ha.g,1)),ha.b=Math.max(0,Math.min(P.color.b*ha.b,1)),Ja=vc(ba,ca,da,ha),v(Q,L,G,j,E,S),Yb(Q,L,G,j,E,S,0,0,1,0,0,1,Ja),v(T,R,W,y,ka,ga),Yb(T,R,W,y,ka,ga,1,0,1,1,0,1,Ja)):(V.r=aa.r,V.g=aa.g,V.b=aa.b,n(i,
l.centroidWorld,l.normalWorld,V),V.r=Math.max(0,Math.min(P.color.r*V.r,1)),V.g=Math.max(0,Math.min(P.color.g*V.g,1)),V.b=Math.max(0,Math.min(P.color.b*V.b,1)),x(Q,L,G,j,W,y,E,S),P.wireframe?Fb(V,P.wireframeLinewidth,P.wireframeLinecap,P.wireframeLinejoin):Ab(V)):(x(Q,L,G,j,W,y,E,S),P.wireframe?Fb(P.color,P.wireframeLinewidth,P.wireframeLinecap,P.wireframeLinejoin):Ab(P.color));else if(P instanceof THREE.MeshNormalMaterial)V.r=Zb(l.normalWorld.x),V.g=Zb(l.normalWorld.y),V.b=Zb(l.normalWorld.z),x(Q,
L,G,j,W,y,E,S),P.wireframe?Fb(V,P.wireframeLinewidth,P.wireframeLinecap,P.wireframeLinejoin):Ab(V);else if(P instanceof THREE.MeshDepthMaterial)za=k.near,Aa=k.far,ba.r=ba.g=ba.b=1-Tb(a.positionScreen.z,za,Aa),ca.r=ca.g=ca.b=1-Tb(d.positionScreen.z,za,Aa),da.r=da.g=da.b=1-Tb(g.positionScreen.z,za,Aa),ha.r=ha.g=ha.b=1-Tb(e.positionScreen.z,za,Aa),Ja=vc(ba,ca,da,ha),v(Q,L,G,j,E,S),Yb(Q,L,G,j,E,S,0,0,1,0,0,1,Ja),v(T,R,W,y,ka,ga),Yb(T,R,W,y,ka,ga,1,0,1,1,0,1,Ja)}function v(a,b,c,d,e,f){m.beginPath();m.moveTo(a,
b);m.lineTo(c,d);m.lineTo(e,f);m.lineTo(a,b);m.closePath()}function x(a,b,c,d,e,f,g,aa){m.beginPath();m.moveTo(a,b);m.lineTo(c,d);m.lineTo(e,f);m.lineTo(g,aa);m.lineTo(a,b);m.closePath()}function Fb(a,b,c,e){if(B!=b)m.lineWidth=B=b;if(D!=c)m.lineCap=D=c;if(C!=e)m.lineJoin=C=e;d(a.getContextStyle());m.stroke();ja.inflate(2*b)}function Ab(a){e(a.getContextStyle());m.fill()}function Lc(a,b,c,d,f,g,aa,j,h,P,i,l,O){if(0!=O.image.width){if(!0==O.needsUpdate||void 0==Qa[O.id]){var k=O.wrapS==THREE.RepeatWrapping,
n=O.wrapT==THREE.RepeatWrapping;Qa[O.id]=m.createPattern(O.image,k&&n?"repeat":k&&!n?"repeat-x":!k&&n?"repeat-y":"no-repeat");O.needsUpdate=!1}e(Qa[O.id]);var k=O.offset.x/O.repeat.x,n=O.offset.y/O.repeat.y,q=O.image.width*O.repeat.x,Ea=O.image.height*O.repeat.y,aa=(aa+k)*q,j=(j+n)*Ea,c=c-a,d=d-b,f=f-a,g=g-b,h=(h+k)*q-aa,P=(P+n)*Ea-j,i=(i+k)*q-aa,l=(l+n)*Ea-j,k=h*l-i*P;if(0==k){if(void 0===la[O.id])b=document.createElement("canvas"),b.width=O.image.width,b.height=O.image.height,b=b.getContext("2d"),
b.drawImage(O.image,0,0),la[O.id]=b.getImageData(0,0,O.image.width,O.image.height).data;b=la[O.id];aa=4*(Math.floor(aa)+Math.floor(j)*O.image.width);V.setRGB(b[aa]/255,b[aa+1]/255,b[aa+2]/255);Ab(V)}else k=1/k,O=(l*c-P*f)*k,P=(l*d-P*g)*k,c=(h*f-i*c)*k,d=(h*g-i*d)*k,a=a-O*aa-c*j,aa=b-P*aa-d*j,m.save(),m.transform(O,P,c,d,a,aa),m.fill(),m.restore()}}function Yb(a,b,c,d,e,f,g,aa,j,h,P,i,O){var l,k;l=O.width-1;k=O.height-1;g*=l;aa*=k;c-=a;d-=b;e-=a;f-=b;j=j*l-g;h=h*k-aa;P=P*l-g;i=i*k-aa;k=1/(j*i-P*h);
l=(i*c-h*e)*k;h=(i*d-h*f)*k;c=(j*e-P*c)*k;d=(j*f-P*d)*k;a=a-l*g-c*aa;b=b-h*g-d*aa;m.save();m.transform(l,h,c,d,a,b);m.clip();m.drawImage(O,0,0);m.restore()}function vc(a,b,c,d){var e=~~(255*a.r),f=~~(255*a.g),a=~~(255*a.b),g=~~(255*b.r),aa=~~(255*b.g),b=~~(255*b.b),j=~~(255*c.r),h=~~(255*c.g),c=~~(255*c.b),P=~~(255*d.r),i=~~(255*d.g),d=~~(255*d.b);eb[0]=0>e?0:255<e?255:e;eb[1]=0>f?0:255<f?255:f;eb[2]=0>a?0:255<a?255:a;eb[4]=0>g?0:255<g?255:g;eb[5]=0>aa?0:255<aa?255:aa;eb[6]=0>b?0:255<b?255:b;eb[8]=
0>j?0:255<j?255:j;eb[9]=0>h?0:255<h?255:h;eb[10]=0>c?0:255<c?255:c;eb[12]=0>P?0:255<P?255:P;eb[13]=0>i?0:255<i?255:i;eb[14]=0>d?0:255<d?255:d;hc.putImageData(Kc,0,0);uc.drawImage(gc,0,0);return ic}function Tb(a,b,c){a=(a-b)/(c-b);return a*a*(3-2*a)}function Zb(a){a=0.5*(a+1);return 0>a?0:1<a?1:a}function Gb(a,b){var c=b.x-a.x,d=b.y-a.y,e=c*c+d*d;0!=e&&(e=1/Math.sqrt(e),c*=e,d*=e,b.x+=c,b.y+=d,a.x-=c,a.y-=d)}var wc,Vc,Na,jb;this.autoClear?this.clear():m.setTransform(1,0,0,-1,o,p);f.info.render.vertices=
0;f.info.render.faces=0;g=l.projectScene(a,k,this.sortElements);h=g.elements;i=g.lights;(ab=0<i.length)&&q(i);for(wc=0,Vc=h.length;wc<Vc;wc++)if(Na=h[wc],jb=Na.material,jb=jb instanceof THREE.MeshFaceMaterial?Na.faceMaterial:jb,!(null==jb||0==jb.opacity)){ja.empty();if(Na instanceof THREE.RenderableParticle)A=Na,A.x*=o,A.y*=p,r(A,Na,jb,a);else if(Na instanceof THREE.RenderableLine)A=Na.v1,H=Na.v2,A.positionScreen.x*=o,A.positionScreen.y*=p,H.positionScreen.x*=o,H.positionScreen.y*=p,ja.addPoint(A.positionScreen.x,
A.positionScreen.y),ja.addPoint(H.positionScreen.x,H.positionScreen.y),ra.intersects(ja)&&s(A,H,Na,jb,a);else if(Na instanceof THREE.RenderableFace3)A=Na.v1,H=Na.v2,I=Na.v3,A.positionScreen.x*=o,A.positionScreen.y*=p,H.positionScreen.x*=o,H.positionScreen.y*=p,I.positionScreen.x*=o,I.positionScreen.y*=p,jb.overdraw&&(Gb(A.positionScreen,H.positionScreen),Gb(H.positionScreen,I.positionScreen),Gb(I.positionScreen,A.positionScreen)),ja.add3Points(A.positionScreen.x,A.positionScreen.y,H.positionScreen.x,
H.positionScreen.y,I.positionScreen.x,I.positionScreen.y),ra.intersects(ja)&&t(A,H,I,0,1,2,Na,jb,a);else if(Na instanceof THREE.RenderableFace4)A=Na.v1,H=Na.v2,I=Na.v3,N=Na.v4,A.positionScreen.x*=o,A.positionScreen.y*=p,H.positionScreen.x*=o,H.positionScreen.y*=p,I.positionScreen.x*=o,I.positionScreen.y*=p,N.positionScreen.x*=o,N.positionScreen.y*=p,$.positionScreen.copy(H.positionScreen),K.positionScreen.copy(N.positionScreen),jb.overdraw&&(Gb(A.positionScreen,H.positionScreen),Gb(H.positionScreen,
N.positionScreen),Gb(N.positionScreen,A.positionScreen),Gb(I.positionScreen,$.positionScreen),Gb(I.positionScreen,K.positionScreen)),ja.addPoint(A.positionScreen.x,A.positionScreen.y),ja.addPoint(H.positionScreen.x,H.positionScreen.y),ja.addPoint(I.positionScreen.x,I.positionScreen.y),ja.addPoint(N.positionScreen.x,N.positionScreen.y),ra.intersects(ja)&&u(A,H,I,N,$,K,Na,jb,a);Ba.addRectangle(ja)}m.setTransform(1,0,0,1,0,0)}};
THREE.SVGRenderer=function(){function a(a,b,c,d){var e,f,g,h,i,l;for(e=0,f=a.length;e<f;e++)g=a[e],h=g.color,g instanceof THREE.DirectionalLight?(i=g.matrixWorld.getPosition(),l=c.dot(i),0>=l||(l*=g.intensity,d.r+=h.r*l,d.g+=h.g*l,d.b+=h.b*l)):g instanceof THREE.PointLight&&(i=g.matrixWorld.getPosition(),l=c.dot(A.sub(i,b).normalize()),0>=l||(l*=0==g.distance?1:1-Math.min(b.distanceTo(i)/g.distance,1),0!=l&&(l*=g.intensity,d.r+=h.r*l,d.g+=h.g*l,d.b+=h.b*l)))}function b(a){null==H[a]&&(H[a]=document.createElementNS("http://www.w3.org/2000/svg",
"path"),0==Q&&H[a].setAttribute("shape-rendering","crispEdges"));return H[a]}function c(a){a=0.5*(a+1);return 0>a?0:1<a?1:a}var d=this,e,f,g,h=new THREE.Projector,i=document.createElementNS("http://www.w3.org/2000/svg","svg"),l,k,n,q,o,p,m,r,s=new THREE.Rectangle,t=new THREE.Rectangle,u=!1,v=new THREE.Color,x=new THREE.Color,B=new THREE.Color,D=new THREE.Color,C,A=new THREE.Vector3,H=[],I=[],N,$,K,Q=1;this.domElement=i;this.sortElements=this.sortObjects=this.autoClear=!0;this.info={render:{vertices:0,
faces:0}};this.setQuality=function(a){switch(a){case "high":Q=1;break;case "low":Q=0}};this.setSize=function(a,b){l=a;k=b;n=l/2;q=k/2;i.setAttribute("viewBox",-n+" "+-q+" "+l+" "+k);i.setAttribute("width",l);i.setAttribute("height",k);s.set(-n,-q,n,q)};this.clear=function(){for(;0<i.childNodes.length;)i.removeChild(i.childNodes[0])};this.render=function(l,k){var j,A,y,E;this.autoClear&&this.clear();d.info.render.vertices=0;d.info.render.faces=0;e=h.projectScene(l,k,this.sortElements);f=e.elements;
g=e.lights;K=$=0;if(u=0<g.length){x.setRGB(0,0,0);B.setRGB(0,0,0);D.setRGB(0,0,0);for(j=0,A=g.length;j<A;j++)E=g[j],y=E.color,E instanceof THREE.AmbientLight?(x.r+=y.r,x.g+=y.g,x.b+=y.b):E instanceof THREE.DirectionalLight?(B.r+=y.r,B.g+=y.g,B.b+=y.b):E instanceof THREE.PointLight&&(D.r+=y.r,D.g+=y.g,D.b+=y.b)}for(j=0,A=f.length;j<A;j++)if(y=f[j],E=y.material,E=E instanceof THREE.MeshFaceMaterial?y.faceMaterial:E,!(null==E||0==E.opacity))if(t.empty(),y instanceof THREE.RenderableParticle)o=y,o.x*=
n,o.y*=-q;else if(y instanceof THREE.RenderableLine){if(o=y.v1,p=y.v2,o.positionScreen.x*=n,o.positionScreen.y*=-q,p.positionScreen.x*=n,p.positionScreen.y*=-q,t.addPoint(o.positionScreen.x,o.positionScreen.y),t.addPoint(p.positionScreen.x,p.positionScreen.y),s.intersects(t)){y=o;var S=p,T=K++;null==I[T]&&(I[T]=document.createElementNS("http://www.w3.org/2000/svg","line"),0==Q&&I[T].setAttribute("shape-rendering","crispEdges"));N=I[T];N.setAttribute("x1",y.positionScreen.x);N.setAttribute("y1",y.positionScreen.y);
N.setAttribute("x2",S.positionScreen.x);N.setAttribute("y2",S.positionScreen.y);E instanceof THREE.LineBasicMaterial&&(N.setAttribute("style","fill: none; stroke: "+E.color.getContextStyle()+"; stroke-width: "+E.linewidth+"; stroke-opacity: "+E.opacity+"; stroke-linecap: "+E.linecap+"; stroke-linejoin: "+E.linejoin),i.appendChild(N))}}else if(y instanceof THREE.RenderableFace3){if(o=y.v1,p=y.v2,m=y.v3,o.positionScreen.x*=n,o.positionScreen.y*=-q,p.positionScreen.x*=n,p.positionScreen.y*=-q,m.positionScreen.x*=
n,m.positionScreen.y*=-q,t.addPoint(o.positionScreen.x,o.positionScreen.y),t.addPoint(p.positionScreen.x,p.positionScreen.y),t.addPoint(m.positionScreen.x,m.positionScreen.y),s.intersects(t)){var S=o,T=p,R=m;d.info.render.vertices+=3;d.info.render.faces++;N=b($++);N.setAttribute("d","M "+S.positionScreen.x+" "+S.positionScreen.y+" L "+T.positionScreen.x+" "+T.positionScreen.y+" L "+R.positionScreen.x+","+R.positionScreen.y+"z");E instanceof THREE.MeshBasicMaterial?v.copy(E.color):E instanceof THREE.MeshLambertMaterial?
u?(v.r=x.r,v.g=x.g,v.b=x.b,a(g,y.centroidWorld,y.normalWorld,v),v.r=Math.max(0,Math.min(E.color.r*v.r,1)),v.g=Math.max(0,Math.min(E.color.g*v.g,1)),v.b=Math.max(0,Math.min(E.color.b*v.b,1))):v.copy(E.color):E instanceof THREE.MeshDepthMaterial?(C=1-E.__2near/(E.__farPlusNear-y.z*E.__farMinusNear),v.setRGB(C,C,C)):E instanceof THREE.MeshNormalMaterial&&v.setRGB(c(y.normalWorld.x),c(y.normalWorld.y),c(y.normalWorld.z));E.wireframe?N.setAttribute("style","fill: none; stroke: "+v.getContextStyle()+"; stroke-width: "+
E.wireframeLinewidth+"; stroke-opacity: "+E.opacity+"; stroke-linecap: "+E.wireframeLinecap+"; stroke-linejoin: "+E.wireframeLinejoin):N.setAttribute("style","fill: "+v.getContextStyle()+"; fill-opacity: "+E.opacity);i.appendChild(N)}}else if(y instanceof THREE.RenderableFace4&&(o=y.v1,p=y.v2,m=y.v3,r=y.v4,o.positionScreen.x*=n,o.positionScreen.y*=-q,p.positionScreen.x*=n,p.positionScreen.y*=-q,m.positionScreen.x*=n,m.positionScreen.y*=-q,r.positionScreen.x*=n,r.positionScreen.y*=-q,t.addPoint(o.positionScreen.x,
o.positionScreen.y),t.addPoint(p.positionScreen.x,p.positionScreen.y),t.addPoint(m.positionScreen.x,m.positionScreen.y),t.addPoint(r.positionScreen.x,r.positionScreen.y),s.intersects(t))){var S=o,T=p,R=m,H=r;d.info.render.vertices+=4;d.info.render.faces++;N=b($++);N.setAttribute("d","M "+S.positionScreen.x+" "+S.positionScreen.y+" L "+T.positionScreen.x+" "+T.positionScreen.y+" L "+R.positionScreen.x+","+R.positionScreen.y+" L "+H.positionScreen.x+","+H.positionScreen.y+"z");E instanceof THREE.MeshBasicMaterial?
v.copy(E.color):E instanceof THREE.MeshLambertMaterial?u?(v.r=x.r,v.g=x.g,v.b=x.b,a(g,y.centroidWorld,y.normalWorld,v),v.r=Math.max(0,Math.min(E.color.r*v.r,1)),v.g=Math.max(0,Math.min(E.color.g*v.g,1)),v.b=Math.max(0,Math.min(E.color.b*v.b,1))):v.copy(E.color):E instanceof THREE.MeshDepthMaterial?(C=1-E.__2near/(E.__farPlusNear-y.z*E.__farMinusNear),v.setRGB(C,C,C)):E instanceof THREE.MeshNormalMaterial&&v.setRGB(c(y.normalWorld.x),c(y.normalWorld.y),c(y.normalWorld.z));E.wireframe?N.setAttribute("style",
"fill: none; stroke: "+v.getContextStyle()+"; stroke-width: "+E.wireframeLinewidth+"; stroke-opacity: "+E.opacity+"; stroke-linecap: "+E.wireframeLinecap+"; stroke-linejoin: "+E.wireframeLinejoin):N.setAttribute("style","fill: "+v.getContextStyle()+"; fill-opacity: "+E.opacity);i.appendChild(N)}}};
THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#endif",
envmap_fragment:"#ifdef USE_ENVMAP\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, reflectivity );\n} else {\ngl_FragColor.xyz = gl_FragColor.xyz * cubeColor.xyz;\n}\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif",
map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, gl_PointCoord );\n#endif",map_pars_vertex:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif",map_vertex:"#ifdef USE_MAP\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( map, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif\n#endif",
lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightWeighting = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( transformedNormal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( transformedNormal, dirVector ) + 0.5, 0.0 );\nvec3 directionalLightWeighting = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat directionalLightWeighting = max( dot( transformedNormal, dirVector ), 0.0 );\n#endif\nvLightWeighting += directionalLightColor[ i ] * directionalLightWeighting;\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#ifdef WRAP_AROUND\nfloat pointLightWeightingFull = max( dot( transformedNormal, lVector ), 0.0 );\nfloat pointLightWeightingHalf = max( 0.5 * dot( transformedNormal, lVector ) + 0.5, 0.0 );\nvec3 pointLightWeighting = mix( vec3 ( pointLightWeightingFull ), vec3( pointLightWeightingHalf ), wrapRGB );\n#else\nfloat pointLightWeighting = max( dot( transformedNormal, lVector ), 0.0 );\n#endif\nvLightWeighting += pointLightColor[ i ] * pointLightWeighting * lDistance;\n}\n#endif\nvLightWeighting = vLightWeighting * diffuse + ambient * ambientLightColor;",
lights_phong_pars_vertex:"#if MAX_POINT_LIGHTS > 0\n#ifndef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif",lights_phong_vertex:"#if MAX_POINT_LIGHTS > 0\n#ifndef PHONG_PER_PIXEL\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n#endif",skinning_vertex:"#ifdef USE_SKINNING\ngl_Position  = ( boneGlobalMatrices[ int( skinIndex.x ) ] * skinVertexA ) * skinWeight.x;\ngl_Position += ( boneGlobalMatrices[ int( skinIndex.y ) ] * skinVertexB ) * skinWeight.y;\ngl_Position  = projectionMatrix * viewMatrix * objectMatrix * gl_Position;\n#endif",
morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\nuniform float morphTargetInfluences[ 8 ];\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0, 0.0, 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\nmorphed += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );\n#endif",
default_vertex:"#ifndef USE_MORPHTARGETS\n#ifndef USE_SKINNING\ngl_Position = projectionMatrix * mvPosition;\n#endif\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",
shadowmap_fragment:"#ifdef USE_SHADOWMAP\nvec3 shadowColor = vec3( 1.0 );\nfloat fDepth;\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nif ( shadowCoord.z <= 1.0 ) {\nshadowCoord.z += shadowBias[ i ];\nbvec4 shadowTest = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nif ( all( shadowTest ) ) {\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n}\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n#ifdef USE_MORPHTARGETS\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( morphed, 1.0 );\n#else\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( position, 1.0 );\n#endif\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",
linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:0,texture:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:2,texture:null},envMap:{type:"t",value:1,texture:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},fog:{fogDensity:{type:"f",
value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",
value:1},map:{type:"t",value:0,texture:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:6,texture:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",
value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}",fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,
THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,
THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,
THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(328965)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["varying vec3 vLightWeighting;",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,
"vec3 transformedNormal = normalize( normalMatrix * normal );",THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightWeighting;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,
THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,"gl_FragColor.xyz = gl_FragColor.xyz * vLightWeighting;",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,
THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(328965)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["varying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,"#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = -mvPosition.xyz;\nvec3 transformedNormal = normalMatrix * normal;\nvNormal = transformedNormal;",
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,
THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,
THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",
THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};
THREE.WebGLRenderer=function(a){function b(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){if(void 0===a.__webglCustomAttributesList)a.__webglCustomAttributesList=[];for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var g=1;"v2"===f.type?g=2:"v3"===f.type?g=3:"v4"===f.type?g=4:"c"===f.type&&(g=3);f.size=g;f.array=new Float32Array(c*g);f.buffer=j.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}
function c(a,b){if(a.material&&!(a.material instanceof THREE.MeshFaceMaterial))return a.material;if(0<=b.materialIndex)return a.geometry.materials[b.materialIndex]}function d(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function e(a){return a.map||a.lightMap||a instanceof THREE.ShaderMaterial?!0:!1}function f(a,b,c){var d,e,f,g,h=a.vertices;g=h.length;
var i=a.colors,l=i.length,k=a.__vertexArray,n=a.__colorArray,m=a.__sortArray,q=a.__dirtyVertices,o=a.__dirtyColors,p=a.__webglCustomAttributesList;if(c.sortParticles){Wa.multiplySelf(c.matrixWorld);for(d=0;d<g;d++)e=h[d].position,Xa.copy(e),Wa.multiplyVector3(Xa),m[d]=[Xa.z,d];m.sort(function(a,b){return b[0]-a[0]});for(d=0;d<g;d++)e=h[m[d][1]].position,f=3*d,k[f]=e.x,k[f+1]=e.y,k[f+2]=e.z;for(d=0;d<l;d++)f=3*d,e=i[m[d][1]],n[f]=e.r,n[f+1]=e.g,n[f+2]=e.b;if(p)for(i=0,l=p.length;i<l;i++)if(h=p[i],
void 0===h.boundTo||"vertices"===h.boundTo)if(f=0,e=h.value.length,1===h.size)for(d=0;d<e;d++)g=m[d][1],h.array[d]=h.value[g];else if(2===h.size)for(d=0;d<e;d++)g=m[d][1],g=h.value[g],h.array[f]=g.x,h.array[f+1]=g.y,f+=2;else if(3===h.size)if("c"===h.type)for(d=0;d<e;d++)g=m[d][1],g=h.value[g],h.array[f]=g.r,h.array[f+1]=g.g,h.array[f+2]=g.b,f+=3;else for(d=0;d<e;d++)g=m[d][1],g=h.value[g],h.array[f]=g.x,h.array[f+1]=g.y,h.array[f+2]=g.z,f+=3;else if(4===h.size)for(d=0;d<e;d++)g=m[d][1],g=h.value[g],
h.array[f]=g.x,h.array[f+1]=g.y,h.array[f+2]=g.z,h.array[f+3]=g.w,f+=4}else{if(q)for(d=0;d<g;d++)e=h[d].position,f=3*d,k[f]=e.x,k[f+1]=e.y,k[f+2]=e.z;if(o)for(d=0;d<l;d++)e=i[d],f=3*d,n[f]=e.r,n[f+1]=e.g,n[f+2]=e.b;if(p)for(i=0,l=p.length;i<l;i++)if(h=p[i],h.needsUpdate&&(void 0===h.boundTo||"vertices"===h.boundTo))if(e=h.value.length,f=0,1===h.size)for(d=0;d<e;d++)h.array[d]=h.value[d];else if(2===h.size)for(d=0;d<e;d++)g=h.value[d],h.array[f]=g.x,h.array[f+1]=g.y,f+=2;else if(3===h.size)if("c"===
h.type)for(d=0;d<e;d++)g=h.value[d],h.array[f]=g.r,h.array[f+1]=g.g,h.array[f+2]=g.b,f+=3;else for(d=0;d<e;d++)g=h.value[d],h.array[f]=g.x,h.array[f+1]=g.y,h.array[f+2]=g.z,f+=3;else if(4===h.size)for(d=0;d<e;d++)g=h.value[d],h.array[f]=g.x,h.array[f+1]=g.y,h.array[f+2]=g.z,h.array[f+3]=g.w,f+=4}if(q||c.sortParticles)j.bindBuffer(j.ARRAY_BUFFER,a.__webglVertexBuffer),j.bufferData(j.ARRAY_BUFFER,k,b);if(o||c.sortParticles)j.bindBuffer(j.ARRAY_BUFFER,a.__webglColorBuffer),j.bufferData(j.ARRAY_BUFFER,
n,b);if(p)for(i=0,l=p.length;i<l;i++)if(h=p[i],h.needsUpdate||c.sortParticles)j.bindBuffer(j.ARRAY_BUFFER,h.buffer),j.bufferData(j.ARRAY_BUFFER,h.array,b)}function g(a,b){return b.z-a.z}function h(a,b,c){if(a.length)for(var d=0,e=a.length;d<e;d++)R=y=null,S=T=da=ca=ba=-1,a[d].render(b,c,Ta,ib),R=y=null,S=T=da=ca=ba=-1}function i(a,b,c,d,e,f,g,h){var j,i,l,k;b?(i=a.length-1,k=b=-1):(i=0,b=a.length,k=1);for(var n=i;n!==b;n+=k)if(j=a[n],j.render){i=j.object;l=j.buffer;if(h)j=h;else{j=j[c];if(!j)continue;
g&&G.setBlending(j.blending);G.setDepthTest(j.depthTest);G.setDepthWrite(j.depthWrite);s(j.polygonOffset,j.polygonOffsetFactor,j.polygonOffsetUnits)}G.setObjectFaces(i);l instanceof THREE.BufferGeometry?G.renderBufferDirect(d,e,f,j,l,i):G.renderBuffer(d,e,f,j,l,i)}}function l(a,b,c,d,e,f,g){for(var h,j,i=0,l=a.length;i<l;i++)if(h=a[i],j=h.object,j.visible){if(g)h=g;else{h=h[b];if(!h)continue;f&&G.setBlending(h.blending);G.setDepthTest(h.depthTest);G.setDepthWrite(h.depthWrite);s(h.polygonOffset,h.polygonOffsetFactor,
h.polygonOffsetUnits)}G.renderImmediateObject(c,d,e,h,j)}}function k(a,b,c){a.push({buffer:b,object:c,opaque:null,transparent:null})}function n(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function q(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function o(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function p(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function m(a,b,c,d,e){d.program||G.initMaterial(d,b,c,e);if(d.morphTargets&&
!e.__webglMorphTargetInfluences){e.__webglMorphTargetInfluences=new Float32Array(G.maxMorphTargets);for(var f=0,g=G.maxMorphTargets;f<g;f++)e.__webglMorphTargetInfluences[f]=0}var h=!1,f=d.program,g=f.uniforms,i=d.uniforms;f!==y&&(j.useProgram(f),y=f,h=!0);if(d.id!==S)S=d.id,h=!0;if(h||a!==R)j.uniformMatrix4fv(g.projectionMatrix,!1,a._projectionMatrixArray),a!==R&&(R=a);if(h){if(c&&d.fog)if(i.fogColor.value=c.color,c instanceof THREE.Fog)i.fogNear.value=c.near,i.fogFar.value=c.far;else if(c instanceof
THREE.FogExp2)i.fogDensity.value=c.density;if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){var l,k=0,n=0,m=0,q,o,p,r=Ba,s=r.directional.colors,t=r.directional.positions,E=r.point.colors,v=r.point.positions,x=r.point.distances,T=0,A=0,C=p=0;for(c=0,h=b.length;c<h;c++)if(l=b[c],!l.onlyShadow)if(q=l.color,o=l.intensity,p=l.distance,l instanceof THREE.AmbientLight)G.gammaInput?(k+=q.r*q.r,n+=q.g*q.g,m+=q.b*q.b):(k+=q.r,n+=q.g,m+=q.b);else if(l instanceof THREE.DirectionalLight)p=
3*T,G.gammaInput?(s[p]=q.r*q.r*o*o,s[p+1]=q.g*q.g*o*o,s[p+2]=q.b*q.b*o*o):(s[p]=q.r*o,s[p+1]=q.g*o,s[p+2]=q.b*o),ra.copy(l.matrixWorld.getPosition()),ra.subSelf(l.target.matrixWorld.getPosition()),ra.normalize(),t[p]=ra.x,t[p+1]=ra.y,t[p+2]=ra.z,T+=1;else if(l instanceof THREE.PointLight||l instanceof THREE.SpotLight)C=3*A,G.gammaInput?(E[C]=q.r*q.r*o*o,E[C+1]=q.g*q.g*o*o,E[C+2]=q.b*q.b*o*o):(E[C]=q.r*o,E[C+1]=q.g*o,E[C+2]=q.b*o),l=l.matrixWorld.getPosition(),v[C]=l.x,v[C+1]=l.y,v[C+2]=l.z,x[A]=p,
A+=1;for(c=3*T,h=s.length;c<h;c++)s[c]=0;for(c=3*A,h=E.length;c<h;c++)E[c]=0;r.point.length=A;r.directional.length=T;r.ambient[0]=k;r.ambient[1]=n;r.ambient[2]=m;c=Ba;i.ambientLightColor.value=c.ambient;i.directionalLightColor.value=c.directional.colors;i.directionalLightDirection.value=c.directional.positions;i.pointLightColor.value=c.point.colors;i.pointLightPosition.value=c.point.positions;i.pointLightDistance.value=c.point.distances}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||
d instanceof THREE.MeshPhongMaterial)i.opacity.value=d.opacity,G.gammaInput?i.diffuse.value.copyGammaToLinear(d.color):i.diffuse.value=d.color,(i.map.texture=d.map)&&i.offsetRepeat.value.set(d.map.offset.x,d.map.offset.y,d.map.repeat.x,d.map.repeat.y),i.lightMap.texture=d.lightMap,i.envMap.texture=d.envMap,i.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,i.reflectivity.value=d.reflectivity,i.refractionRatio.value=d.refractionRatio,i.combine.value=d.combine,i.useRefract.value=
d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping;if(d instanceof THREE.LineBasicMaterial)i.diffuse.value=d.color,i.opacity.value=d.opacity;else if(d instanceof THREE.ParticleBasicMaterial)i.psColor.value=d.color,i.opacity.value=d.opacity,i.size.value=d.size,i.scale.value=D.height/2,i.map.texture=d.map;else if(d instanceof THREE.MeshPhongMaterial)i.shininess.value=d.shininess,G.gammaInput?(i.ambient.value.copyGammaToLinear(d.ambient),i.specular.value.copyGammaToLinear(d.specular)):
(i.ambient.value=d.ambient,i.specular.value=d.specular),d.wrapAround&&i.wrapRGB.value.copy(d.wrapRGB);else if(d instanceof THREE.MeshLambertMaterial)G.gammaInput?i.ambient.value.copyGammaToLinear(d.ambient):i.ambient.value=d.ambient,d.wrapAround&&i.wrapRGB.value.copy(d.wrapRGB);else if(d instanceof THREE.MeshDepthMaterial)i.mNear.value=a.near,i.mFar.value=a.far,i.opacity.value=d.opacity;else if(d instanceof THREE.MeshNormalMaterial)i.opacity.value=d.opacity;if(e.receiveShadow&&!d._shadowPass&&i.shadowMatrix){h=
c=0;for(k=b.length;h<k;h++)if(n=b[h],n.castShadow&&(n instanceof THREE.SpotLight||n instanceof THREE.DirectionalLight))i.shadowMap.texture[c]=n.shadowMap,i.shadowMapSize.value[c]=n.shadowMapSize,i.shadowMatrix.value[c]=n.shadowMatrix,i.shadowDarkness.value[c]=n.shadowDarkness,i.shadowBias.value[c]=n.shadowBias,c++}b=d.uniformsList;for(i=0,c=b.length;i<c;i++)if(n=f.uniforms[b[i][1]])if(h=b[i][0],m=h.type,k=h.value,"i"===m)j.uniform1i(n,k);else if("f"===m)j.uniform1f(n,k);else if("v2"===m)j.uniform2f(n,
k.x,k.y);else if("v3"===m)j.uniform3f(n,k.x,k.y,k.z);else if("v4"===m)j.uniform4f(n,k.x,k.y,k.z,k.w);else if("c"===m)j.uniform3f(n,k.r,k.g,k.b);else if("fv1"===m)j.uniform1fv(n,k);else if("fv"===m)j.uniform3fv(n,k);else if("v2v"===m){if(!h._array)h._array=new Float32Array(2*k.length);for(m=0,r=k.length;m<r;m++)s=2*m,h._array[s]=k[m].x,h._array[s+1]=k[m].y;j.uniform2fv(n,h._array)}else if("v3v"===m){if(!h._array)h._array=new Float32Array(3*k.length);for(m=0,r=k.length;m<r;m++)s=3*m,h._array[s]=k[m].x,
h._array[s+1]=k[m].y,h._array[s+2]=k[m].z;j.uniform3fv(n,h._array)}else if("v4v"==m){if(!h._array)h._array=new Float32Array(4*k.length);for(m=0,r=k.length;m<r;m++)s=4*m,h._array[s]=k[m].x,h._array[s+1]=k[m].y,h._array[s+2]=k[m].z,h._array[s+3]=k[m].w;j.uniform4fv(n,h._array)}else if("m4"===m){if(!h._array)h._array=new Float32Array(16);k.flattenToArray(h._array);j.uniformMatrix4fv(n,!1,h._array)}else if("m4v"===m){if(!h._array)h._array=new Float32Array(16*k.length);for(m=0,r=k.length;m<r;m++)k[m].flattenToArrayOffset(h._array,
16*m);j.uniformMatrix4fv(n,!1,h._array)}else if("t"===m){if(j.uniform1i(n,k),n=h.texture)if(n.image instanceof Array&&6===n.image.length){if(h=n,6===h.image.length)if(h.needsUpdate){if(!h.image.__webglTextureCube)h.image.__webglTextureCube=j.createTexture();j.activeTexture(j.TEXTURE0+k);j.bindTexture(j.TEXTURE_CUBE_MAP,h.image.__webglTextureCube);k=[];for(n=0;6>n;n++){m=k;r=n;if(G.autoScaleCubemaps){if(s=h.image[n],E=ab,!(s.width<=E&&s.height<=E))v=Math.max(s.width,s.height),t=Math.floor(s.width*
E/v),E=Math.floor(s.height*E/v),v=document.createElement("canvas"),v.width=t,v.height=E,v.getContext("2d").drawImage(s,0,0,s.width,s.height,0,0,t,E),s=v}else s=h.image[n];m[r]=s}n=k[0];m=0===(n.width&n.width-1)&&0===(n.height&n.height-1);r=B(h.format);s=B(h.type);u(j.TEXTURE_CUBE_MAP,h,m);for(n=0;6>n;n++)j.texImage2D(j.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,r,r,s,k[n]);h.generateMipmaps&&m&&j.generateMipmap(j.TEXTURE_CUBE_MAP);h.needsUpdate=!1;if(h.onUpdated)h.onUpdated()}else j.activeTexture(j.TEXTURE0+
k),j.bindTexture(j.TEXTURE_CUBE_MAP,h.image.__webglTextureCube)}else n instanceof THREE.WebGLRenderTargetCube?(h=n,j.activeTexture(j.TEXTURE0+k),j.bindTexture(j.TEXTURE_CUBE_MAP,h.__webglTexture)):G.setTexture(n,k)}else if("tv"===m){if(!h._array){h._array=[];for(m=0,r=h.texture.length;m<r;m++)h._array[m]=k+m}j.uniform1iv(n,h._array);for(m=0,r=h.texture.length;m<r;m++)(n=h.texture[m])&&G.setTexture(n,h._array[m])}(d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&
null!==g.cameraPosition&&j.uniform3f(g.cameraPosition,a.position.x,a.position.y,a.position.z);(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==g.viewMatrix&&j.uniformMatrix4fv(g.viewMatrix,!1,a._viewMatrixArray);d.skinning&&(j.uniformMatrix4fv(g.cameraInverseMatrix,!1,a._viewMatrixArray),j.uniformMatrix4fv(g.boneGlobalMatrices,!1,e.boneMatrices))}j.uniformMatrix4fv(g.modelViewMatrix,!1,e._modelViewMatrixArray);g.normalMatrix&&
j.uniformMatrix3fv(g.normalMatrix,!1,e._normalMatrixArray);(d instanceof THREE.ShaderMaterial||d.envMap||d.skinning||e.receiveShadow)&&null!==g.objectMatrix&&j.uniformMatrix4fv(g.objectMatrix,!1,e._objectMatrixArray);return f}function r(a,b){a._modelViewMatrix.multiplyToArray(b.matrixWorldInverse,a.matrixWorld,a._modelViewMatrixArray);var c=THREE.Matrix4.makeInvert3x3(a._modelViewMatrix);c&&c.transposeIntoArray(a._normalMatrixArray)}function s(a,b,c){ha!==a&&(a?j.enable(j.POLYGON_OFFSET_FILL):j.disable(j.POLYGON_OFFSET_FILL),
ha=a);if(a&&(Qa!==b||la!==c))j.polygonOffset(b,c),Qa=b,la=c}function t(a,b){var c;"fragment"===a?c=j.createShader(j.FRAGMENT_SHADER):"vertex"===a&&(c=j.createShader(j.VERTEX_SHADER));j.shaderSource(c,b);j.compileShader(c);return!j.getShaderParameter(c,j.COMPILE_STATUS)?(console.error(j.getShaderInfoLog(c)),console.error(b),null):c}function u(a,b,c){c?(j.texParameteri(a,j.TEXTURE_WRAP_S,B(b.wrapS)),j.texParameteri(a,j.TEXTURE_WRAP_T,B(b.wrapT)),j.texParameteri(a,j.TEXTURE_MAG_FILTER,B(b.magFilter)),
j.texParameteri(a,j.TEXTURE_MIN_FILTER,B(b.minFilter))):(j.texParameteri(a,j.TEXTURE_WRAP_S,j.CLAMP_TO_EDGE),j.texParameteri(a,j.TEXTURE_WRAP_T,j.CLAMP_TO_EDGE),j.texParameteri(a,j.TEXTURE_MAG_FILTER,x(b.magFilter)),j.texParameteri(a,j.TEXTURE_MIN_FILTER,x(b.minFilter)))}function v(a,b){j.bindRenderbuffer(j.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(j.renderbufferStorage(j.RENDERBUFFER,j.DEPTH_COMPONENT16,b.width,b.height),j.framebufferRenderbuffer(j.FRAMEBUFFER,j.DEPTH_ATTACHMENT,j.RENDERBUFFER,
a)):b.depthBuffer&&b.stencilBuffer?(j.renderbufferStorage(j.RENDERBUFFER,j.DEPTH_STENCIL,b.width,b.height),j.framebufferRenderbuffer(j.FRAMEBUFFER,j.DEPTH_STENCIL_ATTACHMENT,j.RENDERBUFFER,a)):j.renderbufferStorage(j.RENDERBUFFER,j.RGBA4,b.width,b.height)}function x(a){switch(a){case THREE.NearestFilter:case THREE.NearestMipMapNearestFilter:case THREE.NearestMipMapLinearFilter:return j.NEAREST;default:return j.LINEAR}}function B(a){switch(a){case THREE.RepeatWrapping:return j.REPEAT;case THREE.ClampToEdgeWrapping:return j.CLAMP_TO_EDGE;
case THREE.MirroredRepeatWrapping:return j.MIRRORED_REPEAT;case THREE.NearestFilter:return j.NEAREST;case THREE.NearestMipMapNearestFilter:return j.NEAREST_MIPMAP_NEAREST;case THREE.NearestMipMapLinearFilter:return j.NEAREST_MIPMAP_LINEAR;case THREE.LinearFilter:return j.LINEAR;case THREE.LinearMipMapNearestFilter:return j.LINEAR_MIPMAP_NEAREST;case THREE.LinearMipMapLinearFilter:return j.LINEAR_MIPMAP_LINEAR;case THREE.ByteType:return j.BYTE;case THREE.UnsignedByteType:return j.UNSIGNED_BYTE;case THREE.ShortType:return j.SHORT;
case THREE.UnsignedShortType:return j.UNSIGNED_SHORT;case THREE.IntType:return j.INT;case THREE.UnsignedShortType:return j.UNSIGNED_INT;case THREE.FloatType:return j.FLOAT;case THREE.AlphaFormat:return j.ALPHA;case THREE.RGBFormat:return j.RGB;case THREE.RGBAFormat:return j.RGBA;case THREE.LuminanceFormat:return j.LUMINANCE;case THREE.LuminanceAlphaFormat:return j.LUMINANCE_ALPHA}return 0}var a=a||{},D=void 0!==a.canvas?a.canvas:document.createElement("canvas"),C=void 0!==a.precision?a.precision:
"mediump",A=void 0!==a.alpha?a.alpha:!0,H=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,I=void 0!==a.antialias?a.antialias:!1,N=void 0!==a.stencil?a.stencil:!0,$=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,K=void 0!==a.clearColor?new THREE.Color(a.clearColor):new THREE.Color(0),Q=void 0!==a.clearAlpha?a.clearAlpha:0,L=void 0!==a.maxLights?a.maxLights:4;this.domElement=D;this.context=null;this.autoUpdateScene=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=
this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1;this.shadowMapCullFrontFaces=this.shadowMapSoft=this.shadowMapAutoUpdate=!0;this.maxMorphTargets=8;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var G=this,j,W=[],y=null,E=null,S=-1,T=null,R=null,ka=0,ga=null,V=null,ba=null,ca=null,da=null,ha=null,
Qa=null,la=null,za=null,Aa=0,Ja=0,Da=0,$a=0,Ta=0,ib=0,db=new THREE.Frustum,Wa=new THREE.Matrix4,Xa=new THREE.Vector4,ra=new THREE.Vector3,Ba={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]}};j=function(){var a;try{if(!(a=D.getContext("experimental-webgl",{alpha:A,premultipliedAlpha:H,antialias:I,stencil:N,preserveDrawingBuffer:$})))throw"Error creating WebGL context.";console.log(navigator.userAgent+" | "+a.getParameter(a.VERSION)+
" | "+a.getParameter(a.VENDOR)+" | "+a.getParameter(a.RENDERER)+" | "+a.getParameter(a.SHADING_LANGUAGE_VERSION))}catch(b){console.error(b)}return a}();j.clearColor(0,0,0,1);j.clearDepth(1);j.clearStencil(0);j.enable(j.DEPTH_TEST);j.depthFunc(j.LEQUAL);j.frontFace(j.CCW);j.cullFace(j.BACK);j.enable(j.CULL_FACE);j.enable(j.BLEND);j.blendEquation(j.FUNC_ADD);j.blendFunc(j.SRC_ALPHA,j.ONE_MINUS_SRC_ALPHA);j.clearColor(K.r,K.g,K.b,Q);this.context=j;var ja=j.getParameter(j.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
j.getParameter(j.MAX_TEXTURE_SIZE);var ab=j.getParameter(j.MAX_CUBE_MAP_TEXTURE_SIZE);this.getContext=function(){return j};this.supportsVertexTextures=function(){return 0<ja};this.setSize=function(a,b){D.width=a;D.height=b;this.setViewport(0,0,D.width,D.height)};this.setViewport=function(a,b,c,d){Aa=a;Ja=b;Da=c;$a=d;j.viewport(Aa,Ja,Da,$a)};this.setScissor=function(a,b,c,d){j.scissor(a,b,c,d)};this.enableScissorTest=function(a){a?j.enable(j.SCISSOR_TEST):j.disable(j.SCISSOR_TEST)};this.setClearColorHex=
function(a,b){K.setHex(a);Q=b;j.clearColor(K.r,K.g,K.b,Q)};this.setClearColor=function(a,b){K.copy(a);Q=b;j.clearColor(K.r,K.g,K.b,Q)};this.getClearColor=function(){return K};this.getClearAlpha=function(){return Q};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=j.COLOR_BUFFER_BIT;if(void 0===b||b)d|=j.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=j.STENCIL_BUFFER_BIT;j.clear(d)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);
this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.deallocateObject=function(a){if(a.__webglInit)if(a.__webglInit=!1,delete a._modelViewMatrix,delete a._normalMatrixArray,delete a._modelViewMatrixArray,delete a._objectMatrixArray,a instanceof THREE.Mesh)for(var b in a.geometry.geometryGroups){var c=a.geometry.geometryGroups[b];j.deleteBuffer(c.__webglVertexBuffer);j.deleteBuffer(c.__webglNormalBuffer);j.deleteBuffer(c.__webglTangentBuffer);
j.deleteBuffer(c.__webglColorBuffer);j.deleteBuffer(c.__webglUVBuffer);j.deleteBuffer(c.__webglUV2Buffer);j.deleteBuffer(c.__webglSkinVertexABuffer);j.deleteBuffer(c.__webglSkinVertexBBuffer);j.deleteBuffer(c.__webglSkinIndicesBuffer);j.deleteBuffer(c.__webglSkinWeightsBuffer);j.deleteBuffer(c.__webglFaceBuffer);j.deleteBuffer(c.__webglLineBuffer);if(c.numMorphTargets)for(var d=0,e=c.numMorphTargets;d<e;d++)j.deleteBuffer(c.__webglMorphTargetsBuffers[d]);if(c.__webglCustomAttributesList)for(d in d=
void 0,c.__webglCustomAttributesList)j.deleteBuffer(c.__webglCustomAttributesList[d].buffer);G.info.memory.geometries--}else if(a instanceof THREE.Ribbon)a=a.geometry,j.deleteBuffer(a.__webglVertexBuffer),j.deleteBuffer(a.__webglColorBuffer),G.info.memory.geometries--;else if(a instanceof THREE.Line)a=a.geometry,j.deleteBuffer(a.__webglVertexBuffer),j.deleteBuffer(a.__webglColorBuffer),G.info.memory.geometries--;else if(a instanceof THREE.ParticleSystem)a=a.geometry,j.deleteBuffer(a.__webglVertexBuffer),
j.deleteBuffer(a.__webglColorBuffer),G.info.memory.geometries--};this.deallocateTexture=function(a){if(a.__webglInit)a.__webglInit=!1,j.deleteTexture(a.__webglTexture),G.info.memory.textures--};this.updateShadowMap=function(a,b){y=null;S=T=da=ca=ba=-1;this.shadowMapPlugin.update(a,b)};this.renderBufferImmediate=function(a,b,c){if(!a.__webglVertexBuffer)a.__webglVertexBuffer=j.createBuffer();if(!a.__webglNormalBuffer)a.__webglNormalBuffer=j.createBuffer();a.hasPos&&(j.bindBuffer(j.ARRAY_BUFFER,a.__webglVertexBuffer),
j.bufferData(j.ARRAY_BUFFER,a.positionArray,j.DYNAMIC_DRAW),j.enableVertexAttribArray(b.attributes.position),j.vertexAttribPointer(b.attributes.position,3,j.FLOAT,!1,0,0));if(a.hasNormal){j.bindBuffer(j.ARRAY_BUFFER,a.__webglNormalBuffer);if(c===THREE.FlatShading){var d,e,f,g,h,i,l,k,n,m,q=3*a.count;for(m=0;m<q;m+=9)c=a.normalArray,d=c[m],e=c[m+1],f=c[m+2],g=c[m+3],i=c[m+4],k=c[m+5],h=c[m+6],l=c[m+7],n=c[m+8],d=(d+g+h)/3,e=(e+i+l)/3,f=(f+k+n)/3,c[m]=d,c[m+1]=e,c[m+2]=f,c[m+3]=d,c[m+4]=e,c[m+5]=f,
c[m+6]=d,c[m+7]=e,c[m+8]=f}j.bufferData(j.ARRAY_BUFFER,a.normalArray,j.DYNAMIC_DRAW);j.enableVertexAttribArray(b.attributes.normal);j.vertexAttribPointer(b.attributes.normal,3,j.FLOAT,!1,0,0)}j.drawArrays(j.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){if(0!==d.opacity&&(c=m(a,b,c,d,f),a=c.attributes,b=!1,d=16777215*e.id+2*c.id+(d.wireframe?1:0),d!==T&&(T=d,b=!0),f instanceof THREE.Mesh)){f=e.offsets;d=0;for(c=f.length;d<c;++d)b&&(j.bindBuffer(j.ARRAY_BUFFER,e.vertexPositionBuffer),
j.vertexAttribPointer(a.position,e.vertexPositionBuffer.itemSize,j.FLOAT,!1,0,12*f[d].index),0<=a.normal&&e.vertexNormalBuffer&&(j.bindBuffer(j.ARRAY_BUFFER,e.vertexNormalBuffer),j.vertexAttribPointer(a.normal,e.vertexNormalBuffer.itemSize,j.FLOAT,!1,0,12*f[d].index)),0<=a.uv&&e.vertexUvBuffer&&(e.vertexUvBuffer?(j.bindBuffer(j.ARRAY_BUFFER,e.vertexUvBuffer),j.vertexAttribPointer(a.uv,e.vertexUvBuffer.itemSize,j.FLOAT,!1,0,8*f[d].index),j.enableVertexAttribArray(a.uv)):j.disableVertexAttribArray(a.uv)),
0<=a.color&&e.vertexColorBuffer&&(j.bindBuffer(j.ARRAY_BUFFER,e.vertexColorBuffer),j.vertexAttribPointer(a.color,e.vertexColorBuffer.itemSize,j.FLOAT,!1,0,16*f[d].index)),j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,e.vertexIndexBuffer)),j.drawElements(j.TRIANGLES,f[d].count,j.UNSIGNED_SHORT,2*f[d].start),G.info.render.calls++,G.info.render.vertices+=f[d].count,G.info.render.faces+=f[d].count/3}};this.renderBuffer=function(a,b,c,d,e,f){if(0!==d.opacity){var g,h,c=m(a,b,c,d,f),b=c.attributes,a=!1,c=16777215*
e.id+2*c.id+(d.wireframe?1:0);c!==T&&(T=c,a=!0);if(!d.morphTargets&&0<=b.position)a&&(j.bindBuffer(j.ARRAY_BUFFER,e.__webglVertexBuffer),j.vertexAttribPointer(b.position,3,j.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase?(j.bindBuffer(j.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),j.vertexAttribPointer(c.position,3,j.FLOAT,!1,0,0)):0<=c.position&&(j.bindBuffer(j.ARRAY_BUFFER,e.__webglVertexBuffer),j.vertexAttribPointer(c.position,3,j.FLOAT,
!1,0,0));if(f.morphTargetForcedOrder.length){g=0;var i=f.morphTargetForcedOrder;for(h=f.morphTargetInfluences;g<d.numSupportedMorphTargets&&g<i.length;)j.bindBuffer(j.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[i[g]]),j.vertexAttribPointer(c["morphTarget"+g],3,j.FLOAT,!1,0,0),f.__webglMorphTargetInfluences[g]=h[i[g]],g++}else{var i=[],l=-1,k=0;h=f.morphTargetInfluences;var n,q=h.length;g=0;for(-1!==f.morphTargetBase&&(i[f.morphTargetBase]=!0);g<d.numSupportedMorphTargets;){for(n=0;n<q;n++)!i[n]&&h[n]>
l&&(k=n,l=h[k]);j.bindBuffer(j.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[k]);j.vertexAttribPointer(c["morphTarget"+g],3,j.FLOAT,!1,0,0);f.__webglMorphTargetInfluences[g]=l;i[k]=1;l=-1;g++}}null!==d.program.uniforms.morphTargetInfluences&&j.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(a){if(e.__webglCustomAttributesList)for(g=0,h=e.__webglCustomAttributesList.length;g<h;g++)c=e.__webglCustomAttributesList[g],0<=b[c.buffer.belongsToAttribute]&&(j.bindBuffer(j.ARRAY_BUFFER,
c.buffer),j.vertexAttribPointer(b[c.buffer.belongsToAttribute],c.size,j.FLOAT,!1,0,0));0<=b.color&&(j.bindBuffer(j.ARRAY_BUFFER,e.__webglColorBuffer),j.vertexAttribPointer(b.color,3,j.FLOAT,!1,0,0));0<=b.normal&&(j.bindBuffer(j.ARRAY_BUFFER,e.__webglNormalBuffer),j.vertexAttribPointer(b.normal,3,j.FLOAT,!1,0,0));0<=b.tangent&&(j.bindBuffer(j.ARRAY_BUFFER,e.__webglTangentBuffer),j.vertexAttribPointer(b.tangent,4,j.FLOAT,!1,0,0));0<=b.uv&&(e.__webglUVBuffer?(j.bindBuffer(j.ARRAY_BUFFER,e.__webglUVBuffer),
j.vertexAttribPointer(b.uv,2,j.FLOAT,!1,0,0),j.enableVertexAttribArray(b.uv)):j.disableVertexAttribArray(b.uv));0<=b.uv2&&(e.__webglUV2Buffer?(j.bindBuffer(j.ARRAY_BUFFER,e.__webglUV2Buffer),j.vertexAttribPointer(b.uv2,2,j.FLOAT,!1,0,0),j.enableVertexAttribArray(b.uv2)):j.disableVertexAttribArray(b.uv2));d.skinning&&0<=b.skinVertexA&&0<=b.skinVertexB&&0<=b.skinIndex&&0<=b.skinWeight&&(j.bindBuffer(j.ARRAY_BUFFER,e.__webglSkinVertexABuffer),j.vertexAttribPointer(b.skinVertexA,4,j.FLOAT,!1,0,0),j.bindBuffer(j.ARRAY_BUFFER,
e.__webglSkinVertexBBuffer),j.vertexAttribPointer(b.skinVertexB,4,j.FLOAT,!1,0,0),j.bindBuffer(j.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),j.vertexAttribPointer(b.skinIndex,4,j.FLOAT,!1,0,0),j.bindBuffer(j.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),j.vertexAttribPointer(b.skinWeight,4,j.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?(d=d.wireframeLinewidth,d!==za&&(j.lineWidth(d),za=d),a&&j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),j.drawElements(j.LINES,e.__webglLineCount,j.UNSIGNED_SHORT,
0)):(a&&j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),j.drawElements(j.TRIANGLES,e.__webglFaceCount,j.UNSIGNED_SHORT,0)),G.info.render.calls++,G.info.render.vertices+=e.__webglFaceCount,G.info.render.faces+=e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?j.LINE_STRIP:j.LINES,d=d.linewidth,d!==za&&(j.lineWidth(d),za=d),j.drawArrays(f,0,e.__webglLineCount),G.info.render.calls++):f instanceof THREE.ParticleSystem?(j.drawArrays(j.POINTS,0,e.__webglParticleCount),G.info.render.calls++,
G.info.render.points+=e.__webglParticleCount):f instanceof THREE.Ribbon&&(j.drawArrays(j.TRIANGLE_STRIP,0,e.__webglVertexCount),G.info.render.calls++)}};this.render=function(a,b,c,d){var e,f,k,m,n=a.lights,q=a.fog;S=-1;this.autoUpdateObjects&&this.initWebGLObjects(a);void 0===b.parent&&(console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it..."),a.add(b));this.autoUpdateScene&&a.updateMatrixWorld();h(this.renderPluginsPre,a,b);G.info.render.calls=0;G.info.render.vertices=0;G.info.render.faces=
0;G.info.render.points=0;b.matrixWorldInverse.getInverse(b.matrixWorld);if(!b._viewMatrixArray)b._viewMatrixArray=new Float32Array(16);b.matrixWorldInverse.flattenToArray(b._viewMatrixArray);if(!b._projectionMatrixArray)b._projectionMatrixArray=new Float32Array(16);b.projectionMatrix.flattenToArray(b._projectionMatrixArray);Wa.multiply(b.projectionMatrix,b.matrixWorldInverse);db.setFromMatrix(Wa);this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);
m=a.__webglObjects;for(d=0,e=m.length;d<e;d++)if(f=m[d],k=f.object,f.render=!1,k.visible&&(!(k instanceof THREE.Mesh||k instanceof THREE.ParticleSystem)||!k.frustumCulled||db.contains(k))){k.matrixWorld.flattenToArray(k._objectMatrixArray);r(k,b);var o=f,p=o.object,t=o.buffer,E=void 0,E=E=void 0,E=p.material;if(E instanceof THREE.MeshFaceMaterial){if(E=t.materialIndex,0<=E)E=p.geometry.materials[E],E.transparent?(o.transparent=E,o.opaque=null):(o.opaque=E,o.transparent=null)}else if(E)E.transparent?
(o.transparent=E,o.opaque=null):(o.opaque=E,o.transparent=null);f.render=!0;if(this.sortObjects)k.renderDepth?f.z=k.renderDepth:(Xa.copy(k.position),Wa.multiplyVector3(Xa),f.z=Xa.z)}this.sortObjects&&m.sort(g);m=a.__webglObjectsImmediate;for(d=0,e=m.length;d<e;d++)if(f=m[d],k=f.object,k.visible)k.matrixAutoUpdate&&k.matrixWorld.flattenToArray(k._objectMatrixArray),r(k,b),k=f.object.material,k.transparent?(f.transparent=k,f.opaque=null):(f.opaque=k,f.transparent=null);a.overrideMaterial?(this.setBlending(a.overrideMaterial.blending),
this.setDepthTest(a.overrideMaterial.depthTest),this.setDepthWrite(a.overrideMaterial.depthWrite),s(a.overrideMaterial.polygonOffset,a.overrideMaterial.polygonOffsetFactor,a.overrideMaterial.polygonOffsetUnits),i(a.__webglObjects,!1,"",b,n,q,!0,a.overrideMaterial),l(a.__webglObjectsImmediate,"",b,n,q,!1,a.overrideMaterial)):(this.setBlending(THREE.NormalBlending),i(a.__webglObjects,!0,"opaque",b,n,q,!1),l(a.__webglObjectsImmediate,"opaque",b,n,q,!1),i(a.__webglObjects,!1,"transparent",b,n,q,!0),l(a.__webglObjectsImmediate,
"transparent",b,n,q,!0));h(this.renderPluginsPost,a,b);c&&c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter&&(c instanceof THREE.WebGLRenderTargetCube?(j.bindTexture(j.TEXTURE_CUBE_MAP,c.__webglTexture),j.generateMipmap(j.TEXTURE_CUBE_MAP),j.bindTexture(j.TEXTURE_CUBE_MAP,null)):(j.bindTexture(j.TEXTURE_2D,c.__webglTexture),j.generateMipmap(j.TEXTURE_2D),j.bindTexture(j.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)};this.renderImmediateObject=
function(a,b,c,d,e){var f=m(a,b,c,d,e);T=-1;G.setObjectFaces(e);e.immediateRenderCallback?e.immediateRenderCallback(f,j,db):e.render(function(a){G.renderBufferImmediate(a,f,d.shading)})};this.initWebGLObjects=function(a){if(!a.__webglObjects)a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[];for(;a.__objectsAdded.length;){var g=a.__objectsAdded[0],h=a,i=void 0,l=void 0,m=void 0;if(!g.__webglInit)if(g.__webglInit=!0,g._modelViewMatrix=new THREE.Matrix4,g._normalMatrixArray=
new Float32Array(9),g._modelViewMatrixArray=new Float32Array(16),g._objectMatrixArray=new Float32Array(16),g.matrixWorld.flattenToArray(g._objectMatrixArray),g instanceof THREE.Mesh){if(l=g.geometry,l instanceof THREE.Geometry){if(void 0===l.geometryGroups){var r=l,s=void 0,E=void 0,t=void 0,v=void 0,S=void 0,y=void 0,u=void 0,x={},T=r.morphTargets.length;r.geometryGroups={};for(s=0,E=r.faces.length;s<E;s++)t=r.faces[s],v=t.materialIndex,y=void 0!==v?v:-1,void 0===x[y]&&(x[y]={hash:y,counter:0}),
u=x[y].hash+"_"+x[y].counter,void 0===r.geometryGroups[u]&&(r.geometryGroups[u]={faces3:[],faces4:[],materialIndex:v,vertices:0,numMorphTargets:T}),S=t instanceof THREE.Face3?3:4,65535<r.geometryGroups[u].vertices+S&&(x[y].counter+=1,u=x[y].hash+"_"+x[y].counter,void 0===r.geometryGroups[u]&&(r.geometryGroups[u]={faces3:[],faces4:[],materialIndex:v,vertices:0,numMorphTargets:T})),t instanceof THREE.Face3?r.geometryGroups[u].faces3.push(s):r.geometryGroups[u].faces4.push(s),r.geometryGroups[u].vertices+=
S;r.geometryGroupsList=[];var C=void 0;for(C in r.geometryGroups)r.geometryGroups[C].id=ka++,r.geometryGroupsList.push(r.geometryGroups[C])}for(i in l.geometryGroups)if(m=l.geometryGroups[i],!m.__webglVertexBuffer){var A=m;A.__webglVertexBuffer=j.createBuffer();A.__webglNormalBuffer=j.createBuffer();A.__webglTangentBuffer=j.createBuffer();A.__webglColorBuffer=j.createBuffer();A.__webglUVBuffer=j.createBuffer();A.__webglUV2Buffer=j.createBuffer();A.__webglSkinVertexABuffer=j.createBuffer();A.__webglSkinVertexBBuffer=
j.createBuffer();A.__webglSkinIndicesBuffer=j.createBuffer();A.__webglSkinWeightsBuffer=j.createBuffer();A.__webglFaceBuffer=j.createBuffer();A.__webglLineBuffer=j.createBuffer();if(A.numMorphTargets){var B=void 0,D=void 0;A.__webglMorphTargetsBuffers=[];for(B=0,D=A.numMorphTargets;B<D;B++)A.__webglMorphTargetsBuffers.push(j.createBuffer())}G.info.memory.geometries++;var R=m,H=g,L=H.geometry,V=R.faces3,K=R.faces4,I=3*V.length+4*K.length,N=1*V.length+2*K.length,ga=3*V.length+4*K.length,ba=c(H,R),ca=
e(ba),Q=d(ba),da=ba.vertexColors?ba.vertexColors:!1;R.__vertexArray=new Float32Array(3*I);if(Q)R.__normalArray=new Float32Array(3*I);if(L.hasTangents)R.__tangentArray=new Float32Array(4*I);if(da)R.__colorArray=new Float32Array(3*I);if(ca){if(0<L.faceUvs.length||0<L.faceVertexUvs.length)R.__uvArray=new Float32Array(2*I);if(1<L.faceUvs.length||1<L.faceVertexUvs.length)R.__uv2Array=new Float32Array(2*I)}if(H.geometry.skinWeights.length&&H.geometry.skinIndices.length)R.__skinVertexAArray=new Float32Array(4*
I),R.__skinVertexBArray=new Float32Array(4*I),R.__skinIndexArray=new Float32Array(4*I),R.__skinWeightArray=new Float32Array(4*I);R.__faceArray=new Uint16Array(3*N);R.__lineArray=new Uint16Array(2*ga);if(R.numMorphTargets){R.__morphTargetsArrays=[];for(var ha=0,W=R.numMorphTargets;ha<W;ha++)R.__morphTargetsArrays.push(new Float32Array(3*I))}R.__webglFaceCount=3*N;R.__webglLineCount=2*ga;if(ba.attributes){if(void 0===R.__webglCustomAttributesList)R.__webglCustomAttributesList=[];var $=void 0;for($ in ba.attributes){var Qa=
ba.attributes[$],la={},za;for(za in Qa)la[za]=Qa[za];if(!la.__webglInitialized||la.createUniqueBuffers){la.__webglInitialized=!0;var ja=1;"v2"===la.type?ja=2:"v3"===la.type?ja=3:"v4"===la.type?ja=4:"c"===la.type&&(ja=3);la.size=ja;la.array=new Float32Array(I*ja);la.buffer=j.createBuffer();la.buffer.belongsToAttribute=$;Qa.needsUpdate=!0;la.__original=Qa}R.__webglCustomAttributesList.push(la)}}R.__inittedArrays=!0;l.__dirtyVertices=!0;l.__dirtyMorphTargets=!0;l.__dirtyElements=!0;l.__dirtyUvs=!0;l.__dirtyNormals=
!0;l.__dirtyTangents=!0;l.__dirtyColors=!0}}}else if(g instanceof THREE.Ribbon){if(l=g.geometry,!l.__webglVertexBuffer){var ra=l;ra.__webglVertexBuffer=j.createBuffer();ra.__webglColorBuffer=j.createBuffer();G.info.memory.geometries++;var Aa=l,Da=Aa.vertices.length;Aa.__vertexArray=new Float32Array(3*Da);Aa.__colorArray=new Float32Array(3*Da);Aa.__webglVertexCount=Da;l.__dirtyVertices=!0;l.__dirtyColors=!0}}else if(g instanceof THREE.Line){if(l=g.geometry,!l.__webglVertexBuffer){var Ba=l;Ba.__webglVertexBuffer=
j.createBuffer();Ba.__webglColorBuffer=j.createBuffer();G.info.memory.geometries++;var Ja=l,Wa=g,$a=Ja.vertices.length;Ja.__vertexArray=new Float32Array(3*$a);Ja.__colorArray=new Float32Array(3*$a);Ja.__webglLineCount=$a;b(Ja,Wa);l.__dirtyVertices=!0;l.__dirtyColors=!0}}else if(g instanceof THREE.ParticleSystem&&(l=g.geometry,!l.__webglVertexBuffer)){var Xa=l;Xa.__webglVertexBuffer=j.createBuffer();Xa.__webglColorBuffer=j.createBuffer();G.info.geometries++;var Ta=l,db=g,ib=Ta.vertices.length;Ta.__vertexArray=
new Float32Array(3*ib);Ta.__colorArray=new Float32Array(3*ib);Ta.__sortArray=[];Ta.__webglParticleCount=ib;b(Ta,db);l.__dirtyVertices=!0;l.__dirtyColors=!0}if(!g.__webglActive){if(g instanceof THREE.Mesh)if(l=g.geometry,l instanceof THREE.BufferGeometry)k(h.__webglObjects,l,g);else for(i in l.geometryGroups)m=l.geometryGroups[i],k(h.__webglObjects,m,g);else g instanceof THREE.Ribbon||g instanceof THREE.Line||g instanceof THREE.ParticleSystem?(l=g.geometry,k(h.__webglObjects,l,g)):void 0!==THREE.MarchingCubes&&
g instanceof THREE.MarchingCubes||g.immediateRenderCallback?h.__webglObjectsImmediate.push({object:g,opaque:null,transparent:null}):g instanceof THREE.Sprite?h.__webglSprites.push(g):g instanceof THREE.LensFlare&&h.__webglFlares.push(g);g.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;){var fb=a.__objectsRemoved[0],ab=a;fb instanceof THREE.Mesh||fb instanceof THREE.ParticleSystem||fb instanceof THREE.Ribbon||fb instanceof THREE.Line?o(ab.__webglObjects,fb):fb instanceof
THREE.Sprite?p(ab.__webglSprites,fb):fb instanceof THREE.LensFlare?p(ab.__webglFlares,fb):(fb instanceof THREE.MarchingCubes||fb.immediateRenderCallback)&&o(ab.__webglObjectsImmediate,fb);fb.__webglActive=!1;a.__objectsRemoved.splice(0,1)}for(var Mc=0,hd=a.__webglObjects.length;Mc<hd;Mc++){var lb=a.__webglObjects[Mc].object,ia=lb.geometry,jc=void 0,$b=void 0,Ua=void 0;if(lb instanceof THREE.Mesh)if(ia instanceof THREE.BufferGeometry)ia.__dirtyVertices=!1,ia.__dirtyElements=!1,ia.__dirtyUvs=!1,ia.__dirtyNormals=
!1,ia.__dirtyColors=!1;else{for(var Nc=0,id=ia.geometryGroupsList.length;Nc<id;Nc++)if(jc=ia.geometryGroupsList[Nc],Ua=c(lb,jc),$b=Ua.attributes&&n(Ua),ia.__dirtyVertices||ia.__dirtyMorphTargets||ia.__dirtyElements||ia.__dirtyUvs||ia.__dirtyNormals||ia.__dirtyColors||ia.__dirtyTangents||$b){var ea=jc,jd=lb,bb=j.DYNAMIC_DRAW,kd=!ia.dynamic,xc=Ua;if(ea.__inittedArrays){var Wc=d(xc),Oc=xc.vertexColors?xc.vertexColors:!1,Xc=e(xc),Yc=Wc===THREE.SmoothShading,F=void 0,U=void 0,kb=void 0,M=void 0,ac=void 0,
Hb=void 0,mb=void 0,yc=void 0,Bb=void 0,bc=void 0,cc=void 0,X=void 0,Y=void 0,Z=void 0,pa=void 0,nb=void 0,ob=void 0,pb=void 0,kc=void 0,qb=void 0,rb=void 0,sb=void 0,lc=void 0,tb=void 0,ub=void 0,vb=void 0,mc=void 0,wb=void 0,xb=void 0,yb=void 0,nc=void 0,Ib=void 0,Jb=void 0,Kb=void 0,zc=void 0,Lb=void 0,Mb=void 0,Nb=void 0,Ac=void 0,ma=void 0,Zc=void 0,Ob=void 0,dc=void 0,ec=void 0,cb=void 0,$c=void 0,Ka=void 0,Ca=0,Ia=0,Cb=0,Db=0,gb=0,Pa=0,qa=0,Ra=0,Fa=0,J=0,Ga=0,z=0,Ya=void 0,La=ea.__vertexArray,
oc=ea.__uvArray,pc=ea.__uv2Array,hb=ea.__normalArray,ta=ea.__tangentArray,Ma=ea.__colorArray,ua=ea.__skinVertexAArray,va=ea.__skinVertexBArray,wa=ea.__skinIndexArray,xa=ea.__skinWeightArray,Pc=ea.__morphTargetsArrays,Qc=ea.__webglCustomAttributesList,w=void 0,zb=ea.__faceArray,Za=ea.__lineArray,Sa=jd.geometry,ld=Sa.__dirtyElements,ad=Sa.__dirtyUvs,md=Sa.__dirtyNormals,nd=Sa.__dirtyTangents,od=Sa.__dirtyColors,pd=Sa.__dirtyMorphTargets,Ub=Sa.vertices,na=ea.faces3,oa=ea.faces4,Ha=Sa.faces,Rc=Sa.faceVertexUvs[0],
Sc=Sa.faceVertexUvs[1],Vb=Sa.skinVerticesA,Wb=Sa.skinVerticesB,Xb=Sa.skinIndices,Pb=Sa.skinWeights,Qb=Sa.morphTargets;if(Sa.__dirtyVertices){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],X=Ub[M.a].position,Y=Ub[M.b].position,Z=Ub[M.c].position,La[Ia]=X.x,La[Ia+1]=X.y,La[Ia+2]=X.z,La[Ia+3]=Y.x,La[Ia+4]=Y.y,La[Ia+5]=Y.z,La[Ia+6]=Z.x,La[Ia+7]=Z.y,La[Ia+8]=Z.z,Ia+=9;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],X=Ub[M.a].position,Y=Ub[M.b].position,Z=Ub[M.c].position,pa=Ub[M.d].position,La[Ia]=X.x,La[Ia+1]=X.y,La[Ia+
2]=X.z,La[Ia+3]=Y.x,La[Ia+4]=Y.y,La[Ia+5]=Y.z,La[Ia+6]=Z.x,La[Ia+7]=Z.y,La[Ia+8]=Z.z,La[Ia+9]=pa.x,La[Ia+10]=pa.y,La[Ia+11]=pa.z,Ia+=12;j.bindBuffer(j.ARRAY_BUFFER,ea.__webglVertexBuffer);j.bufferData(j.ARRAY_BUFFER,La,bb)}if(pd)for(cb=0,$c=Qb.length;cb<$c;cb++){Ga=0;for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],X=Qb[cb].vertices[M.a].position,Y=Qb[cb].vertices[M.b].position,Z=Qb[cb].vertices[M.c].position,Ka=Pc[cb],Ka[Ga]=X.x,Ka[Ga+1]=X.y,Ka[Ga+2]=X.z,Ka[Ga+3]=Y.x,Ka[Ga+4]=Y.y,Ka[Ga+5]=Y.z,Ka[Ga+6]=Z.x,
Ka[Ga+7]=Z.y,Ka[Ga+8]=Z.z,Ga+=9;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],X=Qb[cb].vertices[M.a].position,Y=Qb[cb].vertices[M.b].position,Z=Qb[cb].vertices[M.c].position,pa=Qb[cb].vertices[M.d].position,Ka=Pc[cb],Ka[Ga]=X.x,Ka[Ga+1]=X.y,Ka[Ga+2]=X.z,Ka[Ga+3]=Y.x,Ka[Ga+4]=Y.y,Ka[Ga+5]=Y.z,Ka[Ga+6]=Z.x,Ka[Ga+7]=Z.y,Ka[Ga+8]=Z.z,Ka[Ga+9]=pa.x,Ka[Ga+10]=pa.y,Ka[Ga+11]=pa.z,Ga+=12;j.bindBuffer(j.ARRAY_BUFFER,ea.__webglMorphTargetsBuffers[cb]);j.bufferData(j.ARRAY_BUFFER,Pc[cb],bb)}if(Pb.length){for(F=0,
U=na.length;F<U;F++)M=Ha[na[F]],tb=Pb[M.a],ub=Pb[M.b],vb=Pb[M.c],xa[J]=tb.x,xa[J+1]=tb.y,xa[J+2]=tb.z,xa[J+3]=tb.w,xa[J+4]=ub.x,xa[J+5]=ub.y,xa[J+6]=ub.z,xa[J+7]=ub.w,xa[J+8]=vb.x,xa[J+9]=vb.y,xa[J+10]=vb.z,xa[J+11]=vb.w,wb=Xb[M.a],xb=Xb[M.b],yb=Xb[M.c],wa[J]=wb.x,wa[J+1]=wb.y,wa[J+2]=wb.z,wa[J+3]=wb.w,wa[J+4]=xb.x,wa[J+5]=xb.y,wa[J+6]=xb.z,wa[J+7]=xb.w,wa[J+8]=yb.x,wa[J+9]=yb.y,wa[J+10]=yb.z,wa[J+11]=yb.w,Ib=Vb[M.a],Jb=Vb[M.b],Kb=Vb[M.c],ua[J]=Ib.x,ua[J+1]=Ib.y,ua[J+2]=Ib.z,ua[J+3]=1,ua[J+4]=Jb.x,
ua[J+5]=Jb.y,ua[J+6]=Jb.z,ua[J+7]=1,ua[J+8]=Kb.x,ua[J+9]=Kb.y,ua[J+10]=Kb.z,ua[J+11]=1,Lb=Wb[M.a],Mb=Wb[M.b],Nb=Wb[M.c],va[J]=Lb.x,va[J+1]=Lb.y,va[J+2]=Lb.z,va[J+3]=1,va[J+4]=Mb.x,va[J+5]=Mb.y,va[J+6]=Mb.z,va[J+7]=1,va[J+8]=Nb.x,va[J+9]=Nb.y,va[J+10]=Nb.z,va[J+11]=1,J+=12;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],tb=Pb[M.a],ub=Pb[M.b],vb=Pb[M.c],mc=Pb[M.d],xa[J]=tb.x,xa[J+1]=tb.y,xa[J+2]=tb.z,xa[J+3]=tb.w,xa[J+4]=ub.x,xa[J+5]=ub.y,xa[J+6]=ub.z,xa[J+7]=ub.w,xa[J+8]=vb.x,xa[J+9]=vb.y,xa[J+10]=vb.z,xa[J+
11]=vb.w,xa[J+12]=mc.x,xa[J+13]=mc.y,xa[J+14]=mc.z,xa[J+15]=mc.w,wb=Xb[M.a],xb=Xb[M.b],yb=Xb[M.c],nc=Xb[M.d],wa[J]=wb.x,wa[J+1]=wb.y,wa[J+2]=wb.z,wa[J+3]=wb.w,wa[J+4]=xb.x,wa[J+5]=xb.y,wa[J+6]=xb.z,wa[J+7]=xb.w,wa[J+8]=yb.x,wa[J+9]=yb.y,wa[J+10]=yb.z,wa[J+11]=yb.w,wa[J+12]=nc.x,wa[J+13]=nc.y,wa[J+14]=nc.z,wa[J+15]=nc.w,Ib=Vb[M.a],Jb=Vb[M.b],Kb=Vb[M.c],zc=Vb[M.d],ua[J]=Ib.x,ua[J+1]=Ib.y,ua[J+2]=Ib.z,ua[J+3]=1,ua[J+4]=Jb.x,ua[J+5]=Jb.y,ua[J+6]=Jb.z,ua[J+7]=1,ua[J+8]=Kb.x,ua[J+9]=Kb.y,ua[J+10]=Kb.z,
ua[J+11]=1,ua[J+12]=zc.x,ua[J+13]=zc.y,ua[J+14]=zc.z,ua[J+15]=1,Lb=Wb[M.a],Mb=Wb[M.b],Nb=Wb[M.c],Ac=Wb[M.d],va[J]=Lb.x,va[J+1]=Lb.y,va[J+2]=Lb.z,va[J+3]=1,va[J+4]=Mb.x,va[J+5]=Mb.y,va[J+6]=Mb.z,va[J+7]=1,va[J+8]=Nb.x,va[J+9]=Nb.y,va[J+10]=Nb.z,va[J+11]=1,va[J+12]=Ac.x,va[J+13]=Ac.y,va[J+14]=Ac.z,va[J+15]=1,J+=16;0<J&&(j.bindBuffer(j.ARRAY_BUFFER,ea.__webglSkinVertexABuffer),j.bufferData(j.ARRAY_BUFFER,ua,bb),j.bindBuffer(j.ARRAY_BUFFER,ea.__webglSkinVertexBBuffer),j.bufferData(j.ARRAY_BUFFER,va,bb),
j.bindBuffer(j.ARRAY_BUFFER,ea.__webglSkinIndicesBuffer),j.bufferData(j.ARRAY_BUFFER,wa,bb),j.bindBuffer(j.ARRAY_BUFFER,ea.__webglSkinWeightsBuffer),j.bufferData(j.ARRAY_BUFFER,xa,bb))}if(od&&Oc){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],mb=M.vertexColors,yc=M.color,3===mb.length&&Oc===THREE.VertexColors?(qb=mb[0],rb=mb[1],sb=mb[2]):sb=rb=qb=yc,Ma[Fa]=qb.r,Ma[Fa+1]=qb.g,Ma[Fa+2]=qb.b,Ma[Fa+3]=rb.r,Ma[Fa+4]=rb.g,Ma[Fa+5]=rb.b,Ma[Fa+6]=sb.r,Ma[Fa+7]=sb.g,Ma[Fa+8]=sb.b,Fa+=9;for(F=0,U=oa.length;F<U;F++)M=
Ha[oa[F]],mb=M.vertexColors,yc=M.color,4===mb.length&&Oc===THREE.VertexColors?(qb=mb[0],rb=mb[1],sb=mb[2],lc=mb[3]):lc=sb=rb=qb=yc,Ma[Fa]=qb.r,Ma[Fa+1]=qb.g,Ma[Fa+2]=qb.b,Ma[Fa+3]=rb.r,Ma[Fa+4]=rb.g,Ma[Fa+5]=rb.b,Ma[Fa+6]=sb.r,Ma[Fa+7]=sb.g,Ma[Fa+8]=sb.b,Ma[Fa+9]=lc.r,Ma[Fa+10]=lc.g,Ma[Fa+11]=lc.b,Fa+=12;0<Fa&&(j.bindBuffer(j.ARRAY_BUFFER,ea.__webglColorBuffer),j.bufferData(j.ARRAY_BUFFER,Ma,bb))}if(nd&&Sa.hasTangents){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],Bb=M.vertexTangents,nb=Bb[0],ob=Bb[1],
pb=Bb[2],ta[qa]=nb.x,ta[qa+1]=nb.y,ta[qa+2]=nb.z,ta[qa+3]=nb.w,ta[qa+4]=ob.x,ta[qa+5]=ob.y,ta[qa+6]=ob.z,ta[qa+7]=ob.w,ta[qa+8]=pb.x,ta[qa+9]=pb.y,ta[qa+10]=pb.z,ta[qa+11]=pb.w,qa+=12;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],Bb=M.vertexTangents,nb=Bb[0],ob=Bb[1],pb=Bb[2],kc=Bb[3],ta[qa]=nb.x,ta[qa+1]=nb.y,ta[qa+2]=nb.z,ta[qa+3]=nb.w,ta[qa+4]=ob.x,ta[qa+5]=ob.y,ta[qa+6]=ob.z,ta[qa+7]=ob.w,ta[qa+8]=pb.x,ta[qa+9]=pb.y,ta[qa+10]=pb.z,ta[qa+11]=pb.w,ta[qa+12]=kc.x,ta[qa+13]=kc.y,ta[qa+14]=kc.z,ta[qa+15]=
kc.w,qa+=16;j.bindBuffer(j.ARRAY_BUFFER,ea.__webglTangentBuffer);j.bufferData(j.ARRAY_BUFFER,ta,bb)}if(md&&Wc){for(F=0,U=na.length;F<U;F++)if(M=Ha[na[F]],ac=M.vertexNormals,Hb=M.normal,3===ac.length&&Yc)for(ma=0;3>ma;ma++)Ob=ac[ma],hb[Pa]=Ob.x,hb[Pa+1]=Ob.y,hb[Pa+2]=Ob.z,Pa+=3;else for(ma=0;3>ma;ma++)hb[Pa]=Hb.x,hb[Pa+1]=Hb.y,hb[Pa+2]=Hb.z,Pa+=3;for(F=0,U=oa.length;F<U;F++)if(M=Ha[oa[F]],ac=M.vertexNormals,Hb=M.normal,4===ac.length&&Yc)for(ma=0;4>ma;ma++)Ob=ac[ma],hb[Pa]=Ob.x,hb[Pa+1]=Ob.y,hb[Pa+
2]=Ob.z,Pa+=3;else for(ma=0;4>ma;ma++)hb[Pa]=Hb.x,hb[Pa+1]=Hb.y,hb[Pa+2]=Hb.z,Pa+=3;j.bindBuffer(j.ARRAY_BUFFER,ea.__webglNormalBuffer);j.bufferData(j.ARRAY_BUFFER,hb,bb)}if(ad&&Rc&&Xc){for(F=0,U=na.length;F<U;F++)if(kb=na[F],M=Ha[kb],bc=Rc[kb],void 0!==bc)for(ma=0;3>ma;ma++)dc=bc[ma],oc[Cb]=dc.u,oc[Cb+1]=dc.v,Cb+=2;for(F=0,U=oa.length;F<U;F++)if(kb=oa[F],M=Ha[kb],bc=Rc[kb],void 0!==bc)for(ma=0;4>ma;ma++)dc=bc[ma],oc[Cb]=dc.u,oc[Cb+1]=dc.v,Cb+=2;0<Cb&&(j.bindBuffer(j.ARRAY_BUFFER,ea.__webglUVBuffer),
j.bufferData(j.ARRAY_BUFFER,oc,bb))}if(ad&&Sc&&Xc){for(F=0,U=na.length;F<U;F++)if(kb=na[F],M=Ha[kb],cc=Sc[kb],void 0!==cc)for(ma=0;3>ma;ma++)ec=cc[ma],pc[Db]=ec.u,pc[Db+1]=ec.v,Db+=2;for(F=0,U=oa.length;F<U;F++)if(kb=oa[F],M=Ha[kb],cc=Sc[kb],void 0!==cc)for(ma=0;4>ma;ma++)ec=cc[ma],pc[Db]=ec.u,pc[Db+1]=ec.v,Db+=2;0<Db&&(j.bindBuffer(j.ARRAY_BUFFER,ea.__webglUV2Buffer),j.bufferData(j.ARRAY_BUFFER,pc,bb))}if(ld){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],zb[gb]=Ca,zb[gb+1]=Ca+1,zb[gb+2]=Ca+2,gb+=3,Za[Ra]=
Ca,Za[Ra+1]=Ca+1,Za[Ra+2]=Ca,Za[Ra+3]=Ca+2,Za[Ra+4]=Ca+1,Za[Ra+5]=Ca+2,Ra+=6,Ca+=3;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],zb[gb]=Ca,zb[gb+1]=Ca+1,zb[gb+2]=Ca+3,zb[gb+3]=Ca+1,zb[gb+4]=Ca+2,zb[gb+5]=Ca+3,gb+=6,Za[Ra]=Ca,Za[Ra+1]=Ca+1,Za[Ra+2]=Ca,Za[Ra+3]=Ca+3,Za[Ra+4]=Ca+1,Za[Ra+5]=Ca+2,Za[Ra+6]=Ca+2,Za[Ra+7]=Ca+3,Ra+=8,Ca+=4;j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,ea.__webglFaceBuffer);j.bufferData(j.ELEMENT_ARRAY_BUFFER,zb,bb);j.bindBuffer(j.ELEMENT_ARRAY_BUFFER,ea.__webglLineBuffer);j.bufferData(j.ELEMENT_ARRAY_BUFFER,
Za,bb)}if(Qc)for(ma=0,Zc=Qc.length;ma<Zc;ma++)if(w=Qc[ma],w.__original.needsUpdate){z=0;if(1===w.size)if(void 0===w.boundTo||"vertices"===w.boundTo){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],w.array[z]=w.value[M.a],w.array[z+1]=w.value[M.b],w.array[z+2]=w.value[M.c],z+=3;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],w.array[z]=w.value[M.a],w.array[z+1]=w.value[M.b],w.array[z+2]=w.value[M.c],w.array[z+3]=w.value[M.d],z+=4}else{if("faces"===w.boundTo){for(F=0,U=na.length;F<U;F++)Ya=w.value[na[F]],w.array[z]=
Ya,w.array[z+1]=Ya,w.array[z+2]=Ya,z+=3;for(F=0,U=oa.length;F<U;F++)Ya=w.value[oa[F]],w.array[z]=Ya,w.array[z+1]=Ya,w.array[z+2]=Ya,w.array[z+3]=Ya,z+=4}}else if(2===w.size)if(void 0===w.boundTo||"vertices"===w.boundTo){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],X=w.value[M.a],Y=w.value[M.b],Z=w.value[M.c],w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=Y.x,w.array[z+3]=Y.y,w.array[z+4]=Z.x,w.array[z+5]=Z.y,z+=6;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],X=w.value[M.a],Y=w.value[M.b],Z=w.value[M.c],pa=w.value[M.d],
w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=Y.x,w.array[z+3]=Y.y,w.array[z+4]=Z.x,w.array[z+5]=Z.y,w.array[z+6]=pa.x,w.array[z+7]=pa.y,z+=8}else{if("faces"===w.boundTo){for(F=0,U=na.length;F<U;F++)Z=Y=X=Ya=w.value[na[F]],w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=Y.x,w.array[z+3]=Y.y,w.array[z+4]=Z.x,w.array[z+5]=Z.y,z+=6;for(F=0,U=oa.length;F<U;F++)pa=Z=Y=X=Ya=w.value[oa[F]],w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=Y.x,w.array[z+3]=Y.y,w.array[z+4]=Z.x,w.array[z+5]=Z.y,w.array[z+6]=pa.x,w.array[z+
7]=pa.y,z+=8}}else if(3===w.size){var fa;fa="c"===w.type?["r","g","b"]:["x","y","z"];if(void 0===w.boundTo||"vertices"===w.boundTo){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],X=w.value[M.a],Y=w.value[M.b],Z=w.value[M.c],w.array[z]=X[fa[0]],w.array[z+1]=X[fa[1]],w.array[z+2]=X[fa[2]],w.array[z+3]=Y[fa[0]],w.array[z+4]=Y[fa[1]],w.array[z+5]=Y[fa[2]],w.array[z+6]=Z[fa[0]],w.array[z+7]=Z[fa[1]],w.array[z+8]=Z[fa[2]],z+=9;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],X=w.value[M.a],Y=w.value[M.b],Z=w.value[M.c],
pa=w.value[M.d],w.array[z]=X[fa[0]],w.array[z+1]=X[fa[1]],w.array[z+2]=X[fa[2]],w.array[z+3]=Y[fa[0]],w.array[z+4]=Y[fa[1]],w.array[z+5]=Y[fa[2]],w.array[z+6]=Z[fa[0]],w.array[z+7]=Z[fa[1]],w.array[z+8]=Z[fa[2]],w.array[z+9]=pa[fa[0]],w.array[z+10]=pa[fa[1]],w.array[z+11]=pa[fa[2]],z+=12}else if("faces"===w.boundTo){for(F=0,U=na.length;F<U;F++)Z=Y=X=Ya=w.value[na[F]],w.array[z]=X[fa[0]],w.array[z+1]=X[fa[1]],w.array[z+2]=X[fa[2]],w.array[z+3]=Y[fa[0]],w.array[z+4]=Y[fa[1]],w.array[z+5]=Y[fa[2]],w.array[z+
6]=Z[fa[0]],w.array[z+7]=Z[fa[1]],w.array[z+8]=Z[fa[2]],z+=9;for(F=0,U=oa.length;F<U;F++)pa=Z=Y=X=Ya=w.value[oa[F]],w.array[z]=X[fa[0]],w.array[z+1]=X[fa[1]],w.array[z+2]=X[fa[2]],w.array[z+3]=Y[fa[0]],w.array[z+4]=Y[fa[1]],w.array[z+5]=Y[fa[2]],w.array[z+6]=Z[fa[0]],w.array[z+7]=Z[fa[1]],w.array[z+8]=Z[fa[2]],w.array[z+9]=pa[fa[0]],w.array[z+10]=pa[fa[1]],w.array[z+11]=pa[fa[2]],z+=12}}else if(4===w.size)if(void 0===w.boundTo||"vertices"===w.boundTo){for(F=0,U=na.length;F<U;F++)M=Ha[na[F]],X=w.value[M.a],
Y=w.value[M.b],Z=w.value[M.c],w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=X.z,w.array[z+3]=X.w,w.array[z+4]=Y.x,w.array[z+5]=Y.y,w.array[z+6]=Y.z,w.array[z+7]=Y.w,w.array[z+8]=Z.x,w.array[z+9]=Z.y,w.array[z+10]=Z.z,w.array[z+11]=Z.w,z+=12;for(F=0,U=oa.length;F<U;F++)M=Ha[oa[F]],X=w.value[M.a],Y=w.value[M.b],Z=w.value[M.c],pa=w.value[M.d],w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=X.z,w.array[z+3]=X.w,w.array[z+4]=Y.x,w.array[z+5]=Y.y,w.array[z+6]=Y.z,w.array[z+7]=Y.w,w.array[z+8]=Z.x,w.array[z+
9]=Z.y,w.array[z+10]=Z.z,w.array[z+11]=Z.w,w.array[z+12]=pa.x,w.array[z+13]=pa.y,w.array[z+14]=pa.z,w.array[z+15]=pa.w,z+=16}else if("faces"===w.boundTo){for(F=0,U=na.length;F<U;F++)Z=Y=X=Ya=w.value[na[F]],w.array[z]=X.x,w.array[z+1]=X.y,w.array[z+2]=X.z,w.array[z+3]=X.w,w.array[z+4]=Y.x,w.array[z+5]=Y.y,w.array[z+6]=Y.z,w.array[z+7]=Y.w,w.array[z+8]=Z.x,w.array[z+9]=Z.y,w.array[z+10]=Z.z,w.array[z+11]=Z.w,z+=12;for(F=0,U=oa.length;F<U;F++)pa=Z=Y=X=Ya=w.value[oa[F]],w.array[z]=X.x,w.array[z+1]=X.y,
w.array[z+2]=X.z,w.array[z+3]=X.w,w.array[z+4]=Y.x,w.array[z+5]=Y.y,w.array[z+6]=Y.z,w.array[z+7]=Y.w,w.array[z+8]=Z.x,w.array[z+9]=Z.y,w.array[z+10]=Z.z,w.array[z+11]=Z.w,w.array[z+12]=pa.x,w.array[z+13]=pa.y,w.array[z+14]=pa.z,w.array[z+15]=pa.w,z+=16}j.bindBuffer(j.ARRAY_BUFFER,w.buffer);j.bufferData(j.ARRAY_BUFFER,w.array,bb)}kd&&(delete ea.__inittedArrays,delete ea.__colorArray,delete ea.__normalArray,delete ea.__tangentArray,delete ea.__uvArray,delete ea.__uv2Array,delete ea.__faceArray,delete ea.__vertexArray,
delete ea.__lineArray,delete ea.__skinVertexAArray,delete ea.__skinVertexBArray,delete ea.__skinIndexArray,delete ea.__skinWeightArray)}}ia.__dirtyVertices=!1;ia.__dirtyMorphTargets=!1;ia.__dirtyElements=!1;ia.__dirtyUvs=!1;ia.__dirtyNormals=!1;ia.__dirtyColors=!1;ia.__dirtyTangents=!1;Ua.attributes&&q(Ua)}else if(lb instanceof THREE.Ribbon){if(ia.__dirtyVertices||ia.__dirtyColors){var Rb=ia,bd=j.DYNAMIC_DRAW,qc=void 0,rc=void 0,Bc=void 0,Sb=void 0,Cc=void 0,cd=Rb.vertices,dd=Rb.colors,qd=cd.length,
rd=dd.length,Dc=Rb.__vertexArray,Ec=Rb.__colorArray,sd=Rb.__dirtyColors;if(Rb.__dirtyVertices){for(qc=0;qc<qd;qc++)Bc=cd[qc].position,Sb=3*qc,Dc[Sb]=Bc.x,Dc[Sb+1]=Bc.y,Dc[Sb+2]=Bc.z;j.bindBuffer(j.ARRAY_BUFFER,Rb.__webglVertexBuffer);j.bufferData(j.ARRAY_BUFFER,Dc,bd)}if(sd){for(rc=0;rc<rd;rc++)Cc=dd[rc],Sb=3*rc,Ec[Sb]=Cc.r,Ec[Sb+1]=Cc.g,Ec[Sb+2]=Cc.b;j.bindBuffer(j.ARRAY_BUFFER,Rb.__webglColorBuffer);j.bufferData(j.ARRAY_BUFFER,Ec,bd)}}ia.__dirtyVertices=!1;ia.__dirtyColors=!1}else if(lb instanceof
THREE.Line){Ua=c(lb,jc);$b=Ua.attributes&&n(Ua);if(ia.__dirtyVertices||ia.__dirtyColors||$b){var Eb=ia,Tc=j.DYNAMIC_DRAW,sc=void 0,tc=void 0,Fc=void 0,ya=void 0,Gc=void 0,ed=Eb.vertices,fd=Eb.colors,td=ed.length,ud=fd.length,Hc=Eb.__vertexArray,Ic=Eb.__colorArray,vd=Eb.__dirtyColors,Uc=Eb.__webglCustomAttributesList,Jc=void 0,gd=void 0,Oa=void 0,fc=void 0,Va=void 0,sa=void 0;if(Eb.__dirtyVertices){for(sc=0;sc<td;sc++)Fc=ed[sc].position,ya=3*sc,Hc[ya]=Fc.x,Hc[ya+1]=Fc.y,Hc[ya+2]=Fc.z;j.bindBuffer(j.ARRAY_BUFFER,
Eb.__webglVertexBuffer);j.bufferData(j.ARRAY_BUFFER,Hc,Tc)}if(vd){for(tc=0;tc<ud;tc++)Gc=fd[tc],ya=3*tc,Ic[ya]=Gc.r,Ic[ya+1]=Gc.g,Ic[ya+2]=Gc.b;j.bindBuffer(j.ARRAY_BUFFER,Eb.__webglColorBuffer);j.bufferData(j.ARRAY_BUFFER,Ic,Tc)}if(Uc)for(Jc=0,gd=Uc.length;Jc<gd;Jc++)if(sa=Uc[Jc],sa.needsUpdate&&(void 0===sa.boundTo||"vertices"===sa.boundTo)){ya=0;fc=sa.value.length;if(1===sa.size)for(Oa=0;Oa<fc;Oa++)sa.array[Oa]=sa.value[Oa];else if(2===sa.size)for(Oa=0;Oa<fc;Oa++)Va=sa.value[Oa],sa.array[ya]=Va.x,
sa.array[ya+1]=Va.y,ya+=2;else if(3===sa.size)if("c"===sa.type)for(Oa=0;Oa<fc;Oa++)Va=sa.value[Oa],sa.array[ya]=Va.r,sa.array[ya+1]=Va.g,sa.array[ya+2]=Va.b,ya+=3;else for(Oa=0;Oa<fc;Oa++)Va=sa.value[Oa],sa.array[ya]=Va.x,sa.array[ya+1]=Va.y,sa.array[ya+2]=Va.z,ya+=3;else if(4===sa.size)for(Oa=0;Oa<fc;Oa++)Va=sa.value[Oa],sa.array[ya]=Va.x,sa.array[ya+1]=Va.y,sa.array[ya+2]=Va.z,sa.array[ya+3]=Va.w,ya+=4;j.bindBuffer(j.ARRAY_BUFFER,sa.buffer);j.bufferData(j.ARRAY_BUFFER,sa.array,Tc)}}ia.__dirtyVertices=
!1;ia.__dirtyColors=!1;Ua.attributes&&q(Ua)}else if(lb instanceof THREE.ParticleSystem)Ua=c(lb,jc),$b=Ua.attributes&&n(Ua),(ia.__dirtyVertices||ia.__dirtyColors||lb.sortParticles||$b)&&f(ia,j.DYNAMIC_DRAW,lb),ia.__dirtyVertices=!1,ia.__dirtyColors=!1,Ua.attributes&&q(Ua)}};this.initMaterial=function(a,b,c,d){var e,f,g,h,i;a instanceof THREE.MeshDepthMaterial?i="depth":a instanceof THREE.MeshNormalMaterial?i="normal":a instanceof THREE.MeshBasicMaterial?i="basic":a instanceof THREE.MeshLambertMaterial?
i="lambert":a instanceof THREE.MeshPhongMaterial?i="phong":a instanceof THREE.LineBasicMaterial?i="basic":a instanceof THREE.ParticleBasicMaterial&&(i="particle_basic");if(i){var l=THREE.ShaderLib[i];a.uniforms=THREE.UniformsUtils.clone(l.uniforms);a.vertexShader=l.vertexShader;a.fragmentShader=l.fragmentShader}var k,m;f=l=0;for(k=0,m=b.length;k<m;k++)e=b[k],e.onlyShadow||(e instanceof THREE.DirectionalLight&&f++,e instanceof THREE.PointLight&&l++,e instanceof THREE.SpotLight&&l++);l+f<=L?k=f:(k=
Math.ceil(L*f/(l+f)),l=L-k);e=k;f=l;var n=0;for(l=0,k=b.length;l<k;l++)m=b[l],m.castShadow&&(m instanceof THREE.SpotLight||m instanceof THREE.DirectionalLight)&&n++;var q=50;if(void 0!==d&&d instanceof THREE.SkinnedMesh)q=d.bones.length;var o;a:{k=a.fragmentShader;m=a.vertexShader;var l=a.uniforms,b=a.attributes,c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,morphTargets:a.morphTargets,maxMorphTargets:this.maxMorphTargets,
maxDirLights:e,maxPointLights:f,maxBones:q,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapSoft:this.shadowMapSoft,maxShadows:n,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround},p,d=[];i?d.push(i):(d.push(k),d.push(m));for(p in c)d.push(p),d.push(c[p]);i=d.join();for(p=0,d=W.length;p<d;p++)if(W[p].code===i){o=W[p].program;break a}p=j.createProgram();d=[0<ja?"#define VERTEX_TEXTURES":"",G.gammaInput?"#define GAMMA_INPUT":"",G.gammaOutput?"#define GAMMA_OUTPUT":
"",G.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.vertexColors?"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapSoft?"#define SHADOWMAP_SOFT":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform mat4 cameraInverseMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinVertexA;\nattribute vec4 skinVertexB;\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
e=["precision "+C+" float;","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",G.gammaInput?"#define GAMMA_INPUT":"",G.gammaOutput?"#define GAMMA_OUTPUT":"",G.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fog instanceof THREE.FogExp2?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?
"#define USE_LIGHTMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapSoft?"#define SHADOWMAP_SOFT":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");j.attachShader(p,t("fragment",e+k));j.attachShader(p,t("vertex",d+m));j.linkProgram(p);j.getProgramParameter(p,j.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+
j.getProgramParameter(p,j.VALIDATE_STATUS)+", gl error ["+j.getError()+"]");p.uniforms={};p.attributes={};var r,d="viewMatrix,modelViewMatrix,projectionMatrix,normalMatrix,objectMatrix,cameraPosition,cameraInverseMatrix,boneGlobalMatrices,morphTargetInfluences".split(",");for(r in l)d.push(r);r=d;for(d=0,l=r.length;d<l;d++)k=r[d],p.uniforms[k]=j.getUniformLocation(p,k);d="position,normal,uv,uv2,tangent,color,skinVertexA,skinVertexB,skinIndex,skinWeight".split(",");for(r=0;r<c.maxMorphTargets;r++)d.push("morphTarget"+
r);for(o in b)d.push(o);o=d;for(r=0,b=o.length;r<b;r++)c=o[r],p.attributes[c]=j.getAttribLocation(p,c);p.id=W.length;W.push({program:p,code:i});G.info.memory.programs=W.length;o=p}a.program=o;o=a.program.attributes;0<=o.position&&j.enableVertexAttribArray(o.position);0<=o.color&&j.enableVertexAttribArray(o.color);0<=o.normal&&j.enableVertexAttribArray(o.normal);0<=o.tangent&&j.enableVertexAttribArray(o.tangent);a.skinning&&0<=o.skinVertexA&&0<=o.skinVertexB&&0<=o.skinIndex&&0<=o.skinWeight&&(j.enableVertexAttribArray(o.skinVertexA),
j.enableVertexAttribArray(o.skinVertexB),j.enableVertexAttribArray(o.skinIndex),j.enableVertexAttribArray(o.skinWeight));if(a.attributes)for(h in a.attributes)void 0!==o[h]&&0<=o[h]&&j.enableVertexAttribArray(o[h]);if(a.morphTargets)for(h=a.numSupportedMorphTargets=0;h<this.maxMorphTargets;h++)r="morphTarget"+h,0<=o[r]&&(j.enableVertexAttribArray(o[r]),a.numSupportedMorphTargets++);a.uniformsList=[];for(g in a.uniforms)a.uniformsList.push([a.uniforms[g],g])};this.setFaceCulling=function(a,b){a?(!b||
"ccw"===b?j.frontFace(j.CCW):j.frontFace(j.CW),"back"===a?j.cullFace(j.BACK):"front"===a?j.cullFace(j.FRONT):j.cullFace(j.FRONT_AND_BACK),j.enable(j.CULL_FACE)):j.disable(j.CULL_FACE)};this.setObjectFaces=function(a){if(ga!==a.doubleSided)a.doubleSided?j.disable(j.CULL_FACE):j.enable(j.CULL_FACE),ga=a.doubleSided;if(V!==a.flipSided)a.flipSided?j.frontFace(j.CW):j.frontFace(j.CCW),V=a.flipSided};this.setDepthTest=function(a){ca!==a&&(a?j.enable(j.DEPTH_TEST):j.disable(j.DEPTH_TEST),ca=a)};this.setDepthWrite=
function(a){da!==a&&(j.depthMask(a),da=a)};this.setBlending=function(a){if(a!==ba){switch(a){case THREE.AdditiveBlending:j.blendEquation(j.FUNC_ADD);j.blendFunc(j.SRC_ALPHA,j.ONE);break;case THREE.SubtractiveBlending:j.blendEquation(j.FUNC_ADD);j.blendFunc(j.ZERO,j.ONE_MINUS_SRC_COLOR);break;case THREE.MultiplyBlending:j.blendEquation(j.FUNC_ADD);j.blendFunc(j.ZERO,j.SRC_COLOR);break;default:j.blendEquationSeparate(j.FUNC_ADD,j.FUNC_ADD),j.blendFuncSeparate(j.SRC_ALPHA,j.ONE_MINUS_SRC_ALPHA,j.ONE,
j.ONE_MINUS_SRC_ALPHA)}ba=a}};this.setTexture=function(a,b){if(a.needsUpdate){if(!a.__webglInit)a.__webglInit=!0,a.__webglTexture=j.createTexture(),G.info.memory.textures++;j.activeTexture(j.TEXTURE0+b);j.bindTexture(j.TEXTURE_2D,a.__webglTexture);var c=a.image,d=0===(c.width&c.width-1)&&0===(c.height&c.height-1),e=B(a.format),f=B(a.type);u(j.TEXTURE_2D,a,d);a instanceof THREE.DataTexture?j.texImage2D(j.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data):j.texImage2D(j.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&
d&&j.generateMipmap(j.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdated)a.onUpdated()}else j.activeTexture(j.TEXTURE0+b),j.bindTexture(j.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){if(void 0===a.depthBuffer)a.depthBuffer=!0;if(void 0===a.stencilBuffer)a.stencilBuffer=!0;a.__webglTexture=j.createTexture();var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=B(a.format),e=B(a.type);if(b){a.__webglFramebuffer=
[];a.__webglRenderbuffer=[];j.bindTexture(j.TEXTURE_CUBE_MAP,a.__webglTexture);u(j.TEXTURE_CUBE_MAP,a,c);for(c=0;6>c;c++){a.__webglFramebuffer[c]=j.createFramebuffer();a.__webglRenderbuffer[c]=j.createRenderbuffer();j.texImage2D(j.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,d,a.width,a.height,0,d,e,null);var f=a,g=j.TEXTURE_CUBE_MAP_POSITIVE_X+c;j.bindFramebuffer(j.FRAMEBUFFER,a.__webglFramebuffer[c]);j.framebufferTexture2D(j.FRAMEBUFFER,j.COLOR_ATTACHMENT0,g,f.__webglTexture,0);v(a.__webglRenderbuffer[c],a)}}else a.__webglFramebuffer=
j.createFramebuffer(),a.__webglRenderbuffer=j.createRenderbuffer(),j.bindTexture(j.TEXTURE_2D,a.__webglTexture),u(j.TEXTURE_2D,a,c),j.texImage2D(j.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=j.TEXTURE_2D,j.bindFramebuffer(j.FRAMEBUFFER,a.__webglFramebuffer),j.framebufferTexture2D(j.FRAMEBUFFER,j.COLOR_ATTACHMENT0,d,a.__webglTexture,0),v(a.__webglRenderbuffer,a);b?j.bindTexture(j.TEXTURE_CUBE_MAP,null):j.bindTexture(j.TEXTURE_2D,null);j.bindRenderbuffer(j.RENDERBUFFER,null);j.bindFramebuffer(j.FRAMEBUFFER,
null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,d=a.width,a=a.height,c=e=0):(b=null,d=Da,a=$a,e=Aa,c=Ja);b!==E&&(j.bindFramebuffer(j.FRAMEBUFFER,b),j.viewport(e,c,d,a),E=b);Ta=d;ib=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:THREE.RGBAFormat;this.type=void 0!==c.type?c.type:
THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0};
THREE.WebGLRenderTarget.prototype.clone=function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;return a};THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};
THREE.WebGLRenderTargetCube.prototype=new THREE.WebGLRenderTarget;THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};
THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidWorld=new THREE.Vector3;this.centroidScreen=new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.faceMaterial=this.material=null;this.uvs=[[]];this.z=null};
THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.v4=new THREE.RenderableVertex;this.centroidWorld=new THREE.Vector3;this.centroidScreen=new THREE.Vector3;this.normalWorld=new THREE.Vector3;this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.faceMaterial=this.material=null;this.uvs=[[]];this.z=null};THREE.RenderableObject=function(){this.z=this.object=null};
THREE.RenderableParticle=function(){this.rotation=this.z=this.y=this.x=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.z=null;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.material=null};
THREE.ColorUtils={adjustHSV:function(a,b,c,d){var e=THREE.ColorUtils.__hsv;THREE.ColorUtils.rgbToHsv(a,e);e.h=THREE.Math.clamp(e.h+b,0,1);e.s=THREE.Math.clamp(e.s+c,0,1);e.v=THREE.Math.clamp(e.v+d,0,1);a.setHSV(e.h,e.s,e.v)},rgbToHsv:function(a,b){var c=a.r,d=a.g,e=a.b,f=Math.max(Math.max(c,d),e),g=Math.min(Math.min(c,d),e);if(g===f)g=c=0;else{var h=f-g,g=h/f,c=(c===f?(d-e)/h:d===f?2+(e-c)/h:4+(c-d)/h)/6;0>c&&(c+=1);1<c&&(c-=1)}void 0===b&&(b={h:0,s:0,v:0});b.h=c;b.s=g;b.v=f;return b}};
THREE.ColorUtils.__hsv={h:0,s:0,v:0};
THREE.GeometryUtils={merge:function(a,b){for(var c,d,e=a.vertices.length,f=b instanceof THREE.Mesh?b.geometry:b,g=a.vertices,h=f.vertices,i=a.faces,l=f.faces,k=a.faceVertexUvs[0],n=f.faceVertexUvs[0],q={},o=0;o<a.materials.length;o++)q[a.materials[o].id]=o;if(b instanceof THREE.Mesh)b.matrixAutoUpdate&&b.updateMatrix(),c=b.matrix,d=new THREE.Matrix4,d.extractRotation(c,b.scale);for(var o=0,p=h.length;o<p;o++){var m=new THREE.Vertex(h[o].position.clone());c&&c.multiplyVector3(m.position);g.push(m)}for(o=
0,p=l.length;o<p;o++){var g=l[o],r,s,t=g.vertexNormals,u=g.vertexColors;g instanceof THREE.Face3?r=new THREE.Face3(g.a+e,g.b+e,g.c+e):g instanceof THREE.Face4&&(r=new THREE.Face4(g.a+e,g.b+e,g.c+e,g.d+e));r.normal.copy(g.normal);d&&d.multiplyVector3(r.normal);h=0;for(m=t.length;h<m;h++)s=t[h].clone(),d&&d.multiplyVector3(s),r.vertexNormals.push(s);r.color.copy(g.color);h=0;for(m=u.length;h<m;h++)s=u[h],r.vertexColors.push(s.clone());if(void 0!==g.materialIndex){h=f.materials[g.materialIndex];m=h.id;
u=q[m];if(void 0===u)u=a.materials.length,q[m]=u,a.materials.push(h);r.materialIndex=u}r.centroid.copy(g.centroid);c&&c.multiplyVector3(r.centroid);i.push(r)}for(o=0,p=n.length;o<p;o++){c=n[o];d=[];h=0;for(m=c.length;h<m;h++)d.push(new THREE.UV(c[h].u,c[h].v));k.push(d)}},clone:function(a){var b=new THREE.Geometry,c,d=a.vertices,e=a.faces,f=a.faceVertexUvs[0];if(a.materials)b.materials=a.materials.slice();for(a=0,c=d.length;a<c;a++){var g=new THREE.Vertex(d[a].position.clone());b.vertices.push(g)}for(a=
0,c=e.length;a<c;a++){var h=e[a],i,l,k=h.vertexNormals,n=h.vertexColors;h instanceof THREE.Face3?i=new THREE.Face3(h.a,h.b,h.c):h instanceof THREE.Face4&&(i=new THREE.Face4(h.a,h.b,h.c,h.d));i.normal.copy(h.normal);d=0;for(g=k.length;d<g;d++)l=k[d],i.vertexNormals.push(l.clone());i.color.copy(h.color);d=0;for(g=n.length;d<g;d++)l=n[d],i.vertexColors.push(l.clone());i.materialIndex=h.materialIndex;i.centroid.copy(h.centroid);b.faces.push(i)}for(a=0,c=f.length;a<c;a++){e=f[a];i=[];d=0;for(g=e.length;d<
g;d++)i.push(new THREE.UV(e[d].u,e[d].v));b.faceVertexUvs[0].push(i)}return b},randomPointInTriangle:function(a,b,c){var d,e,f,g=new THREE.Vector3,h=THREE.GeometryUtils.__v1;d=THREE.GeometryUtils.random();e=THREE.GeometryUtils.random();1<d+e&&(d=1-d,e=1-e);f=1-d-e;g.copy(a);g.multiplyScalar(d);h.copy(b);h.multiplyScalar(e);g.addSelf(h);h.copy(c);h.multiplyScalar(f);g.addSelf(h);return g},randomPointInFace:function(a,b,c){var d,e,f;if(a instanceof THREE.Face3)return d=b.vertices[a.a].position,e=b.vertices[a.b].position,
f=b.vertices[a.c].position,THREE.GeometryUtils.randomPointInTriangle(d,e,f);if(a instanceof THREE.Face4){d=b.vertices[a.a].position;e=b.vertices[a.b].position;f=b.vertices[a.c].position;var b=b.vertices[a.d].position,g;c?a._area1&&a._area2?(c=a._area1,g=a._area2):(c=THREE.GeometryUtils.triangleArea(d,e,b),g=THREE.GeometryUtils.triangleArea(e,f,b),a._area1=c,a._area2=g):(c=THREE.GeometryUtils.triangleArea(d,e,b),g=THREE.GeometryUtils.triangleArea(e,f,b));return THREE.GeometryUtils.random()*(c+g)<c?
THREE.GeometryUtils.randomPointInTriangle(d,e,b):THREE.GeometryUtils.randomPointInTriangle(e,f,b)}},randomPointsInGeometry:function(a,b){function c(a){function b(c,d){if(d<c)return c;var e=c+Math.floor((d-c)/2);return l[e]>a?b(c,e-1):l[e]<a?b(e+1,d):e}return b(0,l.length-1)}var d,e,f=a.faces,g=a.vertices,h=f.length,i=0,l=[],k,n,q,o;for(e=0;e<h;e++){d=f[e];if(d instanceof THREE.Face3)k=g[d.a].position,n=g[d.b].position,q=g[d.c].position,d._area=THREE.GeometryUtils.triangleArea(k,n,q);else if(d instanceof
THREE.Face4)k=g[d.a].position,n=g[d.b].position,q=g[d.c].position,o=g[d.d].position,d._area1=THREE.GeometryUtils.triangleArea(k,n,o),d._area2=THREE.GeometryUtils.triangleArea(n,q,o),d._area=d._area1+d._area2;i+=d._area;l[e]=i}d=[];for(e=0;e<b;e++)g=THREE.GeometryUtils.random()*i,g=c(g),d[e]=THREE.GeometryUtils.randomPointInFace(f[g],a,!0);return d},triangleArea:function(a,b,c){var d,e=THREE.GeometryUtils.__v1;e.sub(a,b);d=e.length();e.sub(a,c);a=e.length();e.sub(b,c);c=e.length();b=0.5*(d+a+c);return Math.sqrt(b*
(b-d)*(b-a)*(b-c))},center:function(a){a.computeBoundingBox();var b=a.boundingBox,c=new THREE.Vector3;c.add(b.min,b.max);c.multiplyScalar(-0.5);a.applyMatrix((new THREE.Matrix4).setTranslation(c.x,c.y,c.z));a.computeBoundingBox();return c},normalizeUVs:function(a){for(var a=a.faceVertexUvs[0],b=0,c=a.length;b<c;b++)for(var d=a[b],e=0,f=d.length;e<f;e++)1!==d[e].u&&(d[e].u-=Math.floor(d[e].u)),1!==d[e].v&&(d[e].v-=Math.floor(d[e].v))}};THREE.GeometryUtils.random=THREE.Math.random16;
THREE.GeometryUtils.__v1=new THREE.Vector3;
THREE.ImageUtils={crossOrigin:"",loadTexture:function(a,b,c){var d=new Image,e=new THREE.Texture(d,b);d.onload=function(){e.needsUpdate=!0;c&&c(this)};d.crossOrigin=this.crossOrigin;d.src=a;return e},loadTextureCube:function(a,b,c){var d,e=[],f=new THREE.Texture(e,b);e.loadCount=0;for(b=0,d=a.length;b<d;++b)e[b]=new Image,e[b].onload=function(){e.loadCount+=1;if(6===e.loadCount)f.needsUpdate=!0;c&&c(this)},e[b].crossOrigin="",e[b].src=a[b];return f},getNormalMap:function(a,b){var c=function(a){var b=
Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]},b=b|1,d=a.width,e=a.height,f=document.createElement("canvas");f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(a,0,0);for(var h=g.getImageData(0,0,d,e).data,i=g.createImageData(d,e),l=i.data,k=0;k<d;k++)for(var n=1;n<e;n++){var q=0>n-1?e-1:n-1,o=(n+1)%e,p=0>k-1?d-1:k-1,m=(k+1)%d,r=[],s=[0,0,h[4*(n*d+k)]/255*b];r.push([-1,0,h[4*(n*d+p)]/255*b]);r.push([-1,-1,h[4*(q*d+p)]/255*b]);r.push([0,-1,h[4*(q*d+k)]/255*b]);r.push([1,
-1,h[4*(q*d+m)]/255*b]);r.push([1,0,h[4*(n*d+m)]/255*b]);r.push([1,1,h[4*(o*d+m)]/255*b]);r.push([0,1,h[4*(o*d+k)]/255*b]);r.push([-1,1,h[4*(o*d+p)]/255*b]);q=[];p=r.length;for(o=0;o<p;o++){var m=r[o],t=r[(o+1)%p],m=[m[0]-s[0],m[1]-s[1],m[2]-s[2]],t=[t[0]-s[0],t[1]-s[1],t[2]-s[2]];q.push(c([m[1]*t[2]-m[2]*t[1],m[2]*t[0]-m[0]*t[2],m[0]*t[1]-m[1]*t[0]]))}r=[0,0,0];for(o=0;o<q.length;o++)r[0]+=q[o][0],r[1]+=q[o][1],r[2]+=q[o][2];r[0]/=q.length;r[1]/=q.length;r[2]/=q.length;s=4*(n*d+k);l[s]=255*((r[0]+
1)/2)|0;l[s+1]=255*(r[1]+0.5)|0;l[s+2]=255*r[2]|0;l[s+3]=255}g.putImageData(i,0,0);return f}};
THREE.SceneUtils={showHierarchy:function(a,b){THREE.SceneUtils.traverseHierarchy(a,function(a){a.visible=b})},traverseHierarchy:function(a,b){var c,d,e=a.children.length;for(d=0;d<e;d++)c=a.children[d],b(c),THREE.SceneUtils.traverseHierarchy(c,b)},createMultiMaterialObject:function(a,b){var c,d=b.length,e=new THREE.Object3D;for(c=0;c<d;c++){var f=new THREE.Mesh(a,b[c]);e.add(f)}return e},cloneObject:function(a){var b;a instanceof THREE.MorphAnimMesh?(b=new THREE.MorphAnimMesh(a.geometry,a.material),
b.duration=a.duration,b.mirroredLoop=a.mirroredLoop,b.time=a.time,b.lastKeyframe=a.lastKeyframe,b.currentKeyframe=a.currentKeyframe,b.direction=a.direction,b.directionBackwards=a.directionBackwards):a instanceof THREE.SkinnedMesh?b=new THREE.SkinnedMesh(a.geometry,a.material):a instanceof THREE.Mesh?b=new THREE.Mesh(a.geometry,a.material):a instanceof THREE.Line?b=new THREE.Line(a.geometry,a.material,a.type):a instanceof THREE.Ribbon?b=new THREE.Ribbon(a.geometry,a.material):a instanceof THREE.ParticleSystem?
(b=new THREE.ParticleSystem(a.geometry,a.material),b.sortParticles=a.sortParticles):a instanceof THREE.Particle?b=new THREE.Particle(a.material):a instanceof THREE.Sprite?(b=new THREE.Sprite({}),b.color.copy(a.color),b.map=a.map,b.blending=a.blending,b.useScreenCoordinates=a.useScreenCoordinates,b.mergeWith3D=a.mergeWith3D,b.affectedByDistance=a.affectedByDistance,b.scaleByViewport=a.scaleByViewport,b.alignment=a.alignment,b.rotation3d.copy(a.rotation3d),b.rotation=a.rotation,b.opacity=a.opacity,
b.uvOffset.copy(a.uvOffset),b.uvScale.copy(a.uvScale)):a instanceof THREE.LOD?b=new THREE.LOD:a instanceof THREE.MarchingCubes?(b=new THREE.MarchingCubes(a.resolution,a.material),b.field.set(a.field),b.isolation=a.isolation):a instanceof THREE.Object3D&&(b=new THREE.Object3D);b.name=a.name;b.parent=a.parent;b.up.copy(a.up);b.position.copy(a.position);b.rotation instanceof THREE.Vector3&&b.rotation.copy(a.rotation);b.eulerOrder=a.eulerOrder;b.scale.copy(a.scale);b.dynamic=a.dynamic;b.doubleSided=a.doubleSided;
b.flipSided=a.flipSided;b.renderDepth=a.renderDepth;b.rotationAutoUpdate=a.rotationAutoUpdate;b.matrix.copy(a.matrix);b.matrixWorld.copy(a.matrixWorld);b.matrixRotationWorld.copy(a.matrixRotationWorld);b.matrixAutoUpdate=a.matrixAutoUpdate;b.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;b.quaternion.copy(a.quaternion);b.useQuaternion=a.useQuaternion;b.boundRadius=a.boundRadius;b.boundRadiusScale=a.boundRadiusScale;b.visible=a.visible;b.castShadow=a.castShadow;b.receiveShadow=a.receiveShadow;b.frustumCulled=
a.frustumCulled;for(var c=0;c<a.children.length;c++){var d=THREE.SceneUtils.cloneObject(a.children[c]);b.children[c]=d;d.parent=b}if(a instanceof THREE.LOD)for(c=0;c<a.LODs.length;c++)b.LODs[c]={visibleAtDistance:a.LODs[c].visibleAtDistance,object3D:b.children[c]};return b}};
if(THREE.WebGLRenderer)THREE.ShaderUtils={lib:{fresnel:{uniforms:{mRefractionRatio:{type:"f",value:1.02},mFresnelBias:{type:"f",value:0.1},mFresnelPower:{type:"f",value:2},mFresnelScale:{type:"f",value:1},tCube:{type:"t",value:1,texture:null}},fragmentShader:"uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\nrefractedColor.a = 1.0;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}",
vertexShader:"uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = normalize ( mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal );\nvec3 I = mPosition.xyz - cameraPosition;\nvReflect = reflect( I, nWorld );\nvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}"},
normal:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},tDiffuse:{type:"t",value:0,texture:null},tCube:{type:"t",value:1,texture:null},tNormal:{type:"t",value:2,texture:null},tSpecular:{type:"t",value:3,texture:null},tAO:{type:"t",value:4,texture:null},tDisplacement:{type:"t",value:5,texture:null},uNormalScale:{type:"f",
value:1},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(15658734)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(328965)},uShininess:{type:"f",value:30},uOpacity:{type:"f",value:1},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform float uNormalScale;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec3 pointVector = normalize( vPointLight[ i ].xyz );\nfloat pointDistance = vPointLight[ i ].w;\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor) + totalSpecular;\nif ( enableReflection ) {\nvec3 wPos = cameraPosition - vViewPosition;\nvec3 vReflect = reflect( normalize( wPos ), normal );\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvViewPosition = -mvPosition.xyz;\nvNormal = normalMatrix * normal;\nvTangent = normalMatrix * tangent.xyz;\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvUv = uv * uRepeat + uOffset;\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#ifdef VERTEX_TEXTURES\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\nvec4 displacedPosition = vec4( normalize( vNormal.xyz ) * df, 0.0 ) + mvPosition;\ngl_Position = projectionMatrix * displacedPosition;\n#else\ngl_Position = projectionMatrix * mvPosition;\n#endif",
THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")},cube:{uniforms:{tCube:{type:"t",value:1,texture:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 wPos = cameraPosition - vViewPosition;\ngl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );\n}"}}};
THREE.BufferGeometry=function(){this.id=THREE.GeometryCount++;this.vertexColorArray=this.vertexUvArray=this.vertexNormalArray=this.vertexPositionArray=this.vertexIndexArray=this.vertexColorBuffer=this.vertexUvBuffer=this.vertexNormalBuffer=this.vertexPositionBuffer=this.vertexIndexBuffer=null;this.dynamic=!1;this.boundingSphere=this.boundingBox=null;this.morphTargets=[]};THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,computeBoundingBox:function(){},computeBoundingSphere:function(){}};
THREE.Curve=function(){};THREE.Curve.prototype.getPoint=function(){console.log("Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(a){return this.getPoint(this.getUtoTmapping(a))};THREE.Curve.prototype.getPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c};THREE.Curve.prototype.getSpacedPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c};
THREE.Curve.prototype.getLength=function(){var a=this.getLengths();return a[a.length-1]};THREE.Curve.prototype.getLengths=function(a){a||(a=200);if(this.cacheArcLengths&&this.cacheArcLengths.length==a+1)return this.cacheArcLengths;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b};
THREE.Curve.prototype.getUtoTmapping=function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-1,i;g<=h;)if(d=Math.floor(g+(h-g)/2),i=c[d]-f,0>i)g=d+1;else if(0<i)h=d-1;else{h=d;break}d=h;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getNormalVector=function(a){a=this.getTangent(a);return new THREE.Vector2(-a.y,a.x)};
THREE.Curve.prototype.getTangent=function(a){var b=a-1.0E-4,a=a+1.0E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);a=this.getPoint(a);return b.clone().subSelf(a).normalize()};THREE.Curve.prototype.getTangentAt=function(a){return this.getTangent(this.getUtoTmapping(a))};THREE.LineCurve=function(a,b){a instanceof THREE.Vector2?(this.v1=a,this.v2=b):THREE.LineCurve.oldConstructor.apply(this,arguments)};
THREE.LineCurve.oldConstructor=function(a,b,c,d){this.constructor(new THREE.Vector2(a,b),new THREE.Vector2(c,d))};THREE.LineCurve.prototype=new THREE.Curve;THREE.LineCurve.prototype.constructor=THREE.LineCurve;THREE.LineCurve.prototype.getPoint=function(a){var b=new THREE.Vector2;b.sub(this.v2,this.v1);b.multiplyScalar(a).addSelf(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};
THREE.LineCurve.prototype.getTangent=function(){var a=new THREE.Vector2;a.sub(this.v2,this.v1);a.normalize();return a};THREE.QuadraticBezierCurve=function(a,b,c){if(!(b instanceof THREE.Vector2))var d=Array.prototype.slice.call(arguments),a=new THREE.Vector2(d[0],d[1]),b=new THREE.Vector2(d[2],d[3]),c=new THREE.Vector2(d[4],d[5]);this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=new THREE.Curve;THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);return new THREE.Vector2(b,a)};THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.y,this.v1.y,this.v2.y);b=new THREE.Vector2(b,a);b.normalize();return b};
THREE.CubicBezierCurve=function(a,b,c,d){if(!(b instanceof THREE.Vector2))var e=Array.prototype.slice.call(arguments),a=new THREE.Vector2(e[0],e[1]),b=new THREE.Vector2(e[2],e[3]),c=new THREE.Vector2(e[4],e[5]),d=new THREE.Vector2(e[6],e[7]);this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=new THREE.Curve;THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve;
THREE.CubicBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(b,a)};THREE.CubicBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=new THREE.Vector2(b,a);b.normalize();return b};
THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};THREE.SplineCurve.prototype=new THREE.Curve;THREE.SplineCurve.prototype.constructor=THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint=function(a){var b=new THREE.Vector2,c=[],d=this.points,e;e=(d.length-1)*a;a=Math.floor(e);e-=a;c[0]=0==a?a:a-1;c[1]=a;c[2]=a>d.length-2?a:a+1;c[3]=a>d.length-3?a:a+2;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);return b};THREE.ArcCurve=function(a,b,c,d,e,f){this.aX=a;this.aY=b;this.aRadius=c;this.aStartAngle=d;this.aEndAngle=e;this.aClockwise=f};
THREE.ArcCurve.prototype=new THREE.Curve;THREE.ArcCurve.prototype.constructor=THREE.ArcCurve;THREE.ArcCurve.prototype.getPoint=function(a){var b=this.aEndAngle-this.aStartAngle;this.aClockwise||(a=1-a);b=this.aStartAngle+a*b;a=this.aX+this.aRadius*Math.cos(b);b=this.aY+this.aRadius*Math.sin(b);return new THREE.Vector2(a,b)};
THREE.Curve.Utils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){var a=0.5*(c-a),d=0.5*(d-b),f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};
THREE.Curve.create=function(a,b){a.prototype=new THREE.Curve;a.prototype.constructor=a;a.prototype.getPoint=b;return a};THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.sub(this.v2,this.v1);b.multiplyScalar(a);b.addSelf(this.v1);return b});
THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b,c;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);c=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);a=THREE.Shape.Utils.b2(a,this.v0.z,this.v1.z,this.v2.z);return new THREE.Vector3(b,c,a)});
THREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b,c;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);c=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);a=THREE.Shape.Utils.b3(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return new THREE.Vector3(b,c,a)});
THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;e=(d.length-1)*a;a=Math.floor(e);e-=a;c[0]=0==a?a:a-1;c[1]=a;c[2]=a>d.length-2?a:a+1;c[3]=a>d.length-3?a:a+2;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);b.z=THREE.Curve.Utils.interpolate(d[c[0]].z,d[c[1]].z,d[c[2]].z,d[c[3]].z,e);return b});
THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=new THREE.Curve;THREE.CurvePath.prototype.constructor=THREE.CurvePath;THREE.CurvePath.prototype.add=function(a){this.curves.push(a)};THREE.CurvePath.prototype.checkConnection=function(){};THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))};
THREE.CurvePath.prototype.getPoint=function(a){for(var b=a*this.getLength(),c=this.getCurveLengths(),a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],b=1-b/a.getLength(),a.getPointAt(b);a++}return null};THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var a=[],b=0,c,d=this.curves.length;for(c=0;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a};
THREE.CurvePath.prototype.getBoundingBox=function(){var a=this.getPoints(),b,c,d,e;b=c=Number.NEGATIVE_INFINITY;d=e=Number.POSITIVE_INFINITY;var f,g,h,i;i=new THREE.Vector2;for(g=0,h=a.length;g<h;g++){f=a[g];if(f.x>b)b=f.x;else if(f.x<d)d=f.x;if(f.y>c)c=f.y;else if(f.y<c)e=f.y;i.addSelf(f.x,f.y)}return{minX:d,minY:e,maxX:b,maxY:c,centroid:i.divideScalar(h)}};THREE.CurvePath.prototype.createPointsGeometry=function(a){return this.createGeometry(this.getPoints(a,!0))};
THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){return this.createGeometry(this.getSpacedPoints(a,!0))};THREE.CurvePath.prototype.createGeometry=function(a){for(var b=new THREE.Geometry,c=0;c<a.length;c++)b.vertices.push(new THREE.Vertex(new THREE.Vector3(a[c].x,a[c].y,0)));return b};THREE.CurvePath.prototype.addWrapPath=function(a){this.bends.push(a)};
THREE.CurvePath.prototype.getTransformedPoints=function(a,b){var c=this.getPoints(a),d,e;if(!b)b=this.bends;for(d=0,e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(a,b){var c=this.getSpacedPoints(a),d,e;if(!b)b=this.bends;for(d=0,e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(a,b){var c=this.getBoundingBox(),d,e,f,g,h,i;for(d=0,e=a.length;d<e;d++)f=a[d],g=f.x,h=f.y,i=g/c.maxX,i=b.getUtoTmapping(i,g),g=b.getPoint(i),h=b.getNormalVector(i).multiplyScalar(h),f.x=g.x+h.x,f.y=g.y+h.y;return a};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=new THREE.Object3D;THREE.Gyroscope.prototype.constructor=THREE.Gyroscope;
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=
!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;
THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};THREE.Path.prototype=new THREE.CurvePath;THREE.Path.prototype.constructor=THREE.Path;THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc"};THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)};
THREE.Path.prototype.moveTo=function(a,b){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};THREE.Path.prototype.lineTo=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args;this.curves.push(new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(a,b)));this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(a,b,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args;this.curves.push(new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d)));this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments),h=this.actions[this.actions.length-1].args;this.curves.push(new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length-2],h[h.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),new THREE.Vector2(e,f)));this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);this.curves.push(new THREE.SplineCurve(c));this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:b})};
THREE.Path.prototype.arc=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments);this.curves.push(new THREE.ArcCurve(a,b,c,d,e,f));this.actions.push({action:THREE.PathActions.ARC,args:g})};THREE.Path.prototype.getSpacedPoints=function(a){a||(a=40);for(var b=[],c=0;c<a;c++)b.push(this.getPoint(c/a));return b};
THREE.Path.prototype.getPoints=function(a,b){var a=a||12,c=[],d,e,f,g,h,i,l,k,n,q,o,p,m;for(d=0,e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:h=f[2];i=f[3];n=f[0];q=f[1];0<c.length?(g=c[c.length-1],o=g.x,p=g.y):(g=this.actions[d-1].args,o=g[g.length-2],p=g[g.length-1]);for(g=1;g<=a;g++)m=g/a,f=THREE.Shape.Utils.b2(m,o,n,h),m=THREE.Shape.Utils.b2(m,p,q,
i),c.push(new THREE.Vector2(f,m));break;case THREE.PathActions.BEZIER_CURVE_TO:h=f[4];i=f[5];n=f[0];q=f[1];l=f[2];k=f[3];0<c.length?(g=c[c.length-1],o=g.x,p=g.y):(g=this.actions[d-1].args,o=g[g.length-2],p=g[g.length-1]);for(g=1;g<=a;g++)m=g/a,f=THREE.Shape.Utils.b3(m,o,n,l,h),m=THREE.Shape.Utils.b3(m,p,q,k,i),c.push(new THREE.Vector2(f,m));break;case THREE.PathActions.CSPLINE_THRU:g=this.actions[d-1].args;g=[new THREE.Vector2(g[g.length-2],g[g.length-1])];m=a*f[0].length;g=g.concat(f[0]);f=new THREE.SplineCurve(g);
for(g=1;g<=m;g++)c.push(f.getPointAt(g/m));break;case THREE.PathActions.ARC:g=this.actions[d-1].args;h=f[0];i=f[1];l=f[2];n=f[3];m=f[4];q=!!f[5];k=g[g.length-2];o=g[g.length-1];0==g.length&&(k=o=0);p=m-n;var r=2*a;for(g=1;g<=r;g++)m=g/r,q||(m=1-m),m=n+m*p,f=k+h+l*Math.cos(m),m=o+i+l*Math.sin(m),c.push(new THREE.Vector2(f,m))}b&&c.push(c[0]);return c};THREE.Path.prototype.transform=function(a,b){this.getBoundingBox();return this.getWrapPoints(this.getPoints(b),a)};
THREE.Path.prototype.nltransform=function(a,b,c,d,e,f){var g=this.getPoints(),h,i,l,k,n;for(h=0,i=g.length;h<i;h++)l=g[h],k=l.x,n=l.y,l.x=a*k+b*n+c,l.y=d*n+e*k+f;return g};
THREE.Path.prototype.debug=function(a){var b=this.getBoundingBox();a||(a=document.createElement("canvas"),a.setAttribute("width",b.maxX+100),a.setAttribute("height",b.maxY+100),document.body.appendChild(a));b=a.getContext("2d");b.fillStyle="white";b.fillRect(0,0,a.width,a.height);b.strokeStyle="black";b.beginPath();var c,d,e;for(a=0,c=this.actions.length;a<c;a++)d=this.actions[a],e=d.args,d=d.action,d!=THREE.PathActions.CSPLINE_THRU&&b[d].apply(b,e);b.stroke();b.closePath();b.strokeStyle="red";d=
this.getPoints();for(a=0,c=d.length;a<c;a++)e=d[a],b.beginPath(),b.arc(e.x,e.y,1.5,0,2*Math.PI,!1),b.stroke(),b.closePath()};
THREE.Path.prototype.toShapes=function(){var a,b,c,d,e=[],f=new THREE.Path;for(a=0,b=this.actions.length;a<b;a++)c=this.actions[a],d=c.args,c=c.action,c==THREE.PathActions.MOVE_TO&&0!=f.actions.length&&(e.push(f),f=new THREE.Path),f[c].apply(f,d);0!=f.actions.length&&e.push(f);if(0==e.length)return[];var g;d=[];a=!THREE.Shape.Utils.isClockWise(e[0].getPoints());if(1==e.length)return f=e[0],g=new THREE.Shape,g.actions=f.actions,g.curves=f.curves,d.push(g),d;if(a){g=new THREE.Shape;for(a=0,b=e.length;a<
b;a++)f=e[a],THREE.Shape.Utils.isClockWise(f.getPoints())?(g.actions=f.actions,g.curves=f.curves,d.push(g),g=new THREE.Shape):g.holes.push(f)}else{for(a=0,b=e.length;a<b;a++)f=e[a],THREE.Shape.Utils.isClockWise(f.getPoints())?(g&&d.push(g),g=new THREE.Shape,g.actions=f.actions,g.curves=f.curves):g.holes.push(f);d.push(g)}return d};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=new THREE.Path;THREE.Shape.prototype.constructor=THREE.Path;
THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)};THREE.Shape.prototype.getPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedPoints(a,this.bends);return d};THREE.Shape.prototype.getSpacedPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedSpacedPoints(a,this.bends);return d};
THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getTransformedPoints(a),holes:this.getPointsHoles(a)}};THREE.Shape.prototype.extractAllSpacedPoints=function(a){return{shape:this.getTransformedSpacedPoints(a),holes:this.getSpacedPointsHoles(a)}};
THREE.Shape.Utils={removeHoles:function(a,b){var c=a.concat(),d=c.concat(),e,f,g,h,i,l,k,n,q,o,p=[];for(i=0;i<b.length;i++){l=b[i];Array.prototype.push.apply(d,l);f=Number.POSITIVE_INFINITY;for(e=0;e<l.length;e++){q=l[e];o=[];for(n=0;n<c.length;n++)k=c[n],k=q.distanceToSquared(k),o.push(k),k<f&&(f=k,g=e,h=n)}e=0<=h-1?h-1:c.length-1;f=0<=g-1?g-1:l.length-1;var m=[l[g],c[h],c[e]];n=THREE.FontUtils.Triangulate.area(m);var r=[l[g],l[f],c[h]];q=THREE.FontUtils.Triangulate.area(r);o=h;k=g;h+=1;g+=-1;0>
h&&(h+=c.length);h%=c.length;0>g&&(g+=l.length);g%=l.length;e=0<=h-1?h-1:c.length-1;f=0<=g-1?g-1:l.length-1;m=[l[g],c[h],c[e]];m=THREE.FontUtils.Triangulate.area(m);r=[l[g],l[f],c[h]];r=THREE.FontUtils.Triangulate.area(r);n+q>m+r&&(h=o,g=k,0>h&&(h+=c.length),h%=c.length,0>g&&(g+=l.length),g%=l.length,e=0<=h-1?h-1:c.length-1,f=0<=g-1?g-1:l.length-1);n=c.slice(0,h);q=c.slice(h);o=l.slice(g);k=l.slice(0,g);f=[l[g],l[f],c[h]];p.push([l[g],c[h],c[e]]);p.push(f);c=n.concat(o).concat(k).concat(q)}return{shape:c,
isolatedPts:p,allpoints:d}},triangulateShape:function(a,b){var c=THREE.Shape.Utils.removeHoles(a,b),d=c.allpoints,e=c.isolatedPts,c=THREE.FontUtils.Triangulate(c.shape,!1),f,g,h,i,l={};for(f=0,g=d.length;f<g;f++)i=d[f].x+":"+d[f].y,void 0!==l[i]&&console.log("Duplicate point",i),l[i]=f;for(f=0,g=c.length;f<g;f++){h=c[f];for(d=0;3>d;d++)i=h[d].x+":"+h[d].y,i=l[i],void 0!==i&&(h[d]=i)}for(f=0,g=e.length;f<g;f++){h=e[f];for(d=0;3>d;d++)i=h[d].x+":"+h[d].y,i=l[i],void 0!==i&&(h[d]=i)}return c.concat(e)},
isClockWise:function(a){return 0>THREE.FontUtils.Triangulate.area(a)},b2p0:function(a,b){var c=1-a;return c*c*b},b2p1:function(a,b){return 2*(1-a)*a*b},b2p2:function(a,b){return a*a*b},b2:function(a,b,c,d){return this.b2p0(a,b)+this.b2p1(a,c)+this.b2p2(a,d)},b3p0:function(a,b){var c=1-a;return c*c*c*b},b3p1:function(a,b){var c=1-a;return 3*c*c*a*b},b3p2:function(a,b){return 3*(1-a)*a*a*b},b3p3:function(a,b){return a*a*a*b},b3:function(a,b,c,d,e){return this.b3p0(a,b)+this.b3p1(a,c)+this.b3p2(a,d)+
this.b3p3(a,e)}};THREE.TextPath=function(a,b){THREE.Path.call(this);this.parameters=b||{};this.set(a)};THREE.TextPath.prototype.set=function(a,b){b=b||this.parameters;this.text=a;var c=void 0!==b.curveSegments?b.curveSegments:4,d=void 0!==b.font?b.font:"helvetiker",e=void 0!==b.weight?b.weight:"normal",f=void 0!==b.style?b.style:"normal";THREE.FontUtils.size=void 0!==b.size?b.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f};
THREE.TextPath.prototype.toShapes=function(){for(var a=THREE.FontUtils.drawText(this.text).paths,b=[],c=0,d=a.length;c<d;c++)Array.prototype.push.apply(b,a[c].toShapes());return b};
THREE.AnimationHandler=function(){var a=[],b={},c={update:function(b){for(var c=0;c<a.length;c++)a[c].update(b)},addToUpdate:function(b){-1===a.indexOf(b)&&a.push(b)},removeFromUpdate:function(b){b=a.indexOf(b);-1!==b&&a.splice(b,1)},add:function(a){void 0!==b[a.name]&&console.log("THREE.AnimationHandler.add: Warning! "+a.name+" already exists in library. Overwriting.");b[a.name]=a;if(!0!==a.initialized){for(var c=0;c<a.hierarchy.length;c++){for(var d=0;d<a.hierarchy[c].keys.length;d++){if(0>a.hierarchy[c].keys[d].time)a.hierarchy[c].keys[d].time=
0;if(void 0!==a.hierarchy[c].keys[d].rot&&!(a.hierarchy[c].keys[d].rot instanceof THREE.Quaternion)){var h=a.hierarchy[c].keys[d].rot;a.hierarchy[c].keys[d].rot=new THREE.Quaternion(h[0],h[1],h[2],h[3])}}if(a.hierarchy[c].keys.length&&void 0!==a.hierarchy[c].keys[0].morphTargets){h={};for(d=0;d<a.hierarchy[c].keys.length;d++)for(var i=0;i<a.hierarchy[c].keys[d].morphTargets.length;i++){var l=a.hierarchy[c].keys[d].morphTargets[i];h[l]=-1}a.hierarchy[c].usedMorphTargets=h;for(d=0;d<a.hierarchy[c].keys.length;d++){var k=
{};for(l in h){for(i=0;i<a.hierarchy[c].keys[d].morphTargets.length;i++)if(a.hierarchy[c].keys[d].morphTargets[i]===l){k[l]=a.hierarchy[c].keys[d].morphTargetsInfluences[i];break}i===a.hierarchy[c].keys[d].morphTargets.length&&(k[l]=0)}a.hierarchy[c].keys[d].morphTargetsInfluences=k}}for(d=1;d<a.hierarchy[c].keys.length;d++)a.hierarchy[c].keys[d].time===a.hierarchy[c].keys[d-1].time&&(a.hierarchy[c].keys.splice(d,1),d--);for(d=0;d<a.hierarchy[c].keys.length;d++)a.hierarchy[c].keys[d].index=d}d=parseInt(a.length*
a.fps,10);a.JIT={};a.JIT.hierarchy=[];for(c=0;c<a.hierarchy.length;c++)a.JIT.hierarchy.push(Array(d));a.initialized=!0}},get:function(a){if("string"===typeof a){if(b[a])return b[a];console.log("THREE.AnimationHandler.get: Couldn't find animation "+a);return null}},parse:function(a){var b=[];if(a instanceof THREE.SkinnedMesh)for(var c=0;c<a.bones.length;c++)b.push(a.bones[c]);else d(a,b);return b}},d=function(a,b){b.push(a);for(var c=0;c<a.children.length;c++)d(a.children[c],b)};c.LINEAR=0;c.CATMULLROM=
1;c.CATMULLROM_FORWARD=2;return c}();THREE.Animation=function(a,b,c,d){this.root=a;this.data=THREE.AnimationHandler.get(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=this.isPaused=!0;this.interpolationType=void 0!==c?c:THREE.AnimationHandler.LINEAR;this.JITCompile=void 0!==d?d:!0;this.points=[];this.target=new THREE.Vector3};
THREE.Animation.prototype.play=function(a,b){if(!this.isPlaying){this.isPlaying=!0;this.loop=void 0!==a?a:!0;this.currentTime=void 0!==b?b:0;var c,d=this.hierarchy.length,e;for(c=0;c<d;c++){e=this.hierarchy[c];if(this.interpolationType!==THREE.AnimationHandler.CATMULLROM_FORWARD)e.useQuaternion=!0;e.matrixAutoUpdate=!0;if(void 0===e.animationCache)e.animationCache={},e.animationCache.prevKey={pos:0,rot:0,scl:0},e.animationCache.nextKey={pos:0,rot:0,scl:0},e.animationCache.originalMatrix=e instanceof
THREE.Bone?e.skinMatrix:e.matrix;var f=e.animationCache.prevKey;e=e.animationCache.nextKey;f.pos=this.data.hierarchy[c].keys[0];f.rot=this.data.hierarchy[c].keys[0];f.scl=this.data.hierarchy[c].keys[0];e.pos=this.getNextKeyWith("pos",c,1);e.rot=this.getNextKeyWith("rot",c,1);e.scl=this.getNextKeyWith("scl",c,1)}this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};
THREE.Animation.prototype.pause=function(){this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};
THREE.Animation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this);for(var a=0;a<this.hierarchy.length;a++)if(void 0!==this.hierarchy[a].animationCache)this.hierarchy[a]instanceof THREE.Bone?this.hierarchy[a].skinMatrix=this.hierarchy[a].animationCache.originalMatrix:this.hierarchy[a].matrix=this.hierarchy[a].animationCache.originalMatrix,delete this.hierarchy[a].animationCache};
THREE.Animation.prototype.update=function(a){if(this.isPlaying){var b=["pos","rot","scl"],c,d,e,f,g,h,i,l,k=this.data.JIT.hierarchy,n,q;q=this.currentTime+=a*this.timeScale;n=this.currentTime%=this.data.length;l=parseInt(Math.min(n*this.data.fps,this.data.length*this.data.fps),10);for(var o=0,p=this.hierarchy.length;o<p;o++)if(a=this.hierarchy[o],i=a.animationCache,this.JITCompile&&void 0!==k[o][l])a instanceof THREE.Bone?(a.skinMatrix=k[o][l],a.matrixAutoUpdate=!1,a.matrixWorldNeedsUpdate=!1):(a.matrix=
k[o][l],a.matrixAutoUpdate=!1,a.matrixWorldNeedsUpdate=!0);else{if(this.JITCompile)a instanceof THREE.Bone?a.skinMatrix=a.animationCache.originalMatrix:a.matrix=a.animationCache.originalMatrix;for(var m=0;3>m;m++){c=b[m];g=i.prevKey[c];h=i.nextKey[c];if(h.time<=q){if(n<q)if(this.loop){g=this.data.hierarchy[o].keys[0];for(h=this.getNextKeyWith(c,o,1);h.time<n;)g=h,h=this.getNextKeyWith(c,o,h.index+1)}else{this.stop();return}else{do g=h,h=this.getNextKeyWith(c,o,h.index+1);while(h.time<n)}i.prevKey[c]=
g;i.nextKey[c]=h}a.matrixAutoUpdate=!0;a.matrixWorldNeedsUpdate=!0;d=(n-g.time)/(h.time-g.time);e=g[c];f=h[c];if(0>d||1<d)console.log("THREE.Animation.update: Warning! Scale out of bounds:"+d+" on bone "+o),d=0>d?0:1;if("pos"===c)if(c=a.position,this.interpolationType===THREE.AnimationHandler.LINEAR)c.x=e[0]+(f[0]-e[0])*d,c.y=e[1]+(f[1]-e[1])*d,c.z=e[2]+(f[2]-e[2])*d;else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)if(this.points[0]=
this.getPrevKeyWith("pos",o,g.index-1).pos,this.points[1]=e,this.points[2]=f,this.points[3]=this.getNextKeyWith("pos",o,h.index+1).pos,d=0.33*d+0.33,e=this.interpolateCatmullRom(this.points,d),c.x=e[0],c.y=e[1],c.z=e[2],this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)d=this.interpolateCatmullRom(this.points,1.01*d),this.target.set(d[0],d[1],d[2]),this.target.subSelf(c),this.target.y=0,this.target.normalize(),d=Math.atan2(this.target.x,this.target.z),a.rotation.set(0,d,0)}else if("rot"===
c)THREE.Quaternion.slerp(e,f,a.quaternion,d);else if("scl"===c)c=a.scale,c.x=e[0]+(f[0]-e[0])*d,c.y=e[1]+(f[1]-e[1])*d,c.z=e[2]+(f[2]-e[2])*d}}if(this.JITCompile&&void 0===k[0][l]){this.hierarchy[0].updateMatrixWorld(!0);for(o=0;o<this.hierarchy.length;o++)k[o][l]=this.hierarchy[o]instanceof THREE.Bone?this.hierarchy[o].skinMatrix.clone():this.hierarchy[o].matrix.clone()}}};
THREE.Animation.prototype.interpolateCatmullRom=function(a,b){var c=[],d=[],e,f,g,h,i,l;e=(a.length-1)*b;f=Math.floor(e);e-=f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>a.length-2?f:f+1;c[3]=f>a.length-3?f:f+2;f=a[c[0]];h=a[c[1]];i=a[c[2]];l=a[c[3]];c=e*e;g=e*c;d[0]=this.interpolate(f[0],h[0],i[0],l[0],e,c,g);d[1]=this.interpolate(f[1],h[1],i[1],l[1],e,c,g);d[2]=this.interpolate(f[2],h[2],i[2],l[2],e,c,g);return d};
THREE.Animation.prototype.interpolate=function(a,b,c,d,e,f,g){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b};THREE.Animation.prototype.getNextKeyWith=function(a,b,c){for(var d=this.data.hierarchy[b].keys,c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[0]};
THREE.Animation.prototype.getPrevKeyWith=function(a,b,c){for(var d=this.data.hierarchy[b].keys,c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[d.length-1]};
THREE.KeyFrameAnimation=function(a,b,c){this.root=a;this.data=THREE.AnimationHandler.get(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=0.001;this.isPlaying=!1;this.loop=this.isPaused=!0;this.JITCompile=void 0!==c?c:!0;a=0;for(b=this.hierarchy.length;a<b;a++){var c=this.data.hierarchy[a].sids,d=this.hierarchy[a];if(this.data.hierarchy[a].keys.length&&c){for(var e=0;e<c.length;e++){var f=c[e],g=this.getNextKeyWith(f,a,0);g&&g.apply(f)}d.matrixAutoUpdate=!1;this.data.hierarchy[a].node.updateMatrix();
d.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype.play=function(a,b){if(!this.isPlaying){this.isPlaying=!0;this.loop=void 0!==a?a:!0;this.currentTime=void 0!==b?b:0;this.startTimeMs=b;this.startTime=1E7;this.endTime=-this.startTime;var c,d=this.hierarchy.length,e,f;for(c=0;c<d;c++){e=this.hierarchy[c];f=this.data.hierarchy[c];e.useQuaternion=!0;if(void 0===f.animationCache)f.animationCache={},f.animationCache.prevKey=null,f.animationCache.nextKey=null,f.animationCache.originalMatrix=e instanceof THREE.Bone?e.skinMatrix:
e.matrix;e=this.data.hierarchy[c].keys;if(e.length)f.animationCache.prevKey=e[0],f.animationCache.nextKey=e[1],this.startTime=Math.min(e[0].time,this.startTime),this.endTime=Math.max(e[e.length-1].time,this.endTime)}this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};THREE.KeyFrameAnimation.prototype.pause=function(){this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};
THREE.KeyFrameAnimation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this);for(var a=0;a<this.hierarchy.length;a++){var b=this.hierarchy[a];if(void 0!==b.animationCache){var c=b.animationCache.originalMatrix;b instanceof THREE.Bone?(c.copy(b.skinMatrix),b.skinMatrix=c):(c.copy(b.matrix),b.matrix=c);delete b.animationCache}}};
THREE.KeyFrameAnimation.prototype.update=function(a){if(this.isPlaying){var b,c,d,e,f=this.data.JIT.hierarchy,g,h,i;h=this.currentTime+=a*this.timeScale;g=this.currentTime%=this.data.length;if(g<this.startTimeMs)g=this.currentTime=this.startTimeMs+g;e=parseInt(Math.min(g*this.data.fps,this.data.length*this.data.fps),10);if((i=g<h)&&!this.loop){for(var a=0,l=this.hierarchy.length;a<l;a++){var k=this.data.hierarchy[a].keys,f=this.data.hierarchy[a].sids;d=k.length-1;e=this.hierarchy[a];if(k.length){for(k=
0;k<f.length;k++)g=f[k],(h=this.getPrevKeyWith(g,a,d))&&h.apply(g);this.data.hierarchy[a].node.updateMatrix();e.matrixWorldNeedsUpdate=!0}}this.stop()}else if(!(g<this.startTime)){a=0;for(l=this.hierarchy.length;a<l;a++){d=this.hierarchy[a];b=this.data.hierarchy[a];var k=b.keys,n=b.animationCache;if(this.JITCompile&&void 0!==f[a][e])d instanceof THREE.Bone?(d.skinMatrix=f[a][e],d.matrixWorldNeedsUpdate=!1):(d.matrix=f[a][e],d.matrixWorldNeedsUpdate=!0);else if(k.length){if(this.JITCompile&&n)d instanceof
THREE.Bone?d.skinMatrix=n.originalMatrix:d.matrix=n.originalMatrix;b=n.prevKey;c=n.nextKey;if(b&&c){if(c.time<=h){if(i&&this.loop){b=k[0];for(c=k[1];c.time<g;)b=c,c=k[b.index+1]}else if(!i)for(var q=k.length-1;c.time<g&&c.index!==q;)b=c,c=k[b.index+1];n.prevKey=b;n.nextKey=c}b.interpolate(c,g)}this.data.hierarchy[a].node.updateMatrix();d.matrixWorldNeedsUpdate=!0}}if(this.JITCompile&&void 0===f[0][e]){this.hierarchy[0].updateMatrixWorld(!0);for(a=0;a<this.hierarchy.length;a++)f[a][e]=this.hierarchy[a]instanceof
THREE.Bone?this.hierarchy[a].skinMatrix.clone():this.hierarchy[a].matrix.clone()}}}};THREE.KeyFrameAnimation.prototype.getNextKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c%=b.length;c<b.length;c++)if(b[c].hasTarget(a))return b[c];return b[0]};THREE.KeyFrameAnimation.prototype.getPrevKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c=0<=c?c:c+b.length;0<=c;c--)if(b[c].hasTarget(a))return b[c];return b[b.length-1]};
THREE.CubeCamera=function(a,b,c,d){this.heightOffset=c;this.position=new THREE.Vector3(0,c,0);this.cameraPX=new THREE.PerspectiveCamera(90,1,a,b);this.cameraNX=new THREE.PerspectiveCamera(90,1,a,b);this.cameraPY=new THREE.PerspectiveCamera(90,1,a,b);this.cameraNY=new THREE.PerspectiveCamera(90,1,a,b);this.cameraPZ=new THREE.PerspectiveCamera(90,1,a,b);this.cameraNZ=new THREE.PerspectiveCamera(90,1,a,b);this.cameraPX.position=this.position;this.cameraNX.position=this.position;this.cameraPY.position=
this.position;this.cameraNY.position=this.position;this.cameraPZ.position=this.position;this.cameraNZ.position=this.position;this.cameraPX.up.set(0,-1,0);this.cameraNX.up.set(0,-1,0);this.cameraPY.up.set(0,0,1);this.cameraNY.up.set(0,0,-1);this.cameraPZ.up.set(0,-1,0);this.cameraNZ.up.set(0,-1,0);this.targetPX=new THREE.Vector3(0,0,0);this.targetNX=new THREE.Vector3(0,0,0);this.targetPY=new THREE.Vector3(0,0,0);this.targetNY=new THREE.Vector3(0,0,0);this.targetPZ=new THREE.Vector3(0,0,0);this.targetNZ=
new THREE.Vector3(0,0,0);this.renderTarget=new THREE.WebGLRenderTargetCube(d,d,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updatePosition=function(a){this.position.copy(a);this.position.y+=this.heightOffset;this.targetPX.copy(this.position);this.targetNX.copy(this.position);this.targetPY.copy(this.position);this.targetNY.copy(this.position);this.targetPZ.copy(this.position);this.targetNZ.copy(this.position);this.targetPX.x+=1;this.targetNX.x-=1;this.targetPY.y+=
1;this.targetNY.y-=1;this.targetPZ.z+=1;this.targetNZ.z-=1;this.cameraPX.lookAt(this.targetPX);this.cameraNX.lookAt(this.targetNX);this.cameraPY.lookAt(this.targetPY);this.cameraNY.lookAt(this.targetNY);this.cameraPZ.lookAt(this.targetPZ);this.cameraNZ.lookAt(this.targetNZ)};this.updateCubeMap=function(a,b){var c=this.renderTarget;c.activeCubeFace=0;a.render(b,this.cameraPX,c);c.activeCubeFace=1;a.render(b,this.cameraNX,c);c.activeCubeFace=2;a.render(b,this.cameraPY,c);c.activeCubeFace=3;a.render(b,
this.cameraNY,c);c.activeCubeFace=4;a.render(b,this.cameraPZ,c);c.activeCubeFace=5;a.render(b,this.cameraNZ,c)}};THREE.FirstPersonCamera=function(){console.warn("DEPRECATED: FirstPersonCamera() is FirstPersonControls().")};THREE.PathCamera=function(){console.warn("DEPRECATED: PathCamera() is PathControls().")};THREE.FlyCamera=function(){console.warn("DEPRECATED: FlyCamera() is FlyControls().")};THREE.RollCamera=function(){console.warn("DEPRECATED: RollCamera() is RollControls().")};
THREE.TrackballCamera=function(){console.warn("DEPRECATED: TrackballCamera() is TrackballControls().")};THREE.CombinedCamera=function(a,b,c,d,e,f,g){THREE.Camera.call(this);this.fov=c;this.left=-a/2;this.right=a/2;this.top=b/2;this.bottom=-b/2;this.cameraO=new THREE.OrthographicCamera(a/-2,a/2,b/2,b/-2,f,g);this.cameraP=new THREE.PerspectiveCamera(c,a/b,d,e);this.zoom=1;this.toPerspective()};THREE.CombinedCamera.prototype=new THREE.Camera;THREE.CombinedCamera.prototype.constructor=THREE.CoolCamera;
THREE.CombinedCamera.prototype.toPerspective=function(){this.near=this.cameraP.near;this.far=this.cameraP.far;this.cameraP.fov=this.fov/this.zoom;this.cameraP.updateProjectionMatrix();this.projectionMatrix=this.cameraP.projectionMatrix;this.inPersepectiveMode=!0;this.inOrthographicMode=!1};
THREE.CombinedCamera.prototype.toOrthographic=function(){var a=this.cameraP.aspect,b=(this.cameraP.near+this.cameraP.far)/2,b=Math.tan(this.fov/2)*b,a=2*b*a/2,b=b/this.zoom,a=a/this.zoom;this.cameraO.left=-a;this.cameraO.right=a;this.cameraO.top=b;this.cameraO.bottom=-b;this.cameraO.updateProjectionMatrix();this.near=this.cameraO.near;this.far=this.cameraO.far;this.projectionMatrix=this.cameraO.projectionMatrix;this.inPersepectiveMode=!1;this.inOrthographicMode=!0};
THREE.CombinedCamera.prototype.setFov=function(a){this.fov=a;this.inPersepectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.setLens=function(a,b){b||(b=43.25);var c=2*Math.atan(b/(2*a)),c=180/Math.PI*c;this.setFov(c);return c};THREE.CombinedCamera.prototype.setZoom=function(a){this.zoom=a;this.inPersepectiveMode?this.toPerspective():this.toOrthographic()};
THREE.CombinedCamera.prototype.toFrontView=function(){this.rotation.x=0;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toBackView=function(){this.rotation.x=0;this.rotation.y=Math.PI;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toLeftView=function(){this.rotation.x=0;this.rotation.y=-Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toRightView=function(){this.rotation.x=0;this.rotation.y=Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toTopView=function(){this.rotation.x=-Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toBottomView=function(){this.rotation.x=Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.FirstPersonControls=function(a,b){function c(a,b){return function(){b.apply(a,arguments)}}this.object=a;this.target=new THREE.Vector3(0,0,0);this.domElement=void 0!==b?b:document;this.movementSpeed=1;this.lookSpeed=0.005;this.noFly=!1;this.lookVertical=!0;this.autoForward=!1;this.activeLook=!0;this.heightSpeed=!1;this.heightCoef=1;this.heightMin=0;this.constrainVertical=!1;this.verticalMin=0;this.verticalMax=Math.PI;this.theta=this.phi=this.lon=this.lat=this.mouseY=this.mouseX=this.autoSpeedFactor=
0;this.mouseDragOn=this.freeze=this.moveRight=this.moveLeft=this.moveBackward=this.moveForward=!1;this.domElement===document?(this.viewHalfX=window.innerWidth/2,this.viewHalfY=window.innerHeight/2):(this.viewHalfX=this.domElement.offsetWidth/2,this.viewHalfY=this.domElement.offsetHeight/2,this.domElement.setAttribute("tabindex",-1));this.onMouseDown=function(a){this.domElement!==document&&this.domElement.focus();a.preventDefault();a.stopPropagation();if(this.activeLook)switch(a.button){case 0:this.moveForward=
!0;break;case 2:this.moveBackward=!0}this.mouseDragOn=!0};this.onMouseUp=function(a){a.preventDefault();a.stopPropagation();if(this.activeLook)switch(a.button){case 0:this.moveForward=!1;break;case 2:this.moveBackward=!1}this.mouseDragOn=!1};this.onMouseMove=function(a){this.domElement===document?(this.mouseX=a.pageX-this.viewHalfX,this.mouseY=a.pageY-this.viewHalfY):(this.mouseX=a.pageX-this.domElement.offsetLeft-this.viewHalfX,this.mouseY=a.pageY-this.domElement.offsetTop-this.viewHalfY)};this.onKeyDown=
function(a){switch(a.keyCode){case 38:case 87:this.moveForward=!0;break;case 37:case 65:this.moveLeft=!0;break;case 40:case 83:this.moveBackward=!0;break;case 39:case 68:this.moveRight=!0;break;case 82:this.moveUp=!0;break;case 70:this.moveDown=!0;break;case 81:this.freeze=!this.freeze}};this.onKeyUp=function(a){switch(a.keyCode){case 38:case 87:this.moveForward=!1;break;case 37:case 65:this.moveLeft=!1;break;case 40:case 83:this.moveBackward=!1;break;case 39:case 68:this.moveRight=!1;break;case 82:this.moveUp=
!1;break;case 70:this.moveDown=!1}};this.update=function(a){var b=0;if(!this.freeze){this.heightSpeed?(b=THREE.Math.clamp(this.object.position.y,this.heightMin,this.heightMax)-this.heightMin,this.autoSpeedFactor=a*b*this.heightCoef):this.autoSpeedFactor=0;b=a*this.movementSpeed;(this.moveForward||this.autoForward&&!this.moveBackward)&&this.object.translateZ(-(b+this.autoSpeedFactor));this.moveBackward&&this.object.translateZ(b);this.moveLeft&&this.object.translateX(-b);this.moveRight&&this.object.translateX(b);
this.moveUp&&this.object.translateY(b);this.moveDown&&this.object.translateY(-b);a*=this.lookSpeed;this.activeLook||(a=0);this.lon+=this.mouseX*a;this.lookVertical&&(this.lat-=this.mouseY*a);this.lat=Math.max(-85,Math.min(85,this.lat));this.phi=(90-this.lat)*Math.PI/180;this.theta=this.lon*Math.PI/180;var b=this.target,c=this.object.position;b.x=c.x+100*Math.sin(this.phi)*Math.cos(this.theta);b.y=c.y+100*Math.cos(this.phi);b.z=c.z+100*Math.sin(this.phi)*Math.sin(this.theta);b=1;this.constrainVertical&&
(b=Math.PI/(this.verticalMax-this.verticalMin));this.lon+=this.mouseX*a;this.lookVertical&&(this.lat-=this.mouseY*a*b);this.lat=Math.max(-85,Math.min(85,this.lat));this.phi=(90-this.lat)*Math.PI/180;this.theta=this.lon*Math.PI/180;if(this.constrainVertical)this.phi=THREE.Math.mapLinear(this.phi,0,Math.PI,this.verticalMin,this.verticalMax);b=this.target;c=this.object.position;b.x=c.x+100*Math.sin(this.phi)*Math.cos(this.theta);b.y=c.y+100*Math.cos(this.phi);b.z=c.z+100*Math.sin(this.phi)*Math.sin(this.theta);
this.object.lookAt(b)}};this.domElement.addEventListener("contextmenu",function(a){a.preventDefault()},!1);this.domElement.addEventListener("mousemove",c(this,this.onMouseMove),!1);this.domElement.addEventListener("mousedown",c(this,this.onMouseDown),!1);this.domElement.addEventListener("mouseup",c(this,this.onMouseUp),!1);this.domElement.addEventListener("keydown",c(this,this.onKeyDown),!1);this.domElement.addEventListener("keyup",c(this,this.onKeyUp),!1)};
THREE.PathControls=function(a,b){function c(a){return 1>(a*=2)?0.5*a*a:-0.5*(--a*(a-2)-1)}function d(a,b){return function(){b.apply(a,arguments)}}function e(a,b,c,d){var e={name:c,fps:0.6,length:d,hierarchy:[]},f,g=b.getControlPointsArray(),h=b.getLength(),r=g.length,s=0;f=r-1;b={parent:-1,keys:[]};b.keys[0]={time:0,pos:g[0],rot:[0,0,0,1],scl:[1,1,1]};b.keys[f]={time:d,pos:g[f],rot:[0,0,0,1],scl:[1,1,1]};for(f=1;f<r-1;f++)s=d*h.chunks[f]/h.total,b.keys[f]={time:s,pos:g[f]};e.hierarchy[0]=b;THREE.AnimationHandler.add(e);
return new THREE.Animation(a,c,THREE.AnimationHandler.CATMULLROM_FORWARD,!1)}function f(a,b){var c,d,e=new THREE.Geometry;for(c=0;c<a.points.length*b;c++)d=c/(a.points.length*b),d=a.getPoint(d),e.vertices[c]=new THREE.Vertex(new THREE.Vector3(d.x,d.y,d.z));return e}this.object=a;this.domElement=void 0!==b?b:document;this.id="PathControls"+THREE.PathControlsIdCounter++;this.duration=1E4;this.waypoints=[];this.useConstantSpeed=!0;this.resamplingCoef=50;this.debugPath=new THREE.Object3D;this.debugDummy=
new THREE.Object3D;this.animationParent=new THREE.Object3D;this.lookSpeed=0.005;this.lookHorizontal=this.lookVertical=!0;this.verticalAngleMap={srcRange:[0,2*Math.PI],dstRange:[0,2*Math.PI]};this.horizontalAngleMap={srcRange:[0,2*Math.PI],dstRange:[0,2*Math.PI]};this.target=new THREE.Object3D;this.theta=this.phi=this.lon=this.lat=this.mouseY=this.mouseX=0;this.domElement===document?(this.viewHalfX=window.innerWidth/2,this.viewHalfY=window.innerHeight/2):(this.viewHalfX=this.domElement.offsetWidth/
2,this.viewHalfY=this.domElement.offsetHeight/2,this.domElement.setAttribute("tabindex",-1));var g=2*Math.PI,h=Math.PI/180;this.update=function(a){var b;this.lookHorizontal&&(this.lon+=this.mouseX*this.lookSpeed*a);this.lookVertical&&(this.lat-=this.mouseY*this.lookSpeed*a);this.lon=Math.max(0,Math.min(360,this.lon));this.lat=Math.max(-85,Math.min(85,this.lat));this.phi=(90-this.lat)*h;this.theta=this.lon*h;a=this.phi%g;this.phi=0<=a?a:a+g;b=this.verticalAngleMap.srcRange;a=this.verticalAngleMap.dstRange;
b=THREE.Math.mapLinear(this.phi,b[0],b[1],a[0],a[1]);var d=a[1]-a[0];this.phi=c((b-a[0])/d)*d+a[0];b=this.horizontalAngleMap.srcRange;a=this.horizontalAngleMap.dstRange;b=THREE.Math.mapLinear(this.theta,b[0],b[1],a[0],a[1]);d=a[1]-a[0];this.theta=c((b-a[0])/d)*d+a[0];a=this.target.position;a.x=100*Math.sin(this.phi)*Math.cos(this.theta);a.y=100*Math.cos(this.phi);a.z=100*Math.sin(this.phi)*Math.sin(this.theta);this.object.lookAt(this.target.position)};this.onMouseMove=function(a){this.domElement===
document?(this.mouseX=a.pageX-this.viewHalfX,this.mouseY=a.pageY-this.viewHalfY):(this.mouseX=a.pageX-this.domElement.offsetLeft-this.viewHalfX,this.mouseY=a.pageY-this.domElement.offsetTop-this.viewHalfY)};this.init=function(){this.spline=new THREE.Spline;this.spline.initFromArray(this.waypoints);this.useConstantSpeed&&this.spline.reparametrizeByArcLength(this.resamplingCoef);if(this.createDebugDummy){var a=new THREE.MeshLambertMaterial({color:30719}),b=new THREE.MeshLambertMaterial({color:65280}),
c=new THREE.CubeGeometry(10,10,20),g=new THREE.CubeGeometry(2,2,10);this.animationParent=new THREE.Mesh(c,a);a=new THREE.Mesh(g,b);a.position.set(0,10,0);this.animation=e(this.animationParent,this.spline,this.id,this.duration);this.animationParent.add(this.object);this.animationParent.add(this.target);this.animationParent.add(a)}else this.animation=e(this.animationParent,this.spline,this.id,this.duration),this.animationParent.add(this.target),this.animationParent.add(this.object);if(this.createDebugPath){var a=
this.debugPath,b=this.spline,g=f(b,10),c=f(b,10),h=new THREE.LineBasicMaterial({color:16711680,linewidth:3}),g=new THREE.Line(g,h),c=new THREE.ParticleSystem(c,new THREE.ParticleBasicMaterial({color:16755200,size:3}));g.scale.set(1,1,1);a.add(g);c.scale.set(1,1,1);a.add(c);for(var g=new THREE.SphereGeometry(1,16,8),h=new THREE.MeshBasicMaterial({color:65280}),o=0;o<b.points.length;o++)c=new THREE.Mesh(g,h),c.position.copy(b.points[o]),a.add(c)}this.domElement.addEventListener("mousemove",d(this,this.onMouseMove),
!1)}};THREE.PathControlsIdCounter=0;
THREE.FlyControls=function(a,b){function c(a,b){return function(){b.apply(a,arguments)}}this.object=a;this.domElement=void 0!==b?b:document;b&&this.domElement.setAttribute("tabindex",-1);this.movementSpeed=1;this.rollSpeed=0.005;this.autoForward=this.dragToLook=!1;this.object.useQuaternion=!0;this.tmpQuaternion=new THREE.Quaternion;this.mouseStatus=0;this.moveState={up:0,down:0,left:0,right:0,forward:0,back:0,pitchUp:0,pitchDown:0,yawLeft:0,yawRight:0,rollLeft:0,rollRight:0};this.moveVector=new THREE.Vector3(0,
0,0);this.rotationVector=new THREE.Vector3(0,0,0);this.handleEvent=function(a){if("function"==typeof this[a.type])this[a.type](a)};this.keydown=function(a){if(!a.altKey){switch(a.keyCode){case 16:this.movementSpeedMultiplier=0.1;break;case 87:this.moveState.forward=1;break;case 83:this.moveState.back=1;break;case 65:this.moveState.left=1;break;case 68:this.moveState.right=1;break;case 82:this.moveState.up=1;break;case 70:this.moveState.down=1;break;case 38:this.moveState.pitchUp=1;break;case 40:this.moveState.pitchDown=
1;break;case 37:this.moveState.yawLeft=1;break;case 39:this.moveState.yawRight=1;break;case 81:this.moveState.rollLeft=1;break;case 69:this.moveState.rollRight=1}this.updateMovementVector();this.updateRotationVector()}};this.keyup=function(a){switch(a.keyCode){case 16:this.movementSpeedMultiplier=1;break;case 87:this.moveState.forward=0;break;case 83:this.moveState.back=0;break;case 65:this.moveState.left=0;break;case 68:this.moveState.right=0;break;case 82:this.moveState.up=0;break;case 70:this.moveState.down=
0;break;case 38:this.moveState.pitchUp=0;break;case 40:this.moveState.pitchDown=0;break;case 37:this.moveState.yawLeft=0;break;case 39:this.moveState.yawRight=0;break;case 81:this.moveState.rollLeft=0;break;case 69:this.moveState.rollRight=0}this.updateMovementVector();this.updateRotationVector()};this.mousedown=function(a){this.domElement!==document&&this.domElement.focus();a.preventDefault();a.stopPropagation();if(this.dragToLook)this.mouseStatus++;else switch(a.button){case 0:this.object.moveForward=
!0;break;case 2:this.object.moveBackward=!0}};this.mousemove=function(a){if(!this.dragToLook||0<this.mouseStatus){var b=this.getContainerDimensions(),c=b.size[0]/2,g=b.size[1]/2;this.moveState.yawLeft=-(a.pageX-b.offset[0]-c)/c;this.moveState.pitchDown=(a.pageY-b.offset[1]-g)/g;this.updateRotationVector()}};this.mouseup=function(a){a.preventDefault();a.stopPropagation();if(this.dragToLook)this.mouseStatus--,this.moveState.yawLeft=this.moveState.pitchDown=0;else switch(a.button){case 0:this.moveForward=
!1;break;case 2:this.moveBackward=!1}this.updateRotationVector()};this.update=function(a){var b=a*this.movementSpeed,a=a*this.rollSpeed;this.object.translateX(this.moveVector.x*b);this.object.translateY(this.moveVector.y*b);this.object.translateZ(this.moveVector.z*b);this.tmpQuaternion.set(this.rotationVector.x*a,this.rotationVector.y*a,this.rotationVector.z*a,1).normalize();this.object.quaternion.multiplySelf(this.tmpQuaternion);this.object.matrix.setPosition(this.object.position);this.object.matrix.setRotationFromQuaternion(this.object.quaternion);
this.object.matrixWorldNeedsUpdate=!0};this.updateMovementVector=function(){var a=this.moveState.forward||this.autoForward&&!this.moveState.back?1:0;this.moveVector.x=-this.moveState.left+this.moveState.right;this.moveVector.y=-this.moveState.down+this.moveState.up;this.moveVector.z=-a+this.moveState.back};this.updateRotationVector=function(){this.rotationVector.x=-this.moveState.pitchDown+this.moveState.pitchUp;this.rotationVector.y=-this.moveState.yawRight+this.moveState.yawLeft;this.rotationVector.z=
-this.moveState.rollRight+this.moveState.rollLeft};this.getContainerDimensions=function(){return this.domElement!=document?{size:[this.domElement.offsetWidth,this.domElement.offsetHeight],offset:[this.domElement.offsetLeft,this.domElement.offsetTop]}:{size:[window.innerWidth,window.innerHeight],offset:[0,0]}};this.domElement.addEventListener("mousemove",c(this,this.mousemove),!1);this.domElement.addEventListener("mousedown",c(this,this.mousedown),!1);this.domElement.addEventListener("mouseup",c(this,
this.mouseup),!1);this.domElement.addEventListener("keydown",c(this,this.keydown),!1);this.domElement.addEventListener("keyup",c(this,this.keyup),!1);this.updateMovementVector();this.updateRotationVector()};
THREE.RollControls=function(a,b){this.object=a;this.domElement=void 0!==b?b:document;this.mouseLook=!0;this.autoForward=!1;this.rollSpeed=this.movementSpeed=this.lookSpeed=1;this.constrainVertical=[-0.9,0.9];this.object.matrixAutoUpdate=!1;this.forward=new THREE.Vector3(0,0,1);this.roll=0;var c=new THREE.Vector3,d=new THREE.Vector3,e=new THREE.Vector3,f=new THREE.Matrix4,g=!1,h=1,i=0,l=0,k=0,n=0,q=0,o=window.innerWidth/2,p=window.innerHeight/2;this.update=function(a){if(this.mouseLook){var b=a*this.lookSpeed;
this.rotateHorizontally(b*n);this.rotateVertically(b*q)}b=a*this.movementSpeed;this.object.translateZ(-b*(0<i||this.autoForward&&!(0>i)?1:i));this.object.translateX(b*l);this.object.translateY(b*k);g&&(this.roll+=this.rollSpeed*a*h);if(this.forward.y>this.constrainVertical[1])this.forward.y=this.constrainVertical[1],this.forward.normalize();else if(this.forward.y<this.constrainVertical[0])this.forward.y=this.constrainVertical[0],this.forward.normalize();e.copy(this.forward);d.set(0,1,0);c.cross(d,
e).normalize();d.cross(e,c).normalize();this.object.matrix.n11=c.x;this.object.matrix.n12=d.x;this.object.matrix.n13=e.x;this.object.matrix.n21=c.y;this.object.matrix.n22=d.y;this.object.matrix.n23=e.y;this.object.matrix.n31=c.z;this.object.matrix.n32=d.z;this.object.matrix.n33=e.z;f.identity();f.n11=Math.cos(this.roll);f.n12=-Math.sin(this.roll);f.n21=Math.sin(this.roll);f.n22=Math.cos(this.roll);this.object.matrix.multiplySelf(f);this.object.matrixWorldNeedsUpdate=!0;this.object.matrix.n14=this.object.position.x;
this.object.matrix.n24=this.object.position.y;this.object.matrix.n34=this.object.position.z};this.translateX=function(a){this.object.position.x+=this.object.matrix.n11*a;this.object.position.y+=this.object.matrix.n21*a;this.object.position.z+=this.object.matrix.n31*a};this.translateY=function(a){this.object.position.x+=this.object.matrix.n12*a;this.object.position.y+=this.object.matrix.n22*a;this.object.position.z+=this.object.matrix.n32*a};this.translateZ=function(a){this.object.position.x-=this.object.matrix.n13*
a;this.object.position.y-=this.object.matrix.n23*a;this.object.position.z-=this.object.matrix.n33*a};this.rotateHorizontally=function(a){c.set(this.object.matrix.n11,this.object.matrix.n21,this.object.matrix.n31);c.multiplyScalar(a);this.forward.subSelf(c);this.forward.normalize()};this.rotateVertically=function(a){d.set(this.object.matrix.n12,this.object.matrix.n22,this.object.matrix.n32);d.multiplyScalar(a);this.forward.addSelf(d);this.forward.normalize()};this.domElement.addEventListener("contextmenu",
function(a){a.preventDefault()},!1);this.domElement.addEventListener("mousemove",function(a){n=(a.clientX-o)/window.innerWidth;q=(a.clientY-p)/window.innerHeight},!1);this.domElement.addEventListener("mousedown",function(a){a.preventDefault();a.stopPropagation();switch(a.button){case 0:i=1;break;case 2:i=-1}},!1);this.domElement.addEventListener("mouseup",function(a){a.preventDefault();a.stopPropagation();switch(a.button){case 0:i=0;break;case 2:i=0}},!1);this.domElement.addEventListener("keydown",
function(a){switch(a.keyCode){case 38:case 87:i=1;break;case 37:case 65:l=-1;break;case 40:case 83:i=-1;break;case 39:case 68:l=1;break;case 81:g=!0;h=1;break;case 69:g=!0;h=-1;break;case 82:k=1;break;case 70:k=-1}},!1);this.domElement.addEventListener("keyup",function(a){switch(a.keyCode){case 38:case 87:i=0;break;case 37:case 65:l=0;break;case 40:case 83:i=0;break;case 39:case 68:l=0;break;case 81:g=!1;break;case 69:g=!1;break;case 82:k=0;break;case 70:k=0}},!1)};
THREE.TrackballControls=function(a,b){var c=this;this.object=a;this.domElement=void 0!==b?b:document;this.enabled=!0;this.screen={width:window.innerWidth,height:window.innerHeight,offsetLeft:0,offsetTop:0};this.radius=(this.screen.width+this.screen.height)/4;this.rotateSpeed=1;this.zoomSpeed=1.2;this.panSpeed=0.3;this.staticMoving=this.noPan=this.noZoom=this.noRotate=!1;this.dynamicDampingFactor=0.2;this.minDistance=0;this.maxDistance=Infinity;this.keys=[65,83,68];this.target=new THREE.Vector3(0,
0,0);var d=!1,e=-1,f=new THREE.Vector3,g=new THREE.Vector3,h=new THREE.Vector3,i=new THREE.Vector2,l=new THREE.Vector2,k=new THREE.Vector2,n=new THREE.Vector2;this.handleEvent=function(a){if("function"==typeof this[a.type])this[a.type](a)};this.getMouseOnScreen=function(a,b){return new THREE.Vector2(0.5*((a-c.screen.offsetLeft)/c.radius),0.5*((b-c.screen.offsetTop)/c.radius))};this.getMouseProjectionOnBall=function(a,b){var d=new THREE.Vector3((a-0.5*c.screen.width-c.screen.offsetLeft)/c.radius,(0.5*
c.screen.height+c.screen.offsetTop-b)/c.radius,0),e=d.length();1<e?d.normalize():d.z=Math.sqrt(1-e*e);f.copy(c.object.position).subSelf(c.target);e=c.object.up.clone().setLength(d.y);e.addSelf(c.object.up.clone().crossSelf(f).setLength(d.x));e.addSelf(f.setLength(d.z));return e};this.rotateCamera=function(){var a=Math.acos(g.dot(h)/g.length()/h.length());if(a){var b=(new THREE.Vector3).cross(g,h).normalize(),d=new THREE.Quaternion,a=a*c.rotateSpeed;d.setFromAxisAngle(b,-a);d.multiplyVector3(f);d.multiplyVector3(c.object.up);
d.multiplyVector3(h);c.staticMoving?g=h:(d.setFromAxisAngle(b,a*(c.dynamicDampingFactor-1)),d.multiplyVector3(g))}};this.zoomCamera=function(){var a=1+(l.y-i.y)*c.zoomSpeed;1!==a&&0<a&&(f.multiplyScalar(a),c.staticMoving?i=l:i.y+=(l.y-i.y)*this.dynamicDampingFactor)};this.panCamera=function(){var a=n.clone().subSelf(k);if(a.lengthSq()){a.multiplyScalar(f.length()*c.panSpeed);var b=f.clone().crossSelf(c.object.up).setLength(a.x);b.addSelf(c.object.up.clone().setLength(a.y));c.object.position.addSelf(b);
c.target.addSelf(b);c.staticMoving?k=n:k.addSelf(a.sub(n,k).multiplyScalar(c.dynamicDampingFactor))}};this.checkDistances=function(){if(!c.noZoom||!c.noPan)c.object.position.lengthSq()>c.maxDistance*c.maxDistance&&c.object.position.setLength(c.maxDistance),f.lengthSq()<c.minDistance*c.minDistance&&c.object.position.add(c.target,f.setLength(c.minDistance))};this.update=function(){f.copy(c.object.position).subSelf(this.target);c.noRotate||c.rotateCamera();c.noZoom||c.zoomCamera();c.noPan||c.panCamera();
c.object.position.add(c.target,f);c.checkDistances();c.object.lookAt(c.target)};this.domElement.addEventListener("contextmenu",function(a){a.preventDefault()},!1);this.domElement.addEventListener("mousemove",function(a){c.enabled&&(d&&(g=h=c.getMouseProjectionOnBall(a.clientX,a.clientY),i=l=c.getMouseOnScreen(a.clientX,a.clientY),k=n=c.getMouseOnScreen(a.clientX,a.clientY),d=!1),-1!==e&&(0===e&&!c.noRotate?h=c.getMouseProjectionOnBall(a.clientX,a.clientY):1===e&&!c.noZoom?l=c.getMouseOnScreen(a.clientX,
a.clientY):2===e&&!c.noPan&&(n=c.getMouseOnScreen(a.clientX,a.clientY))))},!1);this.domElement.addEventListener("mousedown",function(a){if(c.enabled&&(a.preventDefault(),a.stopPropagation(),-1===e))e=a.button,0===e&&!c.noRotate?g=h=c.getMouseProjectionOnBall(a.clientX,a.clientY):1===e&&!c.noZoom?i=l=c.getMouseOnScreen(a.clientX,a.clientY):this.noPan||(k=n=c.getMouseOnScreen(a.clientX,a.clientY))},!1);this.domElement.addEventListener("mouseup",function(a){c.enabled&&(a.preventDefault(),a.stopPropagation(),
e=-1)},!1);window.addEventListener("keydown",function(a){c.enabled&&-1===e&&(a.keyCode===c.keys[0]&&!c.noRotate?e=0:a.keyCode===c.keys[1]&&!c.noZoom?e=1:a.keyCode===c.keys[2]&&!c.noPan&&(e=2),-1!==e&&(d=!0))},!1);window.addEventListener("keyup",function(){c.enabled&&-1!==e&&(e=-1)},!1)};
THREE.CubeGeometry=function(a,b,c,d,e,f,g,h){function i(a,b,c,g,h,i,k,n){var m,o=d||1,p=e||1,q=h/2,r=i/2,s=l.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)m="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)m="y",p=f||1;else if("z"===a&&"y"===b||"y"===a&&"z"===b)m="x",o=f||1;var j=o+1,t=p+1,y=h/o,E=i/p,S=new THREE.Vector3;S[m]=0<k?1:-1;for(h=0;h<t;h++)for(i=0;i<j;i++){var u=new THREE.Vector3;u[a]=(i*y-q)*c;u[b]=(h*E-r)*g;u[m]=k;l.vertices.push(new THREE.Vertex(u))}for(h=0;h<p;h++)for(i=0;i<o;i++)a=
new THREE.Face4(i+j*h+s,i+j*(h+1)+s,i+1+j*(h+1)+s,i+1+j*h+s),a.normal.copy(S),a.vertexNormals.push(S.clone(),S.clone(),S.clone(),S.clone()),a.materialIndex=n,l.faces.push(a),l.faceVertexUvs[0].push([new THREE.UV(i/o,h/p),new THREE.UV(i/o,(h+1)/p),new THREE.UV((i+1)/o,(h+1)/p),new THREE.UV((i+1)/o,h/p)])}THREE.Geometry.call(this);var l=this,k=a/2,n=b/2,q=c/2,o,p,m,r,s,t;if(void 0!==g){if(g instanceof Array)this.materials=g;else{this.materials=[];for(o=0;6>o;o++)this.materials.push(g)}o=0;r=1;p=2;s=
3;m=4;t=5}else this.materials=[];this.sides={px:!0,nx:!0,py:!0,ny:!0,pz:!0,nz:!0};if(void 0!=h)for(var u in h)void 0!==this.sides[u]&&(this.sides[u]=h[u]);this.sides.px&&i("z","y",-1,-1,c,b,k,o);this.sides.nx&&i("z","y",1,-1,c,b,-k,r);this.sides.py&&i("x","z",1,1,a,c,n,p);this.sides.ny&&i("x","z",1,-1,a,c,-n,s);this.sides.pz&&i("x","y",1,-1,a,b,q,m);this.sides.nz&&i("x","y",-1,-1,a,b,-q,t);this.computeCentroids();this.mergeVertices()};THREE.CubeGeometry.prototype=new THREE.Geometry;
THREE.CubeGeometry.prototype.constructor=THREE.CubeGeometry;
THREE.CylinderGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);var a=void 0!==a?a:20,b=void 0!==b?b:20,c=void 0!==c?c:100,g=c/2,d=d||8,e=e||1,h,i,l=[],k=[];for(i=0;i<=e;i++){var n=[],q=[],o=i/e,p=o*(b-a)+a;for(h=0;h<=d;h++){var m=h/d,r=p*Math.sin(2*m*Math.PI),s=-o*c+g,t=p*Math.cos(2*m*Math.PI);this.vertices.push(new THREE.Vertex(new THREE.Vector3(r,s,t)));n.push(this.vertices.length-1);q.push(new THREE.UV(m,o))}l.push(n);k.push(q)}for(i=0;i<e;i++)for(h=0;h<d;h++){var c=l[i][h],n=l[i+1][h],
q=l[i+1][h+1],o=l[i][h+1],p=this.vertices[c].position.clone().setY(0).normalize(),m=this.vertices[n].position.clone().setY(0).normalize(),r=this.vertices[q].position.clone().setY(0).normalize(),s=this.vertices[o].position.clone().setY(0).normalize(),t=k[i][h].clone(),u=k[i+1][h].clone(),v=k[i+1][h+1].clone(),x=k[i][h+1].clone();this.faces.push(new THREE.Face4(c,n,q,o,[p,m,r,s]));this.faceVertexUvs[0].push([t,u,v,x])}if(!f&&0<a){this.vertices.push(new THREE.Vertex(new THREE.Vector3(0,g,0)));for(h=
0;h<d;h++)c=l[0][h],n=l[0][h+1],q=this.vertices.length-1,p=new THREE.Vector3(0,1,0),m=new THREE.Vector3(0,1,0),r=new THREE.Vector3(0,1,0),t=k[0][h].clone(),u=k[0][h+1].clone(),v=new THREE.UV(u.u,0),this.faces.push(new THREE.Face3(c,n,q,[p,m,r])),this.faceVertexUvs[0].push([t,u,v])}if(!f&&0<b){this.vertices.push(new THREE.Vertex(new THREE.Vector3(0,-g,0)));for(h=0;h<d;h++)c=l[i][h+1],n=l[i][h],q=this.vertices.length-1,p=new THREE.Vector3(0,-1,0),m=new THREE.Vector3(0,-1,0),r=new THREE.Vector3(0,-1,
0),t=k[i][h+1].clone(),u=k[i][h].clone(),v=new THREE.UV(u.u,1),this.faces.push(new THREE.Face3(c,n,q,[p,m,r])),this.faceVertexUvs[0].push([t,u,v])}this.computeCentroids();this.computeFaceNormals()};THREE.CylinderGeometry.prototype=new THREE.Geometry;THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;
THREE.ExtrudeGeometry=function(a,b){if("undefined"!==typeof a){THREE.Geometry.call(this);var a=a instanceof Array?a:[a],c,d,e=a.length;this.shapebb=a[e-1].getBoundingBox();for(d=0;d<e;d++)c=a[d],this.addShape(c,b);this.computeCentroids();this.computeFaceNormals()}};THREE.ExtrudeGeometry.prototype=new THREE.Geometry;THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry;
THREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||console.log("die");return b.clone().multiplyScalar(c).addSelf(a)}function d(a,b,c){var d=THREE.ExtrudeGeometry.__v1,e=THREE.ExtrudeGeometry.__v2,f=THREE.ExtrudeGeometry.__v3,g=THREE.ExtrudeGeometry.__v4,h=THREE.ExtrudeGeometry.__v5,j=THREE.ExtrudeGeometry.__v6;d.set(a.x-b.x,a.y-b.y);e.set(a.x-c.x,a.y-c.y);d=d.normalize();e=e.normalize();f.set(-d.y,d.x);g.set(e.y,-e.x);h.copy(a).addSelf(f);j.copy(a).addSelf(g);if(h.equals(j))return g.clone();
h.copy(b).addSelf(f);j.copy(c).addSelf(g);f=d.dot(g);g=j.subSelf(h).dot(g);0===f&&(console.log("Either infinite or no solutions!"),0===g?console.log("Its finite solutions."):console.log("Too bad, no solutions."));g/=f;return 0>g?(b=Math.atan2(b.y-a.y,b.x-a.x),a=Math.atan2(c.y-a.y,c.x-a.x),b>a&&(a+=2*Math.PI),c=(b+a)/2,a=-Math.cos(c),c=-Math.sin(c),new THREE.Vector2(a,c)):d.multiplyScalar(g).addSelf(h).subSelf(a).clone()}function e(a){for(j=a.length;0<=--j;){y=j;E=j-1;0>E&&(E=a.length-1);for(var b=
0,c=o+2*k,b=0;b<c;b++){var d=Q*b,e=Q*(b+1),f=ka+y+d,g=ka+y+e,l=f,d=ka+E+d,e=ka+E+e,n=g,l=l+H,d=d+H,e=e+H,n=n+H;A.faces.push(new THREE.Face4(l,d,e,n,null,null,v));void 0!==v&&(l=b/c,d=(b+1)/c,e=h+2*i,f=(A.vertices[f].position.z+i)/e,g=(A.vertices[g].position.z+i)/e,A.faceVertexUvs[0].push([new THREE.UV(f,l),new THREE.UV(g,l),new THREE.UV(g,d),new THREE.UV(f,d)]))}}}function f(a,b,c){A.vertices.push(new THREE.Vertex(new THREE.Vector3(a,b,c)))}function g(a,b,c){a+=H;b+=H;c+=H;A.faces.push(new THREE.Face3(a,
b,c,null,null,u));if(void 0!==u){var d=x.minX,e=x.minY,f=x.maxY,g=x.maxX,h=A.vertices[b].position.x-d,b=A.vertices[b].position.y-e,j=A.vertices[c].position.x-d,c=A.vertices[c].position.y-e;A.faceVertexUvs[0].push([new THREE.UV((A.vertices[a].position.x-d)/g,(A.vertices[a].position.y-e)/f),new THREE.UV(h/g,b/f),new THREE.UV(j/g,c/f)])}}var h=void 0!==b.amount?b.amount:100,i=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:i-2,k=void 0!==b.bevelSegments?b.bevelSegments:
3,n=void 0!==b.bevelEnabled?b.bevelEnabled:!0,q=void 0!==b.curveSegments?b.curveSegments:12,o=void 0!==b.steps?b.steps:1,p=b.bendPath,m=b.extrudePath,r,s=!1,t=void 0!==b.useSpacedPoints?b.useSpacedPoints:!1,u=b.material,v=b.extrudeMaterial,x=this.shapebb;if(m)r=m.getPoints(q),o=r.length,s=!0,n=!1;n||(l=i=k=0);var B,D,C,A=this,H=this.vertices.length;p&&a.addWrapPath(p);q=t?a.extractAllSpacedPoints(q):a.extractAllPoints(q);p=q.shape;q=q.holes;if(m=!THREE.Shape.Utils.isClockWise(p)){p=p.reverse();for(D=
0,C=q.length;D<C;D++)B=q[D],THREE.Shape.Utils.isClockWise(B)&&(q[D]=B.reverse());m=!1}m=THREE.Shape.Utils.triangulateShape(p,q);t=p;for(D=0,C=q.length;D<C;D++)B=q[D],p=p.concat(B);for(var I,N,$,K,Q=p.length,L=m.length,G=[],j=0,W=t.length,y=W-1,E=j+1;j<W;j++,y++,E++)y===W&&(y=0),E===W&&(E=0),G[j]=d(t[j],t[y],t[E]);var S=[],T,R=G.concat();for(D=0,C=q.length;D<C;D++){B=q[D];T=[];for(j=0,W=B.length,y=W-1,E=j+1;j<W;j++,y++,E++)y===W&&(y=0),E===W&&(E=0),T[j]=d(B[j],B[y],B[E]);S.push(T);R=R.concat(T)}for(I=
0;I<k;I++){N=I/k;$=i*(1-N);N=l*Math.sin(N*Math.PI/2);for(j=0,W=t.length;j<W;j++)K=c(t[j],G[j],N),f(K.x,K.y,-$);for(D=0,C=q.length;D<C;D++){B=q[D];T=S[D];for(j=0,W=B.length;j<W;j++)K=c(B[j],T[j],N),f(K.x,K.y,-$)}}N=l;for(j=0;j<Q;j++)K=n?c(p[j],R[j],N):p[j],s?f(K.x,K.y+r[0].y,r[0].x):f(K.x,K.y,0);for(I=1;I<=o;I++)for(j=0;j<Q;j++)K=n?c(p[j],R[j],N):p[j],s?f(K.x,K.y+r[I-1].y,r[I-1].x):f(K.x,K.y,h/o*I);for(I=k-1;0<=I;I--){N=I/k;$=i*(1-N);N=l*Math.sin(N*Math.PI/2);for(j=0,W=t.length;j<W;j++)K=c(t[j],G[j],
N),f(K.x,K.y,h+$);for(D=0,C=q.length;D<C;D++){B=q[D];T=S[D];for(j=0,W=B.length;j<W;j++)K=c(B[j],T[j],N),s?f(K.x,K.y+r[o-1].y,r[o-1].x+$):f(K.x,K.y,h+$)}}if(n){n=0*Q;for(j=0;j<L;j++)l=m[j],g(l[2]+n,l[1]+n,l[0]+n);n=Q*(o+2*k);for(j=0;j<L;j++)l=m[j],g(l[0]+n,l[1]+n,l[2]+n)}else{for(j=0;j<L;j++)l=m[j],g(l[2],l[1],l[0]);for(j=0;j<L;j++)l=m[j],g(l[0]+Q*o,l[1]+Q*o,l[2]+Q*o)}var ka=0;e(t);ka+=t.length;for(D=0,C=q.length;D<C;D++)B=q[D],e(B),ka+=B.length};THREE.ExtrudeGeometry.__v1=new THREE.Vector2;
THREE.ExtrudeGeometry.__v2=new THREE.Vector2;THREE.ExtrudeGeometry.__v3=new THREE.Vector2;THREE.ExtrudeGeometry.__v4=new THREE.Vector2;THREE.ExtrudeGeometry.__v5=new THREE.Vector2;THREE.ExtrudeGeometry.__v6=new THREE.Vector2;
THREE.IcosahedronGeometry=function(a){function b(a,b,c){var d=Math.sqrt(a*a+b*b+c*c);return e.vertices.push(new THREE.Vertex(new THREE.Vector3(a/d,b/d,c/d)))-1}function c(a,b,c,d){var f=e.vertices[a].position,g=e.vertices[b].position,h=e.vertices[c].position,a=new THREE.Face3(a,b,c);a.vertexNormals.push(f.clone().normalize(),g.clone().normalize(),h.clone().normalize());d.faces.push(a);d.faceVertexUvs[0].push([new THREE.UV(1-0.5*((Math.atan2(f.z,f.x)+Math.PI)%Math.PI/Math.PI),0.5-f.y/2),new THREE.UV(1-
0.5*((Math.atan2(g.z,g.x)+Math.PI)%Math.PI/Math.PI),0.5-g.y/2),new THREE.UV(1-0.5*((Math.atan2(h.z,h.x)+Math.PI)%Math.PI/Math.PI),0.5-h.y/2)])}function d(a,c){var d=e.vertices[a].position,f=e.vertices[c].position;return b((d.x+f.x)/2,(d.y+f.y)/2,(d.z+f.z)/2)}var e=this,f=new THREE.Geometry;this.subdivisions=a||0;THREE.Geometry.call(this);a=(1+Math.sqrt(5))/2;b(-1,a,0);b(1,a,0);b(-1,-a,0);b(1,-a,0);b(0,-1,a);b(0,1,a);b(0,-1,-a);b(0,1,-a);b(a,0,-1);b(a,0,1);b(-a,0,-1);b(-a,0,1);c(0,11,5,f);c(0,5,1,
f);c(0,1,7,f);c(0,7,10,f);c(0,10,11,f);c(1,5,9,f);c(5,11,4,f);c(11,10,2,f);c(10,7,6,f);c(7,1,8,f);c(3,9,4,f);c(3,4,2,f);c(3,2,6,f);c(3,6,8,f);c(3,8,9,f);c(4,9,5,f);c(2,4,11,f);c(6,2,10,f);c(8,6,7,f);c(9,8,1,f);for(var g=0;g<this.subdivisions;g++){for(var a=new THREE.Geometry,g=0,h=f.faces.length;g<h;g++){var i=f.faces[g],l=d(i.a,i.b),k=d(i.b,i.c),n=d(i.c,i.a);c(i.a,l,n,a);c(i.b,k,l,a);c(i.c,n,k,a);c(l,k,n,a)}f.faces=a.faces;f.faceVertexUvs[0]=a.faceVertexUvs[0]}e.faces=f.faces;e.faceVertexUvs[0]=
f.faceVertexUvs[0];this.mergeVertices();this.computeCentroids();this.computeFaceNormals()};THREE.IcosahedronGeometry.prototype=new THREE.Geometry;THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;
THREE.LatheGeometry=function(a,b,c){THREE.Geometry.call(this);this.steps=b||12;this.angle=c||2*Math.PI;for(var b=this.angle/this.steps,c=[],d=[],e=[],f=[],g=(new THREE.Matrix4).setRotationZ(b),h=0;h<a.length;h++)this.vertices.push(new THREE.Vertex(a[h])),c[h]=a[h].clone(),d[h]=this.vertices.length-1;for(var i=0;i<=this.angle+0.001;i+=b){for(h=0;h<c.length;h++)i<this.angle?(c[h]=g.multiplyVector3(c[h].clone()),this.vertices.push(new THREE.Vertex(c[h])),e[h]=this.vertices.length-1):e=f;0==i&&(f=d);
for(h=0;h<d.length-1;h++)this.faces.push(new THREE.Face4(e[h],e[h+1],d[h+1],d[h])),this.faceVertexUvs[0].push([new THREE.UV(1-i/this.angle,h/a.length),new THREE.UV(1-i/this.angle,(h+1)/a.length),new THREE.UV(1-(i-b)/this.angle,(h+1)/a.length),new THREE.UV(1-(i-b)/this.angle,h/a.length)]);d=e;e=[]}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=new THREE.Geometry;THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry;
THREE.OctahedronGeometry=function(a,b){function c(b){var c=b.clone().normalize(),c=new THREE.Vertex(c.clone().multiplyScalar(a));c.index=g.vertices.push(c)-1;var d=Math.atan2(b.z,-b.x)/2/Math.PI+0.5,b=Math.atan2(-b.y,Math.sqrt(b.x*b.x+b.z*b.z))/Math.PI+0.5;c.uv=new THREE.UV(d,b);return c}function d(a,b,c,h){1>h?(h=new THREE.Face3(a.index,b.index,c.index,[a.position,b.position,c.position]),h.centroid.addSelf(a.position).addSelf(b.position).addSelf(c.position).divideScalar(3),h.normal=h.centroid.clone().normalize(),
g.faces.push(h),h=Math.atan2(h.centroid.z,-h.centroid.x),g.faceVertexUvs[0].push([f(a.uv,a.position,h),f(b.uv,b.position,h),f(c.uv,c.position,h)])):(h-=1,d(a,e(a,b),e(a,c),h),d(e(a,b),b,e(b,c),h),d(e(a,c),e(b,c),c,h),d(e(a,b),e(b,c),e(a,c),h))}function e(a,b){h[a.index]||(h[a.index]=[]);h[b.index]||(h[b.index]=[]);var d=h[a.index][b.index];void 0===d&&(h[a.index][b.index]=h[b.index][a.index]=d=c((new THREE.Vector3).add(a.position,b.position).divideScalar(2)));return d}function f(a,b,c){0>c&&1===a.u&&
(a=new THREE.UV(a.u-1,a.v));0===b.x&&0===b.z&&(a=new THREE.UV(c/2/Math.PI+0.5,a.v));return a}THREE.Geometry.call(this);var b=b||0,g=this;c(new THREE.Vector3(1,0,0));c(new THREE.Vector3(-1,0,0));c(new THREE.Vector3(0,1,0));c(new THREE.Vector3(0,-1,0));c(new THREE.Vector3(0,0,1));c(new THREE.Vector3(0,0,-1));var h=[],i=this.vertices;d(i[0],i[2],i[4],b);d(i[0],i[4],i[3],b);d(i[0],i[3],i[5],b);d(i[0],i[5],i[2],b);d(i[1],i[2],i[5],b);d(i[1],i[5],i[3],b);d(i[1],i[3],i[4],b);d(i[1],i[4],i[2],b);this.boundingSphere=
{radius:a}};THREE.OctahedronGeometry.prototype=new THREE.Geometry;THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry;
THREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);for(var e=a/2,f=b/2,c=c||1,d=d||1,g=c+1,h=d+1,i=a/c,l=b/d,k=new THREE.Vector3(0,0,1),a=0;a<h;a++)for(b=0;b<g;b++)this.vertices.push(new THREE.Vertex(new THREE.Vector3(b*i-e,-(a*l-f),0)));for(a=0;a<d;a++)for(b=0;b<c;b++)e=new THREE.Face4(b+g*a,b+g*(a+1),b+1+g*(a+1),b+1+g*a),e.normal.copy(k),e.vertexNormals.push(k.clone(),k.clone(),k.clone(),k.clone()),this.faces.push(e),this.faceVertexUvs[0].push([new THREE.UV(b/c,a/d),new THREE.UV(b/
c,(a+1)/d),new THREE.UV((b+1)/c,(a+1)/d),new THREE.UV((b+1)/c,a/d)]);this.computeCentroids()};THREE.PlaneGeometry.prototype=new THREE.Geometry;THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;
THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);var a=a||50,d=void 0!==d?d:0,e=void 0!==e?e:2*Math.PI,f=void 0!==f?f:0,g=void 0!==g?g:Math.PI,b=Math.max(3,Math.floor(b)||8),c=Math.max(2,Math.floor(c)||6),h,i,l=[],k=[];for(i=0;i<=c;i++){var n=[],q=[];for(h=0;h<=b;h++){var o=h/b,p=i/c,m=-a*Math.cos(d+o*e)*Math.sin(f+p*g),r=a*Math.cos(f+p*g),s=a*Math.sin(d+o*e)*Math.sin(f+p*g);this.vertices.push(new THREE.Vertex(new THREE.Vector3(m,r,s)));n.push(this.vertices.length-1);q.push(new THREE.UV(o,
p))}l.push(n);k.push(q)}for(i=0;i<c;i++)for(h=0;h<b;h++){var d=l[i][h+1],e=l[i][h],f=l[i+1][h],g=l[i+1][h+1],n=this.vertices[d].position.clone().normalize(),q=this.vertices[e].position.clone().normalize(),o=this.vertices[f].position.clone().normalize(),p=this.vertices[g].position.clone().normalize(),m=k[i][h+1].clone(),r=k[i][h].clone(),s=k[i+1][h].clone(),t=k[i+1][h+1].clone();Math.abs(this.vertices[d].position.y)==a?(this.faces.push(new THREE.Face3(d,f,g,[n,o,p])),this.faceVertexUvs[0].push([m,
s,t])):Math.abs(this.vertices[f].position.y)==a?(this.faces.push(new THREE.Face3(d,e,f,[n,q,o])),this.faceVertexUvs[0].push([m,r,s])):(this.faces.push(new THREE.Face4(d,e,f,g,[n,q,o,p])),this.faceVertexUvs[0].push([m,r,s,t]))}this.computeCentroids();this.computeFaceNormals();this.boundingSphere={radius:a}};THREE.SphereGeometry.prototype=new THREE.Geometry;THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry;
THREE.TextGeometry=function(a,b){var c=(new THREE.TextPath(a,b)).toShapes();b.amount=void 0!==b.height?b.height:50;if(void 0===b.bevelThickness)b.bevelThickness=10;if(void 0===b.bevelSize)b.bevelSize=8;if(void 0===b.bevelEnabled)b.bevelEnabled=!1;if(b.bend){var d=c[c.length-1].getBoundingBox().maxX;b.bendPath=new THREE.QuadraticBezierCurve(new THREE.Vector2(0,0),new THREE.Vector2(d/2,120),new THREE.Vector2(d,0))}THREE.ExtrudeGeometry.call(this,c,b)};THREE.TextGeometry.prototype=new THREE.ExtrudeGeometry;
THREE.TextGeometry.prototype.constructor=THREE.TextGeometry;
THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){return this.faces[this.face][this.weight][this.style]},loadFace:function(a){var b=a.familyName.toLowerCase();this.faces[b]=this.faces[b]||{};this.faces[b][a.cssFontWeight]=this.faces[b][a.cssFontWeight]||{};this.faces[b][a.cssFontWeight][a.cssFontStyle]=a;return this.faces[b][a.cssFontWeight][a.cssFontStyle]=a},drawText:function(a){for(var b=this.getFace(),c=this.size/b.resolution,d=
0,e=(""+a).split(""),f=e.length,g=[],a=0;a<f;a++){var h=new THREE.Path,h=this.extractGlyphPoints(e[a],b,c,d,h),d=d+h.offset;g.push(h.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(a,b,c,d,e){var f=[],g,h,i,l,k,n,q,o,p,m,r,s=b.glyphs[a]||b.glyphs["?"];if(s){if(s.o){b=s._cachedOutline||(s._cachedOutline=s.o.split(" "));l=b.length;for(a=0;a<l;)switch(i=b[a++],i){case "m":i=b[a++]*c+d;k=b[a++]*c;f.push(new THREE.Vector2(i,k));e.moveTo(i,k);break;case "l":i=b[a++]*c+d;k=b[a++]*c;f.push(new THREE.Vector2(i,
k));e.lineTo(i,k);break;case "q":i=b[a++]*c+d;k=b[a++]*c;o=b[a++]*c+d;p=b[a++]*c;e.quadraticCurveTo(o,p,i,k);if(g=f[f.length-1]){n=g.x;q=g.y;for(g=1,h=this.divisions;g<=h;g++){var t=g/h,u=THREE.Shape.Utils.b2(t,n,o,i),t=THREE.Shape.Utils.b2(t,q,p,k);f.push(new THREE.Vector2(u,t))}}break;case "b":if(i=b[a++]*c+d,k=b[a++]*c,o=b[a++]*c+d,p=b[a++]*-c,m=b[a++]*c+d,r=b[a++]*-c,e.bezierCurveTo(i,k,o,p,m,r),g=f[f.length-1]){n=g.x;q=g.y;for(g=1,h=this.divisions;g<=h;g++)t=g/h,u=THREE.Shape.Utils.b3(t,n,o,
m,i),t=THREE.Shape.Utils.b3(t,q,p,r,k),f.push(new THREE.Vector2(u,t))}}}return{offset:s.ha*c,points:f,path:e}}}};
(function(a){var b=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return 0.5*e};a.Triangulate=function(a,d){var e=a.length;if(3>e)return null;var f=[],g=[],h=[],i,l,k;if(0<b(a))for(l=0;l<e;l++)g[l]=l;else for(l=0;l<e;l++)g[l]=e-1-l;var n=2*e;for(l=e-1;2<e;){if(0>=n--){console.log("Warning, unable to triangulate polygon!");break}i=l;e<=i&&(i=0);l=i+1;e<=l&&(l=0);k=l+1;e<=k&&(k=0);var q;a:{q=a;var o=i,p=l,m=k,r=e,s=g,t=void 0,u=void 0,v=void 0,x=void 0,B=void 0,
D=void 0,C=void 0,A=void 0,H=void 0,u=q[s[o]].x,v=q[s[o]].y,x=q[s[p]].x,B=q[s[p]].y,D=q[s[m]].x,C=q[s[m]].y;if(1.0E-10>(x-u)*(C-v)-(B-v)*(D-u))q=!1;else{for(t=0;t<r;t++)if(!(t==o||t==p||t==m)){var A=q[s[t]].x,H=q[s[t]].y,I=void 0,N=void 0,$=void 0,K=void 0,Q=void 0,L=void 0,G=void 0,j=void 0,W=void 0,y=void 0,E=void 0,S=void 0,I=$=Q=void 0,I=D-x,N=C-B,$=u-D,K=v-C,Q=x-u,L=B-v,G=A-u,j=H-v,W=A-x,y=H-B,E=A-D,S=H-C,I=I*y-N*W,Q=Q*j-L*G,$=$*S-K*E;if(0<=I&&0<=$&&0<=Q){q=!1;break a}}q=!0}}if(q){f.push([a[g[i]],
a[g[l]],a[g[k]]]);h.push([g[i],g[l],g[k]]);for(i=l,k=l+1;k<e;i++,k++)g[i]=g[k];e--;n=2*e}}return d?h:f};a.Triangulate.area=b;return a})(THREE.FontUtils);self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};
THREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.radius=a||100;this.tube=b||40;this.segmentsR=c||8;this.segmentsT=d||6;this.arc=e||2*Math.PI;e=new THREE.Vector3;a=[];b=[];for(c=0;c<=this.segmentsR;c++)for(d=0;d<=this.segmentsT;d++){var f=d/this.segmentsT*this.arc,g=2*c/this.segmentsR*Math.PI;e.x=this.radius*Math.cos(f);e.y=this.radius*Math.sin(f);var h=new THREE.Vector3;h.x=(this.radius+this.tube*Math.cos(g))*Math.cos(f);h.y=(this.radius+this.tube*Math.cos(g))*Math.sin(f);h.z=
this.tube*Math.sin(g);this.vertices.push(new THREE.Vertex(h));a.push(new THREE.UV(d/this.segmentsT,1-c/this.segmentsR));b.push(h.clone().subSelf(e).normalize())}for(c=1;c<=this.segmentsR;c++)for(d=1;d<=this.segmentsT;d++){var e=(this.segmentsT+1)*c+d-1,f=(this.segmentsT+1)*(c-1)+d-1,g=(this.segmentsT+1)*(c-1)+d,h=(this.segmentsT+1)*c+d,i=new THREE.Face4(e,f,g,h,[b[e],b[f],b[g],b[h]]);i.normal.addSelf(b[e]);i.normal.addSelf(b[f]);i.normal.addSelf(b[g]);i.normal.addSelf(b[h]);i.normal.normalize();this.faces.push(i);
this.faceVertexUvs[0].push([a[e].clone(),a[f].clone(),a[g].clone(),a[h].clone()])}this.computeCentroids()};THREE.TorusGeometry.prototype=new THREE.Geometry;THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry;
THREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){function h(a,b,c,d,e,f){var g=Math.cos(a);Math.cos(b);b=Math.sin(a);a*=c/d;c=Math.cos(a);g*=0.5*e*(2+c);b=0.5*e*(2+c)*b;e=0.5*f*e*Math.sin(a);return new THREE.Vector3(g,b,e)}THREE.Geometry.call(this);this.radius=a||200;this.tube=b||40;this.segmentsR=c||64;this.segmentsT=d||8;this.p=e||2;this.q=f||3;this.heightScale=g||1;this.grid=Array(this.segmentsR);c=new THREE.Vector3;d=new THREE.Vector3;e=new THREE.Vector3;for(a=0;a<this.segmentsR;++a){this.grid[a]=
Array(this.segmentsT);for(b=0;b<this.segmentsT;++b){var i=2*(a/this.segmentsR)*this.p*Math.PI,g=2*(b/this.segmentsT)*Math.PI,f=h(i,g,this.q,this.p,this.radius,this.heightScale),i=h(i+0.01,g,this.q,this.p,this.radius,this.heightScale);c.sub(i,f);d.add(i,f);e.cross(c,d);d.cross(e,c);e.normalize();d.normalize();i=-this.tube*Math.cos(g);g=this.tube*Math.sin(g);f.x+=i*d.x+g*e.x;f.y+=i*d.y+g*e.y;f.z+=i*d.z+g*e.z;this.grid[a][b]=this.vertices.push(new THREE.Vertex(new THREE.Vector3(f.x,f.y,f.z)))-1}}for(a=
0;a<this.segmentsR;++a)for(b=0;b<this.segmentsT;++b){var e=(a+1)%this.segmentsR,f=(b+1)%this.segmentsT,c=this.grid[a][b],d=this.grid[e][b],e=this.grid[e][f],f=this.grid[a][f],g=new THREE.UV(a/this.segmentsR,b/this.segmentsT),i=new THREE.UV((a+1)/this.segmentsR,b/this.segmentsT),l=new THREE.UV((a+1)/this.segmentsR,(b+1)/this.segmentsT),k=new THREE.UV(a/this.segmentsR,(b+1)/this.segmentsT);this.faces.push(new THREE.Face4(c,d,e,f));this.faceVertexUvs[0].push([g,i,l,k])}this.computeCentroids();this.computeFaceNormals();
this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=new THREE.Geometry;THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry;
THREE.AxisHelper=function(){THREE.Object3D.call(this);var a=new THREE.Geometry;a.vertices.push(new THREE.Vertex);a.vertices.push(new THREE.Vertex(new THREE.Vector3(0,100,0)));var b=new THREE.CylinderGeometry(0,5,25,5,1),c;c=new THREE.Line(a,new THREE.LineBasicMaterial({color:16711680}));c.rotation.z=-Math.PI/2;this.add(c);c=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:16711680}));c.position.x=100;c.rotation.z=-Math.PI/2;this.add(c);c=new THREE.Line(a,new THREE.LineBasicMaterial({color:65280}));
this.add(c);c=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:65280}));c.position.y=100;this.add(c);c=new THREE.Line(a,new THREE.LineBasicMaterial({color:255}));c.rotation.x=Math.PI/2;this.add(c);c=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:255}));c.position.z=100;c.rotation.x=Math.PI/2;this.add(c)};THREE.AxisHelper.prototype=new THREE.Object3D;THREE.AxisHelper.prototype.constructor=THREE.AxisHelper;
THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.lineGeometry.vertices.push(new THREE.Vertex(new THREE.Vector3));d.lineGeometry.colors.push(new THREE.Color(b));void 0===d.pointMap[a]&&(d.pointMap[a]=[]);d.pointMap[a].push(d.lineGeometry.vertices.length-1)}THREE.Object3D.call(this);var d=this;this.lineGeometry=new THREE.Geometry;this.lineMaterial=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.pointMap={};b("n1","n2",16755200);b("n2",
"n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);
this.update(a);this.lines=new THREE.Line(this.lineGeometry,this.lineMaterial,THREE.LinePieces);this.add(this.lines)};THREE.CameraHelper.prototype=new THREE.Object3D;THREE.CameraHelper.prototype.constructor=THREE.CameraHelper;
THREE.CameraHelper.prototype.update=function(a){function b(a,b,f,g){THREE.CameraHelper.__v.set(b,f,g);THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c);a=c.pointMap[a];if(void 0!==a){b=0;for(f=a.length;b<f;b++)c.lineGeometry.vertices[a[b]].position.copy(THREE.CameraHelper.__v)}}var c=this;THREE.CameraHelper.__c.projectionMatrix.copy(a.projectionMatrix);b("c",0,0,-1);b("t",0,0,1);b("n1",-1,-1,-1);b("n2",1,-1,-1);b("n3",-1,1,-1);b("n4",1,1,-1);b("f1",-1,-1,
1);b("f2",1,-1,1);b("f3",-1,1,1);b("f4",1,1,1);b("u1",0.7,1.1,-1);b("u2",-0.7,1.1,-1);b("u3",0,2,-1);b("cf1",-1,0,1);b("cf2",1,0,1);b("cf3",0,-1,1);b("cf4",0,1,1);b("cn1",-1,0,-1);b("cn2",1,0,-1);b("cn3",0,-1,-1);b("cn4",0,1,-1);this.lineGeometry.__dirtyVertices=!0};THREE.CameraHelper.__projector=new THREE.Projector;THREE.CameraHelper.__v=new THREE.Vector3;THREE.CameraHelper.__c=new THREE.Camera;
THREE.SubdivisionModifier=function(a){this.subdivisions=void 0===a?1:a;this.useOldVertexColors=!1;this.supportUVs=!0};THREE.SubdivisionModifier.prototype.constructor=THREE.SubdivisionModifier;THREE.SubdivisionModifier.prototype.modify=function(a){for(var b=this.subdivisions;0<b--;)this.smooth(a)};
THREE.SubdivisionModifier.prototype.smooth=function(a){function b(a,b,c,d,h,i){var l=new THREE.Face4(a,b,c,d,null,h.color,h.material);if(g.useOldVertexColors){l.vertexColors=[];for(var k,m,n,o=0;4>o;o++){n=i[o];k=new THREE.Color;k.setRGB(0,0,0);for(var p=0;p<n.length;p++)m=h.vertexColors[n[p]-1],k.r+=m.r,k.g+=m.g,k.b+=m.b;k.r/=n.length;k.g/=n.length;k.b/=n.length;l.vertexColors[o]=k}}e.push(l);(!g.supportUVs||0!=q.length)&&f.push([q[a],q[b],q[c],q[d]])}function c(a,b){return Math.min(a,b)+"_"+Math.max(a,
b)}var d=[],e=[],f=[],g=this,h=a.vertices,d=a.faces,i=h.concat(),l=[],k={},n={},q=[],o,p,m,r,s,t=a.faceVertexUvs[0];for(o=0,p=t.length;o<p;o++)for(m=0,r=t[o].length;m<r;m++)s=d[o]["abcd".charAt(m)],q[s]||(q[s]=t[o][m]);var u;for(o=0,p=d.length;o<p;o++)if(s=d[o],l.push(s.centroid),i.push(new THREE.Vertex(s.centroid)),g.supportUVs&&0!=q.length){u=new THREE.UV;if(s instanceof THREE.Face3)u.u=q[s.a].u+q[s.b].u+q[s.c].u,u.v=q[s.a].v+q[s.b].v+q[s.c].v,u.u/=3,u.v/=3;else if(s instanceof THREE.Face4)u.u=
q[s.a].u+q[s.b].u+q[s.c].u+q[s.d].u,u.v=q[s.a].v+q[s.b].v+q[s.c].v+q[s.d].v,u.u/=4,u.v/=4;q.push(u)}p=function(a){function b(a,c,d){void 0===a[c]&&(a[c]=[]);a[c].push(d)}var d,e,f,g,h={};for(d=0,e=a.faces.length;d<e;d++)f=a.faces[d],f instanceof THREE.Face3?(g=c(f.a,f.b),b(h,g,d),g=c(f.b,f.c),b(h,g,d),g=c(f.c,f.a),b(h,g,d)):f instanceof THREE.Face4&&(g=c(f.a,f.b),b(h,g,d),g=c(f.b,f.c),b(h,g,d),g=c(f.c,f.d),b(h,g,d),g=c(f.d,f.a),b(h,g,d));return h}(a);var v=0,t=h.length,x,B,D={},C={},A=function(a,
b){void 0===D[a]&&(D[a]=[]);D[a].push(b)},H=function(a,b){void 0===C[a]&&(C[a]={});C[a][b]=null};for(o in p){u=p[o];x=o.split("_");B=x[0];x=x[1];A(B,[B,x]);A(x,[B,x]);for(m=0,r=u.length;m<r;m++)s=u[m],H(B,s,o),H(x,s,o);2>u.length&&(n[o]=!0)}for(o in p)if(u=p[o],s=u[0],u=u[1],x=o.split("_"),B=x[0],x=x[1],r=new THREE.Vector3,n[o]?(r.addSelf(h[B].position),r.addSelf(h[x].position),r.multiplyScalar(0.5)):(r.addSelf(l[s]),r.addSelf(l[u]),r.addSelf(h[B].position),r.addSelf(h[x].position),r.multiplyScalar(0.25)),
k[o]=t+d.length+v,i.push(new THREE.Vertex(r)),v++,g.supportUVs&&0!=q.length)u=new THREE.UV,u.u=q[B].u+q[x].u,u.v=q[B].v+q[x].v,u.u/=2,u.v/=2,q.push(u);var I,N;x=["123","12","2","23"];r=["123","23","3","31"];var A=["123","31","1","12"],H=["1234","12","2","23"],$=["1234","23","3","34"],K=["1234","34","4","41"],Q=["1234","41","1","12"];for(o=0,p=l.length;o<p;o++)s=d[o],u=t+o,s instanceof THREE.Face3?(v=c(s.a,s.b),B=c(s.b,s.c),I=c(s.c,s.a),b(u,k[v],s.b,k[B],s,x),b(u,k[B],s.c,k[I],s,r),b(u,k[I],s.a,k[v],
s,A)):s instanceof THREE.Face4?(v=c(s.a,s.b),B=c(s.b,s.c),I=c(s.c,s.d),N=c(s.d,s.a),b(u,k[v],s.b,k[B],s,H),b(u,k[B],s.c,k[I],s,$),b(u,k[I],s.d,k[N],s,K),b(u,k[N],s.a,k[v],s,Q)):console.log("face should be a face!",s);d=i;i=new THREE.Vector3;k=new THREE.Vector3;for(o=0,p=h.length;o<p;o++)if(void 0!==D[o]){i.set(0,0,0);k.set(0,0,0);s=new THREE.Vector3(0,0,0);u=0;for(m in C[o])i.addSelf(l[m]),u++;v=0;t=D[o].length;for(m=0;m<t;m++)n[c(D[o][m][0],D[o][m][1])]&&v++;if(2!=v){i.divideScalar(u);for(m=0;m<
t;m++)u=D[o][m],u=h[u[0]].position.clone().addSelf(h[u[1]].position).divideScalar(2),k.addSelf(u);k.divideScalar(t);s.addSelf(h[o].position);s.multiplyScalar(t-3);s.addSelf(i);s.addSelf(k.multiplyScalar(2));s.divideScalar(t);d[o].position=s}}a.vertices=d;a.faces=e;a.faceVertexUvs[0]=f;delete a.__tmpVertices;a.computeCentroids();a.computeFaceNormals();a.computeVertexNormals()};
THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/a.total).toFixed(0)+
"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlbase:function(a){a=a.split("/");a.pop();return 1>a.length?"":a.join("/")+"/"},initMaterials:function(a,b,c){a.materials=[];for(var d=0;d<b.length;++d)a.materials[d]=THREE.Loader.prototype.createMaterial(b[d],c)},hasNormals:function(a){var b,c,d=a.materials.length;for(c=0;c<d;c++)if(b=a.materials[c],b instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;
return Math.floor(a)==a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,b){var e=new Image;e.onload=function(){if(!c(this.width)||!c(this.height)){var b=d(this.width),e=d(this.height);a.image.width=b;a.image.height=e;a.image.getContext("2d").drawImage(this,0,0,b,e)}else a.image=this;a.needsUpdate=!0};e.crossOrigin=h.crossOrigin;e.src=b}function f(a,c,d,f,g,h){var i=document.createElement("canvas");a[c]=new THREE.Texture(i);a[c].sourceFile=d;if(f){a[c].repeat.set(f[0],
f[1]);if(1!=f[0])a[c].wrapS=THREE.RepeatWrapping;if(1!=f[1])a[c].wrapT=THREE.RepeatWrapping}g&&a[c].offset.set(g[0],g[1]);if(h){f={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping};if(void 0!==f[h[0]])a[c].wrapS=f[h[0]];if(void 0!==f[h[1]])a[c].wrapT=f[h[1]]}e(a[c],b+"/"+d)}function g(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,i="MeshLambertMaterial",l={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,wireframe:a.wireframe};a.shading&&("Phong"==a.shading?
i="MeshPhongMaterial":"Basic"==a.shading&&(i="MeshBasicMaterial"));if(a.blending)if("Additive"==a.blending)l.blending=THREE.AdditiveBlending;else if("Subtractive"==a.blending)l.blending=THREE.SubtractiveBlending;else if("Multiply"==a.blending)l.blending=THREE.MultiplyBlending;if(void 0!==a.transparent||1>a.opacity)l.transparent=a.transparent;if(void 0!==a.depthTest)l.depthTest=a.depthTest;if(void 0!==a.vertexColors)if("face"==a.vertexColors)l.vertexColors=THREE.FaceColors;else if(a.vertexColors)l.vertexColors=
THREE.VertexColors;if(a.colorDiffuse)l.color=g(a.colorDiffuse);else if(a.DbgColor)l.color=a.DbgColor;if(a.colorSpecular)l.specular=g(a.colorSpecular);if(a.colorAmbient)l.ambient=g(a.colorAmbient);if(a.transparency)l.opacity=a.transparency;if(a.specularCoef)l.shininess=a.specularCoef;a.mapDiffuse&&b&&f(l,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap);a.mapLight&&b&&f(l,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap);a.mapNormal&&b&&f(l,"normalMap",
a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap);a.mapSpecular&&b&&f(l,"specularMap",a.mapSpecular,a.mapSpecularRepeat,a.mapSpecularOffset,a.mapSpecularWrap);if(a.mapNormal){var i=THREE.ShaderUtils.lib.normal,k=THREE.UniformsUtils.clone(i.uniforms);k.tNormal.texture=l.normalMap;if(a.mapNormalFactor)k.uNormalScale.value=a.mapNormalFactor;if(l.map)k.tDiffuse.texture=l.map,k.enableDiffuse.value=!0;if(l.specularMap)k.tSpecular.texture=l.specularMap,k.enableSpecular.value=!0;if(l.lightMap)k.tAO.texture=
l.lightMap,k.enableAO.value=!0;k.uDiffuseColor.value.setHex(l.color);k.uSpecularColor.value.setHex(l.specular);k.uAmbientColor.value.setHex(l.ambient);k.uShininess.value=l.shininess;if(void 0!==l.opacity)k.uOpacity.value=l.opacity;l=new THREE.ShaderMaterial({fragmentShader:i.fragmentShader,vertexShader:i.vertexShader,uniforms:k,lights:!0,fog:!0})}else l=new THREE[i](l);if(void 0!==a.DbgName)l.name=a.DbgName;return l}};THREE.BinaryLoader=function(a){THREE.Loader.call(this,a)};
THREE.BinaryLoader.prototype=new THREE.Loader;THREE.BinaryLoader.prototype.constructor=THREE.BinaryLoader;THREE.BinaryLoader.prototype.supr=THREE.Loader.prototype;
THREE.BinaryLoader.prototype.load=function(a,b,c,d){if(a instanceof Object)console.warn("DEPRECATED: BinaryLoader( parameters ) is now BinaryLoader( url, callback, texturePath, binaryPath )."),d=a,a=d.model,b=d.callback,c=d.texture_path,d=d.bin_path;var c=c?c:this.extractUrlbase(a),d=d?d:this.extractUrlbase(a),e=this.showProgress?THREE.Loader.prototype.updateProgress:null;this.onLoadStart();this.loadAjaxJSON(this,a,b,c,d,e)};
THREE.BinaryLoader.prototype.loadAjaxJSON=function(a,b,c,d,e,f){var g=new XMLHttpRequest;g.onreadystatechange=function(){if(4==g.readyState)if(200==g.status||0==g.status)try{var h=JSON.parse(g.responseText);void 0===h.metadata||void 0===h.metadata.formatVersion||3!==h.metadata.formatVersion?console.error("Deprecated file format."):a.loadAjaxBuffers(h,c,e,d,f)}catch(i){console.error(i),console.warn("DEPRECATED: ["+b+"] seems to be using old model format")}else console.error("Couldn't load ["+b+"] ["+
g.status+"]")};g.open("GET",b,!0);g.overrideMimeType&&g.overrideMimeType("text/plain; charset=x-user-defined");g.setRequestHeader("Content-Type","text/plain");g.send(null)};
THREE.BinaryLoader.prototype.loadAjaxBuffers=function(a,b,c,d,e){var f=new XMLHttpRequest,g=c+"/"+a.buffers,h=0;f.onreadystatechange=function(){4==f.readyState?200==f.status||0==f.status?THREE.BinaryLoader.prototype.createBinModel(f.response,b,d,a.materials):console.error("Couldn't load ["+g+"] ["+f.status+"]"):3==f.readyState?e&&(0==h&&(h=f.getResponseHeader("Content-Length")),e({total:h,loaded:f.responseText.length})):2==f.readyState&&(h=f.getResponseHeader("Content-Length"))};f.open("GET",g,!0);
f.responseType="arraybuffer";f.send(null)};
THREE.BinaryLoader.prototype.createBinModel=function(a,b,c,d){var e=function(b){var c,e,i,l,k,n,q,o,p,m,r,s,t,u,v,x;function B(a){return a%4?4-a%4:0}function D(a,b){return(new Uint8Array(a,b,1))[0]}function C(a,b){return(new Uint32Array(a,b,1))[0]}function A(b,c){var d,e,f,g,h,i,l,k,m=new Uint32Array(a,c,3*b);for(d=0;d<b;d++){e=m[3*d];f=m[3*d+1];g=m[3*d+2];h=j[2*e];e=j[2*e+1];i=j[2*f];l=j[2*f+1];f=j[2*g];k=j[2*g+1];g=Q.faceVertexUvs[0];var n=[];n.push(new THREE.UV(h,e));n.push(new THREE.UV(i,l));
n.push(new THREE.UV(f,k));g.push(n)}}function H(b,c){var d,e,f,g,h,i,l,k,m,n,o=new Uint32Array(a,c,4*b);for(d=0;d<b;d++){e=o[4*d];f=o[4*d+1];g=o[4*d+2];h=o[4*d+3];i=j[2*e];e=j[2*e+1];l=j[2*f];m=j[2*f+1];k=j[2*g];n=j[2*g+1];g=j[2*h];f=j[2*h+1];h=Q.faceVertexUvs[0];var p=[];p.push(new THREE.UV(i,e));p.push(new THREE.UV(l,m));p.push(new THREE.UV(k,n));p.push(new THREE.UV(g,f));h.push(p)}}function I(b,c,d){for(var e,f,g,h,c=new Uint32Array(a,c,3*b),j=new Uint16Array(a,d,b),d=0;d<b;d++)e=c[3*d],f=c[3*
d+1],g=c[3*d+2],h=j[d],Q.faces.push(new THREE.Face3(e,f,g,null,null,h))}function N(b,c,d){for(var e,f,g,h,j,c=new Uint32Array(a,c,4*b),i=new Uint16Array(a,d,b),d=0;d<b;d++)e=c[4*d],f=c[4*d+1],g=c[4*d+2],h=c[4*d+3],j=i[d],Q.faces.push(new THREE.Face4(e,f,g,h,null,null,j))}function $(b,c,d,e){for(var f,g,h,j,i,l,k,c=new Uint32Array(a,c,3*b),d=new Uint32Array(a,d,3*b),m=new Uint16Array(a,e,b),e=0;e<b;e++){f=c[3*e];g=c[3*e+1];h=c[3*e+2];i=d[3*e];l=d[3*e+1];k=d[3*e+2];j=m[e];var n=G[3*l],o=G[3*l+1];l=
G[3*l+2];var p=G[3*k],q=G[3*k+1];k=G[3*k+2];Q.faces.push(new THREE.Face3(f,g,h,[new THREE.Vector3(G[3*i],G[3*i+1],G[3*i+2]),new THREE.Vector3(n,o,l),new THREE.Vector3(p,q,k)],null,j))}}function K(b,c,d,e){for(var f,g,h,j,i,l,k,m,n,c=new Uint32Array(a,c,4*b),d=new Uint32Array(a,d,4*b),o=new Uint16Array(a,e,b),e=0;e<b;e++){f=c[4*e];g=c[4*e+1];h=c[4*e+2];j=c[4*e+3];l=d[4*e];k=d[4*e+1];m=d[4*e+2];n=d[4*e+3];i=o[e];var p=G[3*k],q=G[3*k+1];k=G[3*k+2];var r=G[3*m],s=G[3*m+1];m=G[3*m+2];var t=G[3*n],u=G[3*
n+1];n=G[3*n+2];Q.faces.push(new THREE.Face4(f,g,h,j,[new THREE.Vector3(G[3*l],G[3*l+1],G[3*l+2]),new THREE.Vector3(p,q,k),new THREE.Vector3(r,s,m),new THREE.Vector3(t,u,n)],null,i))}}var Q=this,L=0,G=[],j=[],W,y;THREE.Geometry.call(this);THREE.Loader.prototype.initMaterials(Q,d,b);c=function(a,b,c){for(var a=new Uint8Array(a,b,c),d="",e=0;e<c;e++)d+=String.fromCharCode(a[b+e]);return d}(a,L,12);e=D(a,L+12);D(a,L+13);D(a,L+14);D(a,L+15);i=D(a,L+16);l=D(a,L+17);k=D(a,L+18);n=D(a,L+19);q=C(a,L+20);
o=C(a,L+20+4);p=C(a,L+20+8);b=C(a,L+20+12);m=C(a,L+20+16);r=C(a,L+20+20);s=C(a,L+20+24);t=C(a,L+20+28);u=C(a,L+20+32);v=C(a,L+20+36);x=C(a,L+20+40);"Three.js 003"!==c&&console.warn("DEPRECATED: binary model seems to be using old format");L+=e;c=3*i+n;y=4*i+n;e=b*c;W=m*(c+3*l);i=r*(c+3*k);n=s*(c+3*l+3*k);c=t*y;l=u*(y+4*l);k=v*(y+4*k);L+=function(b){var b=new Float32Array(a,b,3*q),c,d,e,f;for(c=0;c<q;c++)d=b[3*c],e=b[3*c+1],f=b[3*c+2],Q.vertices.push(new THREE.Vertex(new THREE.Vector3(d,e,f)));return 3*
q*Float32Array.BYTES_PER_ELEMENT}(L);L+=function(b){if(o){var b=new Int8Array(a,b,3*o),c,d,e,f;for(c=0;c<o;c++)d=b[3*c],e=b[3*c+1],f=b[3*c+2],G.push(d/127,e/127,f/127)}return 3*o*Int8Array.BYTES_PER_ELEMENT}(L);L+=B(3*o);L+=function(b){if(p){var b=new Float32Array(a,b,2*p),c,d,e;for(c=0;c<p;c++)d=b[2*c],e=b[2*c+1],j.push(d,e)}return 2*p*Float32Array.BYTES_PER_ELEMENT}(L);e=L+e+B(2*b);W=e+W+B(2*m);i=W+i+B(2*r);n=i+n+B(2*s);c=n+c+B(2*t);l=c+l+B(2*u);k=l+k+B(2*v);(function(a){if(r){var b=a+3*r*Uint32Array.BYTES_PER_ELEMENT;
I(r,a,b+3*r*Uint32Array.BYTES_PER_ELEMENT);A(r,b)}})(W);(function(a){if(s){var b=a+3*s*Uint32Array.BYTES_PER_ELEMENT,c=b+3*s*Uint32Array.BYTES_PER_ELEMENT;$(s,a,b,c+3*s*Uint32Array.BYTES_PER_ELEMENT);A(s,c)}})(i);(function(a){if(v){var b=a+4*v*Uint32Array.BYTES_PER_ELEMENT;N(v,a,b+4*v*Uint32Array.BYTES_PER_ELEMENT);H(v,b)}})(l);(function(a){if(x){var b=a+4*x*Uint32Array.BYTES_PER_ELEMENT,c=b+4*x*Uint32Array.BYTES_PER_ELEMENT;K(x,a,b,c+4*x*Uint32Array.BYTES_PER_ELEMENT);H(x,c)}})(k);b&&I(b,L,L+3*b*
Uint32Array.BYTES_PER_ELEMENT);(function(a){if(m){var b=a+3*m*Uint32Array.BYTES_PER_ELEMENT;$(m,a,b,b+3*m*Uint32Array.BYTES_PER_ELEMENT)}})(e);t&&N(t,n,n+4*t*Uint32Array.BYTES_PER_ELEMENT);(function(a){if(u){var b=a+4*u*Uint32Array.BYTES_PER_ELEMENT;K(u,a,b,b+4*u*Uint32Array.BYTES_PER_ELEMENT)}})(c);this.computeCentroids();this.computeFaceNormals();THREE.Loader.prototype.hasNormals(this)&&this.computeTangents()};e.prototype=new THREE.Geometry;e.prototype.constructor=e;b(new e(c))};
THREE.ColladaLoader=function(){function a(a,d,e){V=a;d=d||da;void 0!==e&&(a=e.split("/"),a.pop(),ib=1>a.length?"":a.join("/")+"/");if((a=V.evaluate("//dae:asset",V,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null).iterateNext())&&a.childNodes)for(e=0;e<a.childNodes.length;e++){var j=a.childNodes[e];switch(j.nodeName){case "unit":(j=j.getAttribute("meter"))&&parseFloat(j);break;case "up_axis":Ba=j.textContent.charAt(0)}}if(!ra.convertUpAxis||Ba===ra.upAxis)ja=null;else switch(Ba){case "X":ja="Y"===ra.upAxis?
"XtoY":"XtoZ";break;case "Y":ja="X"===ra.upAxis?"YtoX":"YtoZ";break;case "Z":ja="X"===ra.upAxis?"ZtoX":"ZtoY"}Qa=b("//dae:library_images/dae:image",g,"image");Ja=b("//dae:library_materials/dae:material",C,"material");Da=b("//dae:library_effects/dae:effect",$,"effect");Aa=b("//dae:library_geometries/dae:geometry",r,"geometry");za=b("//dae:library_controllers/dae:controller",h,"controller");la=b("//dae:library_animations/dae:animation",Q,"animation");Ta=b(".//dae:library_visual_scenes/dae:visual_scene",
k,"visual_scene");db=[];Wa=[];(a=V.evaluate(".//dae:scene/dae:instance_visual_scene",V,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null).iterateNext())?(a=a.getAttribute("url").replace(/^#/,""),ca=Ta[a]):ca=null;ba=new THREE.Object3D;for(a=0;a<ca.nodes.length;a++)ba.add(f(ca.nodes[a]));$a=[];c(ba);a={scene:ba,morphs:db,skins:Wa,animations:$a,dae:{images:Qa,materials:Ja,effects:Da,geometries:Aa,controllers:za,animations:la,visualScenes:Ta,scene:ca}};d&&d(a);return a}function b(a,b,c){for(var a=V.evaluate(a,
V,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null),d={},e=a.iterateNext(),f=0;e;){e=(new b).parse(e);if(!e.id||0==e.id.length)e.id=c+f++;d[e.id]=e;e=a.iterateNext()}return d}function c(a){var b=ca.getChildById(a.name,!0),d=null;if(b&&b.keys){d={fps:60,hierarchy:[{node:b,keys:b.keys,sids:b.sids}],node:a,name:"animation_"+a.name,length:0};$a.push(d);for(var e=0,f=b.keys.length;e<f;e++)d.length=Math.max(d.length,b.keys[e].time)}else d={hierarchy:[{keys:[],sids:[]}]};e=0;for(f=a.children.length;e<f;e++)for(var b=
0,g=c(a.children[e]).hierarchy.length;b<g;b++)d.hierarchy.push({keys:[],sids:[]});return d}function d(a,b,c,e){a.world=a.world||new THREE.Matrix4;a.world.copy(a.matrix);if(a.channels&&a.channels.length){var f=a.channels[0].sampler.output[c];f instanceof THREE.Matrix4&&a.world.copy(f)}e&&a.world.multiply(e,a.world);b.push(a);for(e=0;e<a.nodes.length;e++)d(a.nodes[e],b,c,a.world)}function e(a,b,c){var e,f=za[b.url];if(!f||!f.skin)console.log("ColladaLoader: Could not find skin controller.");else if(!b.skeleton||
!b.skeleton.length)console.log("ColladaLoader: Could not find the skeleton for the skin. ");else{var c=1E6,g=-c,h=0;for(e in la)for(var j=la[e],i=0;i<j.sampler.length;i++){var l=j.sampler[i];l.create();c=Math.min(c,l.startTime);g=Math.max(g,l.endTime);h=Math.max(h,l.input.length)}e=h;for(var b=ca.getChildById(b.skeleton[0],!0)||ca.getChildBySid(b.skeleton[0],!0),k,m,g=new THREE.Vector3,n,i=0;i<a.vertices.length;i++)f.skin.bindShapeMatrix.multiplyVector3(a.vertices[i].position);for(c=0;c<e;c++){h=
[];j=[];for(i=0;i<a.vertices.length;i++)j.push(new THREE.Vertex(new THREE.Vector3));d(b,h,c);i=h;l=f.skin;for(m=0;m<i.length;m++)if(k=i[m],n=-1,"JOINT"==k.type){for(var o=0;o<l.joints.length;o++)if(k.sid==l.joints[o]){n=o;break}if(0<=n){o=l.invBindMatrices[n];k.invBindMatrix=o;k.skinningMatrix=new THREE.Matrix4;k.skinningMatrix.multiply(k.world,o);k.weights=[];for(o=0;o<l.weights.length;o++)for(var p=0;p<l.weights[o].length;p++){var q=l.weights[o][p];q.joint==n&&k.weights.push(q)}}else throw"ColladaLoader: Could not find joint '"+
k.sid+"'.";}for(i=0;i<h.length;i++)if("JOINT"==h[i].type)for(l=0;l<h[i].weights.length;l++)k=h[i].weights[l],m=k.index,k=k.weight,n=a.vertices[m],m=j[m],g.x=n.position.x,g.y=n.position.y,g.z=n.position.z,h[i].skinningMatrix.multiplyVector3(g),m.position.x+=g.x*k,m.position.y+=g.y*k,m.position.z+=g.z*k;a.morphTargets.push({name:"target_"+c,vertices:j})}}}function f(a){var b=new THREE.Object3D,c,d,g,h;for(g=0;g<a.controllers.length;g++){var j=za[a.controllers[g].url];switch(j.type){case "skin":if(Aa[j.skin.source]){var i=
new m;i.url=j.skin.source;i.instance_material=a.controllers[g].instance_material;a.geometries.push(i);c=a.controllers[g]}else if(za[j.skin.source]&&(d=j=za[j.skin.source],j.morph&&Aa[j.morph.source]))i=new m,i.url=j.morph.source,i.instance_material=a.controllers[g].instance_material,a.geometries.push(i);break;case "morph":if(Aa[j.morph.source])i=new m,i.url=j.morph.source,i.instance_material=a.controllers[g].instance_material,a.geometries.push(i),d=a.controllers[g];console.log("ColladaLoader: Morph-controller partially supported.")}}for(g=
0;g<a.geometries.length;g++){var j=a.geometries[g],i=j.instance_material,j=Aa[j.url],l={},k=[],n=0,p;if(j&&j.mesh&&j.mesh.primitives){if(0==b.name.length)b.name=j.id;if(i)for(h=0;h<i.length;h++){p=i[h];var q=Da[Ja[p.target].instance_effect.url].shader;q.material.opacity=!q.material.opacity?1:q.material.opacity;l[p.symbol]=n;k.push(q.material);p=q.material;n++}i=p||new THREE.MeshLambertMaterial({color:14540253,shading:THREE.FlatShading});j=j.mesh.geometry3js;if(1<n){i=new THREE.MeshFaceMaterial;j.materials=
k;for(h=0;h<j.faces.length;h++)k=j.faces[h],k.materialIndex=l[k.daeMaterial]}if(void 0!==c)e(j,c),i.morphTargets=!0,i=new THREE.SkinnedMesh(j,i),i.skeleton=c.skeleton,i.skinController=za[c.url],i.skinInstanceController=c,i.name="skin_"+Wa.length,Wa.push(i);else if(void 0!==d){h=j;l=d instanceof o?za[d.url]:d;if(!l||!l.morph)console.log("could not find morph controller!");else{l=l.morph;for(k=0;k<l.targets.length;k++)if(n=Aa[l.targets[k]],n.mesh&&n.mesh.primitives&&n.mesh.primitives.length)n=n.mesh.primitives[0].geometry,
n.vertices.length===h.vertices.length&&h.morphTargets.push({name:"target_1",vertices:n.vertices});h.morphTargets.push({name:"target_Z",vertices:h.vertices})}i.morphTargets=!0;i=new THREE.Mesh(j,i);i.name="morph_"+db.length;db.push(i)}else i=new THREE.Mesh(j,i);1<a.geometries.length?b.add(i):b=i}}b.name=a.id||"";b.matrix=a.matrix;c=a.matrix.decompose();b.position=c[0];b.quaternion=c[1];b.useQuaternion=!0;b.scale=c[2];ra.centerGeometry&&b.geometry&&(c=THREE.GeometryUtils.center(b.geometry),b.quaternion.multiplyVector3(c.multiplySelf(b.scale)),
b.position.subSelf(c));for(g=0;g<a.nodes.length;g++)b.add(f(a.nodes[g],a));return b}function g(){this.init_from=this.id=""}function h(){this.type=this.name=this.id="";this.morph=this.skin=null}function i(){this.weights=this.targets=this.source=this.method=null}function l(){this.source="";this.bindShapeMatrix=null;this.invBindMatrices=[];this.joints=[];this.weights=[]}function k(){this.name=this.id="";this.nodes=[];this.scene=new THREE.Object3D}function n(){this.sid=this.name=this.id="";this.nodes=
[];this.controllers=[];this.transforms=[];this.geometries=[];this.channels=[];this.matrix=new THREE.Matrix4}function q(){this.type=this.sid="";this.data=[];this.obj=null}function o(){this.url="";this.skeleton=[];this.instance_material=[]}function p(){this.target=this.symbol=""}function m(){this.url="";this.instance_material=[]}function r(){this.id="";this.mesh=null}function s(a){this.geometry=a.id;this.primitives=[];this.geometry3js=this.vertices=null}function t(){}function u(){this.material="";this.count=
0;this.inputs=[];this.vcount=null;this.p=[];this.geometry=new THREE.Geometry}function v(){this.source="";this.stride=this.count=0;this.params=[]}function x(){this.input={}}function B(){this.semantic="";this.offset=0;this.source="";this.set=0}function D(a){this.id=a;this.type=null}function C(){this.name=this.id="";this.instance_effect=null}function A(){this.color=new THREE.Color(0);this.color.setRGB(Math.random(),Math.random(),Math.random());this.color.a=1;this.texOpts=this.texcoord=this.texture=null}
function H(a,b){this.type=a;this.effect=b;this.material=null}function I(a){this.effect=a;this.format=this.init_from=null}function N(a){this.effect=a;this.mipfilter=this.magfilter=this.minfilter=this.wrap_t=this.wrap_s=this.source=null}function $(){this.name=this.id="";this.sampler=this.surface=this.shader=null}function K(){this.url=""}function Q(){this.name=this.id="";this.source={};this.sampler=[];this.channel=[]}function L(a){this.animation=a;this.target=this.source="";this.member=this.arrIndices=
this.arrSyntax=this.dotSyntax=this.sid=this.fullSid=null}function G(a){this.id="";this.animation=a;this.inputs=[];this.endTime=this.startTime=this.interpolation=this.strideOut=this.output=this.input=null;this.duration=0}function j(a){this.targets=[];this.time=a}function W(a){return"dae"==a?"http://www.collada.org/2005/11/COLLADASchema":null}function y(a){for(var a=S(a),b=[],c=0;c<a.length;c++)b.push(parseFloat(a[c]));return b}function E(a){for(var a=S(a),b=[],c=0;c<a.length;c++)b.push(parseInt(a[c],
10));return b}function S(a){return a.replace(/^\s+/,"").replace(/\s+$/,"").split(/\s+/)}function T(a,b,c){return a.hasAttribute(b)?parseInt(a.getAttribute(b),10):c}function R(a,b){if(ra.convertUpAxis&&Ba!==ra.upAxis)switch(ja){case "XtoY":var c=a[0];a[0]=b*a[1];a[1]=c;break;case "XtoZ":c=a[2];a[2]=a[1];a[1]=a[0];a[0]=c;break;case "YtoX":c=a[0];a[0]=a[1];a[1]=b*c;break;case "YtoZ":c=a[1];a[1]=b*a[2];a[2]=c;break;case "ZtoX":c=a[0];a[0]=a[1];a[1]=a[2];a[2]=c;break;case "ZtoY":c=a[1],a[1]=a[2],a[2]=
b*c}}function ka(a,b){var c=[a[b],a[b+1],a[b+2]];R(c,-1);return new THREE.Vector3(c[0],c[1],c[2])}function ga(a){if(ra.convertUpAxis){var b=[a[0],a[4],a[8]];R(b,-1);a[0]=b[0];a[4]=b[1];a[8]=b[2];b=[a[1],a[5],a[9]];R(b,-1);a[1]=b[0];a[5]=b[1];a[9]=b[2];b=[a[2],a[6],a[10]];R(b,-1);a[2]=b[0];a[6]=b[1];a[10]=b[2];b=[a[0],a[1],a[2]];R(b,-1);a[0]=b[0];a[1]=b[1];a[2]=b[2];b=[a[4],a[5],a[6]];R(b,-1);a[4]=b[0];a[5]=b[1];a[6]=b[2];b=[a[8],a[9],a[10]];R(b,-1);a[8]=b[0];a[9]=b[1];a[10]=b[2];b=[a[3],a[7],a[11]];
R(b,-1);a[3]=b[0];a[7]=b[1];a[11]=b[2]}return new THREE.Matrix4(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15])}var V=null,ba=null,ca,da=null,ha={},Qa={},la={},za={},Aa={},Ja={},Da={},$a,Ta,ib,db,Wa,Xa=THREE.SmoothShading,ra={centerGeometry:!1,convertUpAxis:!1,subdivideFaces:!0,upAxis:"Y"},Ba="Y",ja=null,ab=Math.PI/180;g.prototype.parse=function(a){this.id=a.getAttribute("id");for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if("init_from"==c.nodeName)this.init_from=
c.textContent}return this};h.prototype.parse=function(a){this.id=a.getAttribute("id");this.name=a.getAttribute("name");this.type="none";for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];switch(c.nodeName){case "skin":this.skin=(new l).parse(c);this.type=c.nodeName;break;case "morph":this.morph=(new i).parse(c),this.type=c.nodeName}}return this};i.prototype.parse=function(a){var b={},c=[],d;this.method=a.getAttribute("method");this.source=a.getAttribute("source").replace(/^#/,"");for(d=
0;d<a.childNodes.length;d++){var e=a.childNodes[d];if(1==e.nodeType)switch(e.nodeName){case "source":e=(new D).parse(e);b[e.id]=e;break;case "targets":c=this.parseInputs(e);break;default:console.log(e.nodeName)}}for(d=0;d<c.length;d++)switch(a=c[d],e=b[a.source],a.semantic){case "MORPH_TARGET":this.targets=e.read();break;case "MORPH_WEIGHT":this.weights=e.read()}return this};i.prototype.parseInputs=function(a){for(var b=[],c=0;c<a.childNodes.length;c++){var d=a.childNodes[c];if(1==d.nodeType)switch(d.nodeName){case "input":b.push((new B).parse(d))}}return b};
l.prototype.parse=function(a){var b={},c,d;this.source=a.getAttribute("source").replace(/^#/,"");this.invBindMatrices=[];this.joints=[];this.weights=[];for(var e=0;e<a.childNodes.length;e++){var f=a.childNodes[e];if(1==f.nodeType)switch(f.nodeName){case "bind_shape_matrix":f=y(f.textContent);this.bindShapeMatrix=ga(f);break;case "source":f=(new D).parse(f);b[f.id]=f;break;case "joints":c=f;break;case "vertex_weights":d=f;break;default:console.log(f.nodeName)}}this.parseJoints(c,b);this.parseWeights(d,
b);return this};l.prototype.parseJoints=function(a,b){for(var c=0;c<a.childNodes.length;c++){var d=a.childNodes[c];if(1==d.nodeType)switch(d.nodeName){case "input":var d=(new B).parse(d),e=b[d.source];if("JOINT"==d.semantic)this.joints=e.read();else if("INV_BIND_MATRIX"==d.semantic)this.invBindMatrices=e.read()}}};l.prototype.parseWeights=function(a,b){for(var c,d,e=[],f=0;f<a.childNodes.length;f++){var g=a.childNodes[f];if(1==g.nodeType)switch(g.nodeName){case "input":e.push((new B).parse(g));break;
case "v":c=E(g.textContent);break;case "vcount":d=E(g.textContent)}}for(f=g=0;f<d.length;f++){for(var h=d[f],j=[],i=0;i<h;i++){for(var l={},k=0;k<e.length;k++){var m=e[k],n=c[g+m.offset];switch(m.semantic){case "JOINT":l.joint=n;break;case "WEIGHT":l.weight=b[m.source].data[n]}}j.push(l);g+=e.length}for(i=0;i<j.length;i++)j[i].index=f;this.weights.push(j)}};k.prototype.getChildById=function(a,b){for(var c=0;c<this.nodes.length;c++){var d=this.nodes[c].getChildById(a,b);if(d)return d}return null};
k.prototype.getChildBySid=function(a,b){for(var c=0;c<this.nodes.length;c++){var d=this.nodes[c].getChildBySid(a,b);if(d)return d}return null};k.prototype.parse=function(a){this.id=a.getAttribute("id");this.name=a.getAttribute("name");this.nodes=[];for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "node":this.nodes.push((new n).parse(c))}}return this};n.prototype.getChannelForTransform=function(a){for(var b=0;b<this.channels.length;b++){var c=this.channels[b],
d=c.target.split("/");d.shift();var e=d.shift(),f=0<=e.indexOf("."),g=0<=e.indexOf("("),h;if(f)d=e.split("."),e=d.shift(),d.shift();else if(g){h=e.split("(");e=h.shift();for(d=0;d<h.length;d++)h[d]=parseInt(h[d].replace(/\)/,""))}if(e==a)return c.info={sid:e,dotSyntax:f,arrSyntax:g,arrIndices:h},c}return null};n.prototype.getChildById=function(a,b){if(this.id==a)return this;if(b)for(var c=0;c<this.nodes.length;c++){var d=this.nodes[c].getChildById(a,b);if(d)return d}return null};n.prototype.getChildBySid=
function(a,b){if(this.sid==a)return this;if(b)for(var c=0;c<this.nodes.length;c++){var d=this.nodes[c].getChildBySid(a,b);if(d)return d}return null};n.prototype.getTransformBySid=function(a){for(var b=0;b<this.transforms.length;b++)if(this.transforms[b].sid==a)return this.transforms[b];return null};n.prototype.parse=function(a){var b;this.id=a.getAttribute("id");this.sid=a.getAttribute("sid");this.name=a.getAttribute("name");this.type=a.getAttribute("type");this.type="JOINT"==this.type?this.type:
"NODE";this.nodes=[];this.transforms=[];this.geometries=[];this.controllers=[];this.matrix=new THREE.Matrix4;for(var c=0;c<a.childNodes.length;c++)if(b=a.childNodes[c],1==b.nodeType)switch(b.nodeName){case "node":this.nodes.push((new n).parse(b));break;case "instance_camera":break;case "instance_controller":this.controllers.push((new o).parse(b));break;case "instance_geometry":this.geometries.push((new m).parse(b));break;case "instance_light":break;case "instance_node":b=b.getAttribute("url").replace(/^#/,
"");(b=V.evaluate(".//dae:library_nodes//dae:node[@id='"+b+"']",V,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null).iterateNext())&&this.nodes.push((new n).parse(b));break;case "rotate":case "translate":case "scale":case "matrix":case "lookat":case "skew":this.transforms.push((new q).parse(b));break;case "extra":break;default:console.log(b.nodeName)}a=[];c=1E6;b=-1E6;for(var d in la)for(var e=la[d],f=0;f<e.channel.length;f++){var g=e.channel[f],h=e.sampler[f];d=g.target.split("/")[0];if(d==this.id)h.create(),
g.sampler=h,c=Math.min(c,h.startTime),b=Math.max(b,h.endTime),a.push(g)}if(a.length)this.startTime=c,this.endTime=b;if((this.channels=a)&&this.channels.length){d=[];a=[];c=0;for(e=this.channels.length;c<e;c++){b=this.channels[c];f=b.fullSid;g=b.member;if(ra.convertUpAxis)switch(g){case "X":switch(ja){case "XtoY":case "XtoZ":case "YtoX":g="Y";break;case "ZtoX":g="Z"}break;case "Y":switch(ja){case "XtoY":case "YtoX":case "ZtoX":g="X";break;case "XtoZ":case "YtoZ":case "ZtoY":g="Z"}break;case "Z":switch(ja){case "XtoZ":g=
"X";break;case "YtoZ":case "ZtoX":case "ZtoY":g="Y"}}var h=b.sampler,i=h.input,l=this.getTransformBySid(b.sid);if(l){-1===a.indexOf(f)&&a.push(f);b=0;for(var k=i.length;b<k;b++){var p=i[b],r=h.getData(l.type,b),s;s=null;for(var t=0,u=d.length;t<u&&null==s;t++){var v=d[t];if(v.time===p)s=v;else if(v.time>p)break}if(!s){s=new j(p);t=-1;u=0;for(v=d.length;u<v&&-1==t;u++)d[u].time>=p&&(t=u);p=t;d.splice(-1==p?d.length:p,0,s)}s.addTarget(f,l,g,r)}}else console.log('Could not find transform "'+b.sid+'" in node '+
this.id)}for(c=0;c<a.length;c++){e=a[c];for(b=0;b<d.length;b++)if(s=d[b],!s.hasTarget(e)){h=d;f=s;l=b;g=e;i=void 0;a:{i=l?l-1:0;for(i=0<=i?i:i+h.length;0<=i;i--)if(k=h[i],k.hasTarget(g)){i=k;break a}i=null}k=void 0;a:{for(l+=1;l<h.length;l++)if(k=h[l],k.hasTarget(g))break a;k=null}if(i&&k){h=(f.time-i.time)/(k.time-i.time);i=i.getTarget(g);l=k.getTarget(g).data;k=i.data;r=void 0;if(k.length){r=[];for(p=0;p<k.length;++p)r[p]=k[p]+(l[p]-k[p])*h}else r=k+(l-k)*h;f.addTarget(g,i.transform,i.member,r)}}}this.keys=
d;this.sids=a}this.updateMatrix();return this};n.prototype.updateMatrix=function(){this.matrix.identity();for(var a=0;a<this.transforms.length;a++)this.transforms[a].apply(this.matrix)};q.prototype.parse=function(a){this.sid=a.getAttribute("sid");this.type=a.nodeName;this.data=y(a.textContent);this.convert();return this};q.prototype.convert=function(){switch(this.type){case "matrix":this.obj=ga(this.data);break;case "rotate":this.angle=this.data[3]*ab;case "translate":R(this.data,-1);this.obj=new THREE.Vector3(this.data[0],
this.data[1],this.data[2]);break;case "scale":R(this.data,1);this.obj=new THREE.Vector3(this.data[0],this.data[1],this.data[2]);break;default:console.log("Can not convert Transform of type "+this.type)}};q.prototype.apply=function(a){switch(this.type){case "matrix":a.multiplySelf(this.obj);break;case "translate":a.translate(this.obj);break;case "rotate":a.rotateByAxis(this.obj,this.angle);break;case "scale":a.scale(this.obj)}};q.prototype.update=function(a,b){switch(this.type){case "matrix":console.log("Currently not handling matrix transform updates");
break;case "translate":case "scale":switch(b){case "X":this.obj.x=a;break;case "Y":this.obj.y=a;break;case "Z":this.obj.z=a;break;default:this.obj.x=a[0],this.obj.y=a[1],this.obj.z=a[2]}break;case "rotate":switch(b){case "X":this.obj.x=a;break;case "Y":this.obj.y=a;break;case "Z":this.obj.z=a;break;case "ANGLE":this.angle=a*ab;break;default:this.obj.x=a[0],this.obj.y=a[1],this.obj.z=a[2],this.angle=a[3]*ab}}};o.prototype.parse=function(a){this.url=a.getAttribute("url").replace(/^#/,"");this.skeleton=
[];this.instance_material=[];for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "skeleton":this.skeleton.push(c.textContent.replace(/^#/,""));break;case "bind_material":if(c=V.evaluate(".//dae:instance_material",c,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null))for(var d=c.iterateNext();d;)this.instance_material.push((new p).parse(d)),d=c.iterateNext()}}return this};p.prototype.parse=function(a){this.symbol=a.getAttribute("symbol");this.target=a.getAttribute("target").replace(/^#/,
"");return this};m.prototype.parse=function(a){this.url=a.getAttribute("url").replace(/^#/,"");this.instance_material=[];for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType&&"bind_material"==c.nodeName){if(a=V.evaluate(".//dae:instance_material",c,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null))for(b=a.iterateNext();b;)this.instance_material.push((new p).parse(b)),b=a.iterateNext();break}}return this};r.prototype.parse=function(a){this.id=a.getAttribute("id");for(var b=0;b<
a.childNodes.length;b++){var c=a.childNodes[b];switch(c.nodeName){case "mesh":this.mesh=(new s(this)).parse(c)}}return this};s.prototype.parse=function(a){this.primitives=[];var b;for(b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];switch(c.nodeName){case "source":var d=c.getAttribute("id");void 0==ha[d]&&(ha[d]=(new D(d)).parse(c));break;case "vertices":this.vertices=(new x).parse(c);break;case "triangles":this.primitives.push((new u).parse(c));break;case "polygons":console.warn("polygon holes not yet supported!");
case "polylist":this.primitives.push((new t).parse(c))}}this.geometry3js=new THREE.Geometry;a=ha[this.vertices.input.POSITION.source].data;for(b=0;b<a.length;b+=3)this.geometry3js.vertices.push(new THREE.Vertex(ka(a,b)));for(b=0;b<this.primitives.length;b++)a=this.primitives[b],a.setVertices(this.vertices),this.handlePrimitive(a,this.geometry3js);this.geometry3js.computeCentroids();this.geometry3js.computeFaceNormals();this.geometry3js.computeVertexNormals();this.geometry3js.computeBoundingBox();
return this};s.prototype.handlePrimitive=function(a,b){var c=0,d,e,f=a.p,g=a.inputs,h,i,j,k,l=0,m=3,n=[];for(d=0;d<g.length;d++)switch(h=g[d],h.semantic){case "TEXCOORD":n.push(h.set)}for(;c<f.length;){var o=[],p=[],q={},r=[];a.vcount&&(m=a.vcount[l++]);for(d=0;d<m;d++)for(e=0;e<g.length;e++)switch(h=g[e],k=ha[h.source],i=f[c+d*g.length+h.offset],j=k.accessor.params.length,j*=i,h.semantic){case "VERTEX":o.push(i);break;case "NORMAL":p.push(ka(k.data,j));break;case "TEXCOORD":void 0===q[h.set]&&(q[h.set]=
[]);q[h.set].push(new THREE.UV(k.data[j],1-k.data[j+1]));break;case "COLOR":r.push((new THREE.Color).setRGB(k.data[j],k.data[j+1],k.data[j+2]))}e=null;d=[];if(3===m)d.push(new THREE.Face3(o[0],o[1],o[2],[p[0],p[1],p[2]],r.length?r:new THREE.Color));else if(4===m)d.push(new THREE.Face4(o[0],o[1],o[2],o[3],[p[0],p[1],p[2],p[3]],r.length?r:new THREE.Color));else if(4<m&&ra.subdivideFaces){r=r.length?r:new THREE.Color;for(e=1;e<m-1;)d.push(new THREE.Face3(o[0],o[e],o[e+1],[p[0],p[e++],p[e]],r))}if(d.length){o=
0;for(p=d.length;o<p;o++){e=d[o];e.daeMaterial=a.material;b.faces.push(e);for(e=0;e<n.length;e++)r=q[n[e]],r=4<m?[r[0],r[o+1],r[o+2]]:4===m?[r[0],r[1],r[2],r[3]]:[r[0],r[1],r[2]],b.faceVertexUvs[e]||(b.faceVertexUvs[e]=[]),b.faceVertexUvs[e].push(r)}}else console.log("dropped face with vcount "+m+" for geometry with id: "+b.id);c+=g.length*m}};t.prototype=new u;t.prototype.constructor=t;u.prototype.setVertices=function(a){for(var b=0;b<this.inputs.length;b++)if(this.inputs[b].source==a.id)this.inputs[b].source=
a.input.POSITION.source};u.prototype.parse=function(a){this.inputs=[];this.material=a.getAttribute("material");this.count=T(a,"count",0);for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];switch(c.nodeName){case "input":this.inputs.push((new B).parse(a.childNodes[b]));break;case "vcount":this.vcount=E(c.textContent);break;case "p":this.p=E(c.textContent)}}return this};v.prototype.parse=function(a){this.params=[];this.source=a.getAttribute("source");this.count=T(a,"count",0);this.stride=
T(a,"stride",0);for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if("param"==c.nodeName){var d={};d.name=c.getAttribute("name");d.type=c.getAttribute("type");this.params.push(d)}}return this};x.prototype.parse=function(a){this.id=a.getAttribute("id");for(var b=0;b<a.childNodes.length;b++)if("input"==a.childNodes[b].nodeName){var c=(new B).parse(a.childNodes[b]);this.input[c.semantic]=c}return this};B.prototype.parse=function(a){this.semantic=a.getAttribute("semantic");this.source=a.getAttribute("source").replace(/^#/,
"");this.set=T(a,"set",-1);this.offset=T(a,"offset",0);if("TEXCOORD"==this.semantic&&0>this.set)this.set=0;return this};D.prototype.parse=function(a){this.id=a.getAttribute("id");for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];switch(c.nodeName){case "bool_array":for(var d=S(c.textContent),e=[],f=0;f<d.length;f++)e.push("true"==d[f]||"1"==d[f]?!0:!1);this.data=e;this.type=c.nodeName;break;case "float_array":this.data=y(c.textContent);this.type=c.nodeName;break;case "int_array":this.data=
E(c.textContent);this.type=c.nodeName;break;case "IDREF_array":case "Name_array":this.data=S(c.textContent);this.type=c.nodeName;break;case "technique_common":for(d=0;d<c.childNodes.length;d++)if("accessor"==c.childNodes[d].nodeName){this.accessor=(new v).parse(c.childNodes[d]);break}}}return this};D.prototype.read=function(){var a=[],b=this.accessor.params[0];switch(b.type){case "IDREF":case "Name":case "name":case "float":return this.data;case "float4x4":for(b=0;b<this.data.length;b+=16){var c=
this.data.slice(b,b+16),c=ga(c);a.push(c)}break;default:console.log("ColladaLoader: Source: Read dont know how to read "+b.type+".")}return a};C.prototype.parse=function(a){this.id=a.getAttribute("id");this.name=a.getAttribute("name");for(var b=0;b<a.childNodes.length;b++)if("instance_effect"==a.childNodes[b].nodeName){this.instance_effect=(new K).parse(a.childNodes[b]);break}return this};A.prototype.isColor=function(){return null==this.texture};A.prototype.isTexture=function(){return null!=this.texture};
A.prototype.parse=function(a){for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "color":c=y(c.textContent);this.color=new THREE.Color(0);this.color.setRGB(c[0],c[1],c[2]);this.color.a=c[3];break;case "texture":this.texture=c.getAttribute("texture"),this.texcoord=c.getAttribute("texcoord"),this.texOpts={offsetU:0,offsetV:0,repeatU:1,repeatV:1,wrapU:1,wrapV:1},this.parseTexture(c)}}return this};A.prototype.parseTexture=function(a){if(!a.childNodes)return this;
a.childNodes[1]&&"extra"===a.childNodes[1].nodeName&&(a=a.childNodes[1],a.childNodes[1]&&"technique"===a.childNodes[1].nodeName&&(a=a.childNodes[1]));for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];switch(c.nodeName){case "offsetU":case "offsetV":case "repeatU":case "repeatV":this.texOpts[c.nodeName]=parseFloat(c.textContent);break;case "wrapU":case "wrapV":this.texOpts[c.nodeName]=parseInt(c.textContent);break;default:this.texOpts[c.nodeName]=c.textContent}}return this};H.prototype.parse=
function(a){for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "ambient":case "emission":case "diffuse":case "specular":case "transparent":this[c.nodeName]=(new A).parse(c);break;case "shininess":case "reflectivity":case "transparency":var d;d=V.evaluate(".//dae:float",c,W,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null);for(var e=d.iterateNext(),f=[];e;)f.push(e),e=d.iterateNext();d=f;0<d.length&&(this[c.nodeName]=parseFloat(d[0].textContent))}}this.create();
return this};H.prototype.create=function(){var a={},b=void 0!==this.transparency&&1>this.transparency,c;for(c in this)switch(c){case "ambient":case "emission":case "diffuse":case "specular":var d=this[c];if(d instanceof A)if(d.isTexture()){if(this.effect.sampler&&this.effect.surface&&this.effect.sampler.source==this.effect.surface.sid){var e=Qa[this.effect.surface.init_from];if(e)e=THREE.ImageUtils.loadTexture(ib+e.init_from),e.wrapS=d.texOpts.wrapU?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping,
e.wrapT=d.texOpts.wrapV?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping,e.offset.x=d.texOpts.offsetU,e.offset.y=d.texOpts.offsetV,e.repeat.x=d.texOpts.repeatU,e.repeat.y=d.texOpts.repeatV,a.map=e}}else"diffuse"==c?a.color=d.color.getHex():b||(a[c]=d.color.getHex());break;case "shininess":case "reflectivity":a[c]=this[c];break;case "transparency":if(b)a.transparent=!0,a.opacity=this[c],b=!0}a.shading=Xa;return this.material=new THREE.MeshLambertMaterial(a)};I.prototype.parse=function(a){for(var b=0;b<
a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "init_from":this.init_from=c.textContent;break;case "format":this.format=c.textContent;break;default:console.log("unhandled Surface prop: "+c.nodeName)}}return this};N.prototype.parse=function(a){for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "source":this.source=c.textContent;break;case "minfilter":this.minfilter=c.textContent;break;case "magfilter":this.magfilter=
c.textContent;break;case "mipfilter":this.mipfilter=c.textContent;break;case "wrap_s":this.wrap_s=c.textContent;break;case "wrap_t":this.wrap_t=c.textContent;break;default:console.log("unhandled Sampler2D prop: "+c.nodeName)}}return this};$.prototype.create=function(){if(null==this.shader)return null};$.prototype.parse=function(a){this.id=a.getAttribute("id");this.name=a.getAttribute("name");this.shader=null;for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "profile_COMMON":this.parseTechnique(this.parseProfileCOMMON(c))}}return this};
$.prototype.parseNewparam=function(a){for(var b=a.getAttribute("sid"),c=0;c<a.childNodes.length;c++){var d=a.childNodes[c];if(1==d.nodeType)switch(d.nodeName){case "surface":this.surface=(new I(this)).parse(d);this.surface.sid=b;break;case "sampler2D":this.sampler=(new N(this)).parse(d);this.sampler.sid=b;break;case "extra":break;default:console.log(d.nodeName)}}};$.prototype.parseProfileCOMMON=function(a){for(var b,c=0;c<a.childNodes.length;c++){var d=a.childNodes[c];if(1==d.nodeType)switch(d.nodeName){case "profile_COMMON":this.parseProfileCOMMON(d);
break;case "technique":b=d;break;case "newparam":this.parseNewparam(d);break;case "extra":break;default:console.log(d.nodeName)}}return b};$.prototype.parseTechnique=function(a){for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "constant":case "lambert":case "blinn":case "phong":this.shader=(new H(c.nodeName,this)).parse(c)}}};K.prototype.parse=function(a){this.url=a.getAttribute("url").replace(/^#/,"");return this};Q.prototype.parse=function(a){this.id=
a.getAttribute("id");this.name=a.getAttribute("name");this.source={};for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "source":c=(new D).parse(c);this.source[c.id]=c;break;case "sampler":this.sampler.push((new G(this)).parse(c));break;case "channel":this.channel.push((new L(this)).parse(c))}}return this};L.prototype.parse=function(a){this.source=a.getAttribute("source").replace(/^#/,"");this.target=a.getAttribute("target");var b=this.target.split("/");
b.shift();var a=b.shift(),c=0<=a.indexOf("."),d=0<=a.indexOf("(");if(c)b=a.split("."),this.sid=b.shift(),this.member=b.shift();else if(d){b=a.split("(");this.sid=b.shift();for(var e=0;e<b.length;e++)b[e]=parseInt(b[e].replace(/\)/,""));this.arrIndices=b}else this.sid=a;this.fullSid=a;this.dotSyntax=c;this.arrSyntax=d;return this};G.prototype.parse=function(a){this.id=a.getAttribute("id");this.inputs=[];for(var b=0;b<a.childNodes.length;b++){var c=a.childNodes[b];if(1==c.nodeType)switch(c.nodeName){case "input":this.inputs.push((new B).parse(c))}}return this};
G.prototype.create=function(){for(var a=0;a<this.inputs.length;a++){var b=this.inputs[a],c=this.animation.source[b.source];switch(b.semantic){case "INPUT":this.input=c.read();break;case "OUTPUT":this.output=c.read();this.strideOut=c.accessor.stride;break;case "INTERPOLATION":this.interpolation=c.read();break;case "IN_TANGENT":break;case "OUT_TANGENT":break;default:console.log(b.semantic)}}this.duration=this.endTime=this.startTime=0;if(this.input.length){this.startTime=1E8;this.endTime=-1E8;for(a=
0;a<this.input.length;a++)this.startTime=Math.min(this.startTime,this.input[a]),this.endTime=Math.max(this.endTime,this.input[a]);this.duration=this.endTime-this.startTime}};G.prototype.getData=function(a,b){var c;if(1<this.strideOut){c=[];for(var b=b*this.strideOut,d=0;d<this.strideOut;++d)c[d]=this.output[b+d];if(3===this.strideOut)switch(a){case "rotate":case "translate":R(c,-1);break;case "scale":R(c,1)}}else c=this.output[b];return c};j.prototype.addTarget=function(a,b,c,d){this.targets.push({sid:a,
member:c,transform:b,data:d})};j.prototype.apply=function(a){for(var b=0;b<this.targets.length;++b){var c=this.targets[b];(!a||c.sid===a)&&c.transform.update(c.data,c.member)}};j.prototype.getTarget=function(a){for(var b=0;b<this.targets.length;++b)if(this.targets[b].sid===a)return this.targets[b];return null};j.prototype.hasTarget=function(a){for(var b=0;b<this.targets.length;++b)if(this.targets[b].sid===a)return!0;return!1};j.prototype.interpolate=function(a,b){for(var c=0;c<this.targets.length;++c){var d=
this.targets[c],e=a.getTarget(d.sid);if(e){var f=(b-this.time)/(a.time-this.time),g=e.data,h=d.data;if(0>f||1<f)console.log("Key.interpolate: Warning! Scale out of bounds:"+f),f=0>f?0:1;if(h.length)for(var e=[],i=0;i<h.length;++i)e[i]=h[i]+(g[i]-h[i])*f;else e=h+(g-h)*f}else e=d.data;d.transform.update(e,d.member)}};return{load:function(b,c,d){var e=0;if(document.implementation&&document.implementation.createDocument){var f=new XMLHttpRequest;f.overrideMimeType&&f.overrideMimeType("text/xml");f.onreadystatechange=
function(){if(4==f.readyState){if(0==f.status||200==f.status)f.responseXML?(da=c,a(f.responseXML,void 0,b)):console.error("ColladaLoader: Empty or non-existing file ("+b+")")}else 3==f.readyState&&d&&(0==e&&(e=f.getResponseHeader("Content-Length")),d({total:e,loaded:f.responseText.length}))};f.open("GET",b,!0);f.send(null)}else alert("Don't know how to parse XML!")},parse:a,setPreferredShading:function(a){Xa=a},applySkin:e,geometries:Aa,options:ra}};
THREE.JSONLoader=function(a){THREE.Loader.call(this,a)};THREE.JSONLoader.prototype=new THREE.Loader;THREE.JSONLoader.prototype.constructor=THREE.JSONLoader;THREE.JSONLoader.prototype.supr=THREE.Loader.prototype;
THREE.JSONLoader.prototype.load=function(a,b,c){if(a instanceof Object)console.warn("DEPRECATED: JSONLoader( parameters ) is now JSONLoader( url, callback, texturePath )."),c=a,a=c.model,b=c.callback,c=c.texture_path;c=c?c:this.extractUrlbase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,g=0;f.onreadystatechange=function(){if(4==f.readyState)if(200==f.status||0==f.status){try{var h=JSON.parse(f.responseText)}catch(i){console.warn("DEPRECATED: ["+b+"] seems to be using old model format")}a.createModel(h,c,d);a.onLoadComplete()}else console.error("Couldn't load ["+b+"] ["+f.status+"]");else 3==f.readyState?e&&(0==g&&(g=f.getResponseHeader("Content-Length")),e({total:g,loaded:f.responseText.length})):
2==f.readyState&&(g=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.overrideMimeType&&f.overrideMimeType("text/plain; charset=x-user-defined");f.setRequestHeader("Content-Type","text/plain");f.send(null)};
THREE.JSONLoader.prototype.createModel=function(a,b,c){var d=new THREE.Geometry,e=void 0!==a.scale?1/a.scale:1;this.initMaterials(d,a.materials,c);(function(b){if(void 0===a.metadata||void 0===a.metadata.formatVersion||3!==a.metadata.formatVersion)console.error("Deprecated file format.");else{var c,e,i,l,k,n,q,o,p,m,r,s,t,u,v=a.faces;n=a.vertices;var x=a.normals,B=a.colors,D=0;for(c=0;c<a.uvs.length;c++)a.uvs[c].length&&D++;for(c=0;c<D;c++)d.faceUvs[c]=[],d.faceVertexUvs[c]=[];l=0;for(k=n.length;l<
k;)q=new THREE.Vertex,q.position.x=n[l++]*b,q.position.y=n[l++]*b,q.position.z=n[l++]*b,d.vertices.push(q);l=0;for(k=v.length;l<k;){b=v[l++];n=b&1;i=b&2;c=b&4;e=b&8;o=b&16;q=b&32;m=b&64;b&=128;n?(r=new THREE.Face4,r.a=v[l++],r.b=v[l++],r.c=v[l++],r.d=v[l++],n=4):(r=new THREE.Face3,r.a=v[l++],r.b=v[l++],r.c=v[l++],n=3);if(i)i=v[l++],r.materialIndex=i;i=d.faces.length;if(c)for(c=0;c<D;c++)s=a.uvs[c],p=v[l++],u=s[2*p],p=s[2*p+1],d.faceUvs[c][i]=new THREE.UV(u,p);if(e)for(c=0;c<D;c++){s=a.uvs[c];t=[];
for(e=0;e<n;e++)p=v[l++],u=s[2*p],p=s[2*p+1],t[e]=new THREE.UV(u,p);d.faceVertexUvs[c][i]=t}if(o)o=3*v[l++],e=new THREE.Vector3,e.x=x[o++],e.y=x[o++],e.z=x[o],r.normal=e;if(q)for(c=0;c<n;c++)o=3*v[l++],e=new THREE.Vector3,e.x=x[o++],e.y=x[o++],e.z=x[o],r.vertexNormals.push(e);if(m)q=v[l++],q=new THREE.Color(B[q]),r.color=q;if(b)for(c=0;c<n;c++)q=v[l++],q=new THREE.Color(B[q]),r.vertexColors.push(q);d.faces.push(r)}}})(e);(function(){var b,c,e,i;if(a.skinWeights)for(b=0,c=a.skinWeights.length;b<c;b+=
2)e=a.skinWeights[b],i=a.skinWeights[b+1],d.skinWeights.push(new THREE.Vector4(e,i,0,0));if(a.skinIndices)for(b=0,c=a.skinIndices.length;b<c;b+=2)e=a.skinIndices[b],i=a.skinIndices[b+1],d.skinIndices.push(new THREE.Vector4(e,i,0,0));d.bones=a.bones;d.animation=a.animation})();(function(b){if(void 0!==a.morphTargets){var c,e,i,l,k,n,q,o,p;for(c=0,e=a.morphTargets.length;c<e;c++){d.morphTargets[c]={};d.morphTargets[c].name=a.morphTargets[c].name;d.morphTargets[c].vertices=[];o=d.morphTargets[c].vertices;
p=a.morphTargets[c].vertices;for(i=0,l=p.length;i<l;i+=3)k=p[i]*b,n=p[i+1]*b,q=p[i+2]*b,o.push(new THREE.Vertex(new THREE.Vector3(k,n,q)))}}if(void 0!==a.morphColors)for(c=0,e=a.morphColors.length;c<e;c++){d.morphColors[c]={};d.morphColors[c].name=a.morphColors[c].name;d.morphColors[c].colors=[];l=d.morphColors[c].colors;k=a.morphColors[c].colors;for(b=0,i=k.length;b<i;b+=3)n=new THREE.Color(16755200),n.setRGB(k[b],k[b+1],k[b+2]),l.push(n)}})(e);d.computeCentroids();d.computeFaceNormals();this.hasNormals(d)&&
d.computeTangents();b(d)};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){}};THREE.SceneLoader.prototype.constructor=THREE.SceneLoader;
THREE.SceneLoader.prototype.load=function(a,b){var c=this,d=new XMLHttpRequest;d.onreadystatechange=function(){if(4==d.readyState)if(200==d.status||0==d.status)try{var e=JSON.parse(d.responseText);void 0===e.metadata||void 0===e.metadata.formatVersion||3!==e.metadata.formatVersion?console.error("Deprecated file format."):c.createScene(e,b,a)}catch(f){console.error(f),console.warn("DEPRECATED: ["+a+"] seems to be using old model format")}else console.error("Couldn't load ["+a+"] ["+d.status+"]")};
d.open("GET",a,!0);d.overrideMimeType&&d.overrideMimeType("text/plain; charset=x-user-defined");d.setRequestHeader("Content-Type","text/plain");d.send(null)};
THREE.SceneLoader.prototype.createScene=function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:l+"/"+a}function e(){var a;for(q in K.objects)if(!y.objects[q])if(s=K.objects[q],void 0!==s.geometry){if(H=y.geometries[s.geometry]){a=!1;for(E=0;E<s.materials.length;E++)$=y.materials[s.materials[E]],a=$ instanceof THREE.ShaderMaterial;a&&H.computeTangents();v=s.position;x=s.rotation;B=s.quaternion;D=s.scale;B=0;0==$.length&&($=new THREE.MeshFaceMaterial);1<$.length&&($=new THREE.MeshFaceMaterial);
a=new THREE.Mesh(H,$);a.name=q;a.position.set(v[0],v[1],v[2]);B?(a.quaternion.set(B[0],B[1],B[2],B[3]),a.useQuaternion=!0):a.rotation.set(x[0],x[1],x[2]);a.scale.set(D[0],D[1],D[2]);a.visible=s.visible;y.scene.add(a);y.objects[q]=a;if(s.meshCollider){var b=THREE.CollisionUtils.MeshColliderWBox(a);y.scene.collisions.colliders.push(b)}if(s.castsShadow)b=new THREE.ShadowVolume(H),y.scene.add(b),b.position=a.position,b.rotation=a.rotation,b.scale=a.scale;s.trigger&&"none"!=s.trigger.toLowerCase()&&(b=
{type:s.trigger,object:s},y.triggers[a.name]=b)}}else v=s.position,x=s.rotation,B=s.quaternion,D=s.scale,B=0,a=new THREE.Object3D,a.name=q,a.position.set(v[0],v[1],v[2]),B?(a.quaternion.set(B[0],B[1],B[2],B[3]),a.useQuaternion=!0):a.rotation.set(x[0],x[1],x[2]),a.scale.set(D[0],D[1],D[2]),a.visible=void 0!==s.visible?s.visible:!1,y.scene.add(a),y.objects[q]=a,y.empties[q]=a,s.trigger&&"none"!=s.trigger.toLowerCase()&&(b={type:s.trigger,object:s},y.triggers[a.name]=b)}function f(a){return function(b){y.geometries[a]=
b;e();L-=1;i.onLoadComplete();h()}}function g(a){return function(b){y.geometries[a]=b}}function h(){i.callbackProgress({totalModels:j,totalTextures:W,loadedModels:j-L,loadedTextures:W-G},y);i.onLoadProgress();0==L&&0==G&&b(y)}var i=this,l=THREE.Loader.prototype.extractUrlbase(c),k,n,q,o,p,m,r,s,t,u,v,x,B,D,C,A,H,I,N,$,K,Q,L,G,j,W,y;K=a;c=new THREE.BinaryLoader;Q=new THREE.JSONLoader;G=L=0;y={scene:new THREE.Scene,geometries:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},triggers:{},
empties:{}};a=!1;for(q in K.objects)if(s=K.objects[q],s.meshCollider){a=!0;break}if(a)y.scene.collisions=new THREE.CollisionSystem;if(K.transform)a=K.transform.position,t=K.transform.rotation,C=K.transform.scale,a&&y.scene.position.set(a[0],a[1],a[2]),t&&y.scene.rotation.set(t[0],t[1],t[2]),C&&y.scene.scale.set(C[0],C[1],C[2]),(a||t||C)&&y.scene.updateMatrix();a=function(){G-=1;h();i.onLoadComplete()};for(p in K.cameras)C=K.cameras[p],"perspective"==C.type?I=new THREE.PerspectiveCamera(C.fov,C.aspect,
C.near,C.far):"ortho"==C.type&&(I=new THREE.OrthographicCamera(C.left,C.right,C.top,C.bottom,C.near,C.far)),v=C.position,t=C.target,C=C.up,I.position.set(v[0],v[1],v[2]),I.target=new THREE.Vector3(t[0],t[1],t[2]),C&&I.up.set(C[0],C[1],C[2]),y.cameras[p]=I;for(o in K.lights)t=K.lights[o],p=void 0!==t.color?t.color:16777215,I=void 0!==t.intensity?t.intensity:1,"directional"==t.type?(v=t.direction,u=new THREE.DirectionalLight(p,I),u.position.set(v[0],v[1],v[2]),u.position.normalize()):"point"==t.type?
(v=t.position,u=t.distance,u=new THREE.PointLight(p,I,u),u.position.set(v[0],v[1],v[2])):"ambient"==t.type&&(u=new THREE.AmbientLight(p)),y.scene.add(u),y.lights[o]=u;for(m in K.fogs)o=K.fogs[m],"linear"==o.type?N=new THREE.Fog(0,o.near,o.far):"exp2"==o.type&&(N=new THREE.FogExp2(0,o.density)),C=o.color,N.color.setRGB(C[0],C[1],C[2]),y.fogs[m]=N;if(y.cameras&&K.defaults.camera)y.currentCamera=y.cameras[K.defaults.camera];if(y.fogs&&K.defaults.fog)y.scene.fog=y.fogs[K.defaults.fog];C=K.defaults.bgcolor;
y.bgColor=new THREE.Color;y.bgColor.setRGB(C[0],C[1],C[2]);y.bgColorAlpha=K.defaults.bgalpha;for(k in K.geometries)if(m=K.geometries[k],"bin_mesh"==m.type||"ascii_mesh"==m.type)L+=1,i.onLoadStart();j=L;for(k in K.geometries)m=K.geometries[k],"cube"==m.type?(H=new THREE.CubeGeometry(m.width,m.height,m.depth,m.segmentsWidth,m.segmentsHeight,m.segmentsDepth,null,m.flipped,m.sides),y.geometries[k]=H):"plane"==m.type?(H=new THREE.PlaneGeometry(m.width,m.height,m.segmentsWidth,m.segmentsHeight),y.geometries[k]=
H):"sphere"==m.type?(H=new THREE.SphereGeometry(m.radius,m.segmentsWidth,m.segmentsHeight),y.geometries[k]=H):"cylinder"==m.type?(H=new THREE.CylinderGeometry(m.topRad,m.botRad,m.height,m.radSegs,m.heightSegs),y.geometries[k]=H):"torus"==m.type?(H=new THREE.TorusGeometry(m.radius,m.tube,m.segmentsR,m.segmentsT),y.geometries[k]=H):"icosahedron"==m.type?(H=new THREE.IcosahedronGeometry(m.subdivisions),y.geometries[k]=H):"bin_mesh"==m.type?c.load(d(m.url,K.urlBaseType),f(k)):"ascii_mesh"==m.type?Q.load(d(m.url,
K.urlBaseType),f(k)):"embedded_mesh"==m.type&&(m=K.embeds[m.id])&&Q.createModel(m,g(k),"");for(r in K.textures)if(k=K.textures[r],k.url instanceof Array){G+=k.url.length;for(m=0;m<k.url.length;m++)i.onLoadStart()}else G+=1,i.onLoadStart();W=G;for(r in K.textures){k=K.textures[r];if(void 0!=k.mapping&&void 0!=THREE[k.mapping])k.mapping=new THREE[k.mapping];if(k.url instanceof Array){m=[];for(var E=0;E<k.url.length;E++)m[E]=d(k.url[E],K.urlBaseType);m=THREE.ImageUtils.loadTextureCube(m,k.mapping,a)}else{m=
THREE.ImageUtils.loadTexture(d(k.url,K.urlBaseType),k.mapping,a);if(void 0!=THREE[k.minFilter])m.minFilter=THREE[k.minFilter];if(void 0!=THREE[k.magFilter])m.magFilter=THREE[k.magFilter];if(k.repeat){m.repeat.set(k.repeat[0],k.repeat[1]);if(1!=k.repeat[0])m.wrapS=THREE.RepeatWrapping;if(1!=k.repeat[1])m.wrapT=THREE.RepeatWrapping}k.offset&&m.offset.set(k.offset[0],k.offset[1]);if(k.wrap){N={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping};if(void 0!==N[k.wrap[0]])m.wrapS=N[k.wrap[0]];
if(void 0!==N[k.wrap[1]])m.wrapT=N[k.wrap[1]]}}y.textures[r]=m}for(n in K.materials){r=K.materials[n];for(A in r.parameters)if("envMap"==A||"map"==A||"lightMap"==A)r.parameters[A]=y.textures[r.parameters[A]];else if("shading"==A)r.parameters[A]="flat"==r.parameters[A]?THREE.FlatShading:THREE.SmoothShading;else if("blending"==A)r.parameters[A]=THREE[r.parameters[A]]?THREE[r.parameters[A]]:THREE.NormalBlending;else if("combine"==A)r.parameters[A]="MixOperation"==r.parameters[A]?THREE.MixOperation:THREE.MultiplyOperation;
else if("vertexColors"==A)if("face"==r.parameters[A])r.parameters[A]=THREE.FaceColors;else if(r.parameters[A])r.parameters[A]=THREE.VertexColors;if(void 0!==r.parameters.opacity&&1>r.parameters.opacity)r.parameters.transparent=!0;if(r.parameters.normalMap){k=THREE.ShaderUtils.lib.normal;a=THREE.UniformsUtils.clone(k.uniforms);m=r.parameters.color;N=r.parameters.specular;c=r.parameters.ambient;Q=r.parameters.shininess;a.tNormal.texture=y.textures[r.parameters.normalMap];if(r.parameters.normalMapFactor)a.uNormalScale.value=
r.parameters.normalMapFactor;if(r.parameters.map)a.tDiffuse.texture=r.parameters.map,a.enableDiffuse.value=!0;if(r.parameters.lightMap)a.tAO.texture=r.parameters.lightMap,a.enableAO.value=!0;if(r.parameters.specularMap)a.tSpecular.texture=y.textures[r.parameters.specularMap],a.enableSpecular.value=!0;a.uDiffuseColor.value.setHex(m);a.uSpecularColor.value.setHex(N);a.uAmbientColor.value.setHex(c);a.uShininess.value=Q;if(r.parameters.opacity)a.uOpacity.value=r.parameters.opacity;r=new THREE.ShaderMaterial({fragmentShader:k.fragmentShader,
vertexShader:k.vertexShader,uniforms:a,lights:!0,fog:!0})}else r=new THREE[r.type](r.parameters);y.materials[n]=r}e();i.callbackSync(y);h()};THREE.UTF8Loader=function(){};THREE.UTF8Loader.prototype=new THREE.UTF8Loader;THREE.UTF8Loader.prototype.constructor=THREE.UTF8Loader;
THREE.UTF8Loader.prototype.load=function(a,b,c){if(a instanceof Object)console.warn("DEPRECATED: UTF8Loader( parameters ) is now UTF8Loader( url, callback, metaData )."),c=a,a=c.model,b=c.callback,c={scale:c.scale,offsetX:c.offsetX,offsetY:c.offsetY,offsetZ:c.offsetZ};var d=new XMLHttpRequest,e=void 0!==c.scale?c.scale:1,f=void 0!==c.offsetX?c.offsetX:0,g=void 0!==c.offsetY?c.offsetY:0,h=void 0!==c.offsetZ?c.offsetZ:0;d.onreadystatechange=function(){4==d.readyState?200==d.status||0==d.status?THREE.UTF8Loader.prototype.createModel(d.responseText,
b,e,f,g,h):alert("Couldn't load ["+a+"] ["+d.status+"]"):3!=d.readyState&&2==d.readyState&&d.getResponseHeader("Content-Length")};d.open("GET",a,!0);d.send(null)};THREE.UTF8Loader.prototype.decompressMesh=function(a){var b=a.charCodeAt(0);57344<=b&&(b-=2048);b++;for(var c=new Float32Array(8*b),d=1,e=0;8>e;e++){for(var f=0,g=0;g<b;++g){var h=a.charCodeAt(g+d),f=f+(h>>1^-(h&1));c[8*g+e]=f}d+=b}b=a.length-d;f=new Uint16Array(b);for(e=g=0;e<b;e++)h=a.charCodeAt(e+d),f[e]=g-h,0==h&&g++;return[c,f]};
THREE.UTF8Loader.prototype.createModel=function(a,b,c,d,e,f){var g=function(){var b=this;b.materials=[];THREE.Geometry.call(this);var g=THREE.UTF8Loader.prototype.decompressMesh(a),l=[],k=[];(function(a,g,i){for(var k,l,r,s=a.length;i<s;i+=g)k=a[i],l=a[i+1],r=a[i+2],k=k/16383*c,l=l/16383*c,r=r/16383*c,k+=d,l+=e,r+=f,b.vertices.push(new THREE.Vertex(new THREE.Vector3(k,l,r)))})(g[0],8,0);(function(a,b,c){for(var d,e,f=a.length;c<f;c+=b)d=a[c],e=a[c+1],d/=1023,e/=1023,k.push(d,1-e)})(g[0],8,3);(function(a,
b,c){for(var d,e,f,g=a.length;c<g;c+=b)d=a[c],e=a[c+1],f=a[c+2],d=(d-512)/511,e=(e-512)/511,f=(f-512)/511,l.push(d,e,f)})(g[0],8,5);(function(a){var c,d,e,f,g,i,t,u,v,x=a.length;for(c=0;c<x;c+=3){d=a[c];e=a[c+1];f=a[c+2];g=b;u=d;v=e;i=f;var B=l[3*e],D=l[3*e+1],C=l[3*e+2],A=l[3*f],H=l[3*f+1],I=l[3*f+2];t=new THREE.Vector3(l[3*d],l[3*d+1],l[3*d+2]);B=new THREE.Vector3(B,D,C);A=new THREE.Vector3(A,H,I);g.faces.push(new THREE.Face3(u,v,i,[t,B,A],null,0));g=k[2*d];d=k[2*d+1];i=k[2*e];t=k[2*e+1];u=k[2*
f];v=k[2*f+1];f=b.faceVertexUvs[0];e=i;i=t;t=[];t.push(new THREE.UV(g,d));t.push(new THREE.UV(e,i));t.push(new THREE.UV(u,v));f.push(t)}})(g[1]);this.computeCentroids();this.computeFaceNormals()};g.prototype=new THREE.Geometry;g.prototype.constructor=g;b(new g)};
THREE.MarchingCubes=function(a,b){THREE.Object3D.call(this);this.material=b;this.init=function(a){this.resolution=a;this.isolation=80;this.size=a;this.size2=this.size*this.size;this.size3=this.size2*this.size;this.halfsize=this.size/2;this.delta=2/this.size;this.yd=this.size;this.zd=this.size2;this.field=new Float32Array(this.size3);this.normal_cache=new Float32Array(3*this.size3);this.vlist=new Float32Array(36);this.nlist=new Float32Array(36);this.firstDraw=!0;this.maxCount=4096;this.count=0;this.hasNormal=
this.hasPos=!1;this.positionArray=new Float32Array(3*this.maxCount);this.normalArray=new Float32Array(3*this.maxCount)};this.lerp=function(a,b,e){return a+(b-a)*e};this.VIntX=function(a,b,e,f,g,h,i,l,k,n){g=(g-k)/(n-k);k=this.normal_cache;b[f]=h+g*this.delta;b[f+1]=i;b[f+2]=l;e[f]=this.lerp(k[a],k[a+3],g);e[f+1]=this.lerp(k[a+1],k[a+4],g);e[f+2]=this.lerp(k[a+2],k[a+5],g)};this.VIntY=function(a,b,e,f,g,h,i,l,k,n){g=(g-k)/(n-k);k=this.normal_cache;b[f]=h;b[f+1]=i+g*this.delta;b[f+2]=l;b=a+3*this.yd;
e[f]=this.lerp(k[a],k[b],g);e[f+1]=this.lerp(k[a+1],k[b+1],g);e[f+2]=this.lerp(k[a+2],k[b+2],g)};this.VIntZ=function(a,b,e,f,g,h,i,l,k,n){g=(g-k)/(n-k);k=this.normal_cache;b[f]=h;b[f+1]=i;b[f+2]=l+g*this.delta;b=a+3*this.zd;e[f]=this.lerp(k[a],k[b],g);e[f+1]=this.lerp(k[a+1],k[b+1],g);e[f+2]=this.lerp(k[a+2],k[b+2],g)};this.compNorm=function(a){var b=3*a;0===this.normal_cache[b]&&(this.normal_cache[b]=this.field[a-1]-this.field[a+1],this.normal_cache[b+1]=this.field[a-this.yd]-this.field[a+this.yd],
this.normal_cache[b+2]=this.field[a-this.zd]-this.field[a+this.zd])};this.polygonize=function(a,b,e,f,g,h){var i=f+1,l=f+this.yd,k=f+this.zd,n=i+this.yd,q=i+this.zd,o=f+this.yd+this.zd,p=i+this.yd+this.zd,m=0,r=this.field[f],s=this.field[i],t=this.field[l],u=this.field[n],v=this.field[k],x=this.field[q],B=this.field[o],D=this.field[p];r<g&&(m|=1);s<g&&(m|=2);t<g&&(m|=8);u<g&&(m|=4);v<g&&(m|=16);x<g&&(m|=32);B<g&&(m|=128);D<g&&(m|=64);var C=THREE.edgeTable[m];if(0===C)return 0;var A=this.delta,H=a+
A,I=b+A,A=e+A;C&1&&(this.compNorm(f),this.compNorm(i),this.VIntX(3*f,this.vlist,this.nlist,0,g,a,b,e,r,s));C&2&&(this.compNorm(i),this.compNorm(n),this.VIntY(3*i,this.vlist,this.nlist,3,g,H,b,e,s,u));C&4&&(this.compNorm(l),this.compNorm(n),this.VIntX(3*l,this.vlist,this.nlist,6,g,a,I,e,t,u));C&8&&(this.compNorm(f),this.compNorm(l),this.VIntY(3*f,this.vlist,this.nlist,9,g,a,b,e,r,t));C&16&&(this.compNorm(k),this.compNorm(q),this.VIntX(3*k,this.vlist,this.nlist,12,g,a,b,A,v,x));C&32&&(this.compNorm(q),
this.compNorm(p),this.VIntY(3*q,this.vlist,this.nlist,15,g,H,b,A,x,D));C&64&&(this.compNorm(o),this.compNorm(p),this.VIntX(3*o,this.vlist,this.nlist,18,g,a,I,A,B,D));C&128&&(this.compNorm(k),this.compNorm(o),this.VIntY(3*k,this.vlist,this.nlist,21,g,a,b,A,v,B));C&256&&(this.compNorm(f),this.compNorm(k),this.VIntZ(3*f,this.vlist,this.nlist,24,g,a,b,e,r,v));C&512&&(this.compNorm(i),this.compNorm(q),this.VIntZ(3*i,this.vlist,this.nlist,27,g,H,b,e,s,x));C&1024&&(this.compNorm(n),this.compNorm(p),this.VIntZ(3*
n,this.vlist,this.nlist,30,g,H,I,e,u,D));C&2048&&(this.compNorm(l),this.compNorm(o),this.VIntZ(3*l,this.vlist,this.nlist,33,g,a,I,e,t,B));m<<=4;for(g=f=0;-1!=THREE.triTable[m+g];)a=m+g,b=a+1,e=a+2,this.posnormtriv(this.vlist,this.nlist,3*THREE.triTable[a],3*THREE.triTable[b],3*THREE.triTable[e],h),g+=3,f++;return f};this.posnormtriv=function(a,b,e,f,g,h){var i=3*this.count;this.positionArray[i]=a[e];this.positionArray[i+1]=a[e+1];this.positionArray[i+2]=a[e+2];this.positionArray[i+3]=a[f];this.positionArray[i+
4]=a[f+1];this.positionArray[i+5]=a[f+2];this.positionArray[i+6]=a[g];this.positionArray[i+7]=a[g+1];this.positionArray[i+8]=a[g+2];this.normalArray[i]=b[e];this.normalArray[i+1]=b[e+1];this.normalArray[i+2]=b[e+2];this.normalArray[i+3]=b[f];this.normalArray[i+4]=b[f+1];this.normalArray[i+5]=b[f+2];this.normalArray[i+6]=b[g];this.normalArray[i+7]=b[g+1];this.normalArray[i+8]=b[g+2];this.hasNormal=this.hasPos=!0;this.count+=3;this.count>=this.maxCount-3&&h(this)};this.begin=function(){this.count=0;
this.hasNormal=this.hasPos=!1};this.end=function(a){if(0!==this.count){for(var b=3*this.count;b<this.positionArray.length;b++)this.positionArray[b]=0;a(this)}};this.addBall=function(a,b,e,f,g){var h=this.size*Math.sqrt(f/g),i=e*this.size,l=b*this.size,k=a*this.size,n=Math.floor(i-h);1>n&&(n=1);i=Math.floor(i+h);i>this.size-1&&(i=this.size-1);var q=Math.floor(l-h);1>q&&(q=1);l=Math.floor(l+h);l>this.size-1&&(l=this.size-1);var o=Math.floor(k-h);1>o&&(o=1);h=Math.floor(k+h);h>this.size-1&&(h=this.size-
1);for(var p,m,r,s,t,u,v,k=n;k<i;k++){r=this.size2*k;t=k/this.size-e;u=t*t;for(n=q;n<l;n++){m=r+this.size*n;p=n/this.size-b;v=p*p;for(p=o;p<h;p++)s=p/this.size-a,s=f/(1.0E-6+s*s+v+u)-g,0<s&&(this.field[m+p]+=s)}}};this.addPlaneX=function(a,b){var e,f,g,h,i,l=this.size,k=this.yd,n=this.zd,q=this.field,o=l*Math.sqrt(a/b);o>l&&(o=l);for(e=0;e<o;e++)if(f=e/l,f*=f,h=a/(1.0E-4+f)-b,0<h)for(f=0;f<l;f++){i=e+f*k;for(g=0;g<l;g++)q[n*g+i]+=h}};this.addPlaneY=function(a,b){var e,f,g,h,i,l,k=this.size,n=this.yd,
q=this.zd,o=this.field,p=k*Math.sqrt(a/b);p>k&&(p=k);for(f=0;f<p;f++)if(e=f/k,e*=e,h=a/(1.0E-4+e)-b,0<h){i=f*n;for(e=0;e<k;e++){l=i+e;for(g=0;g<k;g++)o[q*g+l]+=h}}};this.addPlaneZ=function(a,b){var e,f,g,h,i,l,k=this.size,n=this.yd,q=this.zd,o=this.field,p=k*Math.sqrt(a/b);p>k&&(p=k);for(g=0;g<p;g++)if(e=g/k,e*=e,h=a/(1.0E-4+e)-b,0<h){i=q*g;for(f=0;f<k;f++){l=i+f*n;for(e=0;e<k;e++)o[l+e]+=h}}};this.reset=function(){var a;for(a=0;a<this.size3;a++)this.normal_cache[3*a]=0,this.field[a]=0};this.render=
function(a){this.begin();var b,e,f,g,h,i,l,k,n,q=this.size-2;for(g=1;g<q;g++){n=this.size2*g;l=(g-this.halfsize)/this.halfsize;for(f=1;f<q;f++){k=n+this.size*f;i=(f-this.halfsize)/this.halfsize;for(e=1;e<q;e++)h=(e-this.halfsize)/this.halfsize,b=k+e,this.polygonize(h,i,l,b,this.isolation,a)}}this.end(a)};this.generateGeometry=function(){var a=0,b=new THREE.Geometry,e=[];this.render(function(f){var g,h,i,l,k,n,q,o;for(g=0;g<f.count;g++)q=3*g,k=q+1,o=q+2,h=f.positionArray[q],i=f.positionArray[k],l=
f.positionArray[o],n=new THREE.Vector3(h,i,l),h=f.normalArray[q],i=f.normalArray[k],l=f.normalArray[o],q=new THREE.Vector3(h,i,l),q.normalize(),k=new THREE.Vertex(n),b.vertices.push(k),e.push(q);n=f.count/3;for(g=0;g<n;g++)q=3*(a+g),k=q+1,o=q+2,h=e[q],i=e[k],l=e[o],q=new THREE.Face3(q,k,o,[h,i,l]),b.faces.push(q);a+=n;f.count=0});return b};this.init(a)};THREE.MarchingCubes.prototype=new THREE.Object3D;THREE.MarchingCubes.prototype.constructor=THREE.MarchingCubes;
THREE.edgeTable=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,
1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,
419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]);
THREE.triTable=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,
-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,
8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,
-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,
5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,
-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,
10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,
6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,
8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,
2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,
-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,
-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,
-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,
-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,
2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,
4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,
2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]);THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=new THREE.Object3D;THREE.LensFlare.prototype.constructor=THREE.LensFlare;
THREE.LensFlare.prototype.supr=THREE.Object3D.prototype;THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));if(void 0===d)d=THREE.NormalBlending;c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};
THREE.LensFlarePlugin=function(){function a(a){var c=b.createProgram(),d=b.createShader(b.FRAGMENT_SHADER),e=b.createShader(b.VERTEX_SHADER);b.shaderSource(d,a.fragmentShader);b.shaderSource(e,a.vertexShader);b.compileShader(d);b.compileShader(e);b.attachShader(c,d);b.attachShader(c,e);b.linkProgram(c);return c}var b,c,d,e,f,g,h,i,l,k,n,q,o;this.init=function(p){b=p.context;c=p;d=new Float32Array(16);e=new Uint16Array(6);p=0;d[p++]=-1;d[p++]=-1;d[p++]=0;d[p++]=0;d[p++]=1;d[p++]=-1;d[p++]=1;d[p++]=
0;d[p++]=1;d[p++]=1;d[p++]=1;d[p++]=1;d[p++]=-1;d[p++]=1;d[p++]=0;d[p++]=1;p=0;e[p++]=0;e[p++]=1;e[p++]=2;e[p++]=0;e[p++]=2;e[p++]=3;f=b.createBuffer();g=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,f);b.bufferData(b.ARRAY_BUFFER,d,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,g);b.bufferData(b.ELEMENT_ARRAY_BUFFER,e,b.STATIC_DRAW);h=b.createTexture();i=b.createTexture();b.bindTexture(b.TEXTURE_2D,h);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,
b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,i);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(l=!1,k=a(THREE.ShaderFlares.lensFlare)):(l=!0,k=a(THREE.ShaderFlares.lensFlareVertexTexture));n={};q={};n.vertex=b.getAttribLocation(k,"position");n.uv=b.getAttribLocation(k,"uv");q.renderType=b.getUniformLocation(k,"renderType");q.map=b.getUniformLocation(k,"map");q.occlusionMap=b.getUniformLocation(k,"occlusionMap");q.opacity=b.getUniformLocation(k,"opacity");q.color=b.getUniformLocation(k,
"color");q.scale=b.getUniformLocation(k,"scale");q.rotation=b.getUniformLocation(k,"rotation");q.screenPosition=b.getUniformLocation(k,"screenPosition");o=!1};this.render=function(a,d,e,s){var a=a.__webglFlares,t=a.length;if(t){var u=new THREE.Vector3,v=s/e,x=0.5*e,B=0.5*s,D=16/s,C=new THREE.Vector2(D*v,D),A=new THREE.Vector3(1,1,0),H=new THREE.Vector2(1,1),I=q,D=n;b.useProgram(k);o||(b.enableVertexAttribArray(n.vertex),b.enableVertexAttribArray(n.uv),o=!0);b.uniform1i(I.occlusionMap,0);b.uniform1i(I.map,
1);b.bindBuffer(b.ARRAY_BUFFER,f);b.vertexAttribPointer(D.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(D.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,g);b.disable(b.CULL_FACE);b.depthMask(!1);var N,$,K,Q,L;for(N=0;N<t;N++)if(D=16/s,C.set(D*v,D),Q=a[N],u.set(Q.matrixWorld.n14,Q.matrixWorld.n24,Q.matrixWorld.n34),d.matrixWorldInverse.multiplyVector3(u),d.projectionMatrix.multiplyVector3(u),A.copy(u),H.x=A.x*x+x,H.y=A.y*B+B,l||0<H.x&&H.x<e&&0<H.y&&H.y<s){b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,
h);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,H.x-8,H.y-8,16,16,0);b.uniform1i(I.renderType,0);b.uniform2f(I.scale,C.x,C.y);b.uniform3f(I.screenPosition,A.x,A.y,A.z);b.disable(b.BLEND);b.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.activeTexture(b.TEXTURE0);b.bindTexture(b.TEXTURE_2D,i);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,H.x-8,H.y-8,16,16,0);b.uniform1i(I.renderType,1);b.disable(b.DEPTH_TEST);b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,h);b.drawElements(b.TRIANGLES,
6,b.UNSIGNED_SHORT,0);Q.positionScreen.copy(A);Q.customUpdateCallback?Q.customUpdateCallback(Q):Q.updateLensFlares();b.uniform1i(I.renderType,2);b.enable(b.BLEND);for($=0,K=Q.lensFlares.length;$<K;$++)if(L=Q.lensFlares[$],0.001<L.opacity&&0.001<L.scale)A.x=L.x,A.y=L.y,A.z=L.z,D=L.size*L.scale/s,C.x=D*v,C.y=D,b.uniform3f(I.screenPosition,A.x,A.y,A.z),b.uniform2f(I.scale,C.x,C.y),b.uniform1f(I.rotation,L.rotation),b.uniform1f(I.opacity,L.opacity),b.uniform3f(I.color,L.color.r,L.color.g,L.color.b),c.setBlending(L.blending),
c.setTexture(L.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0)}b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};
THREE.ShadowMapPlugin=function(){var a,b,c,d,e=new THREE.Frustum,f=new THREE.Matrix4;this.init=function(e){a=e.context;b=e;var e=THREE.ShaderLib.depthRGBA,f=THREE.UniformsUtils.clone(e.uniforms);c=new THREE.ShaderMaterial({fragmentShader:e.fragmentShader,vertexShader:e.vertexShader,uniforms:f});d=new THREE.ShaderMaterial({fragmentShader:e.fragmentShader,vertexShader:e.vertexShader,uniforms:f,morphTargets:!0});c._shadowPass=!0;d._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&
this.update(a,c)};this.update=function(g){var h,i,l,k,n,q,o,p,m,r=g.lights;a.clearColor(1,1,1,1);a.disable(a.BLEND);b.shadowMapCullFrontFaces&&a.cullFace(a.FRONT);b.setDepthTest(!0);for(h=0,i=r.length;h<i;h++)if(p=r[h],p.castShadow){if(!p.shadowMap)p.shadowMap=new THREE.WebGLRenderTarget(p.shadowMapWidth,p.shadowMapHeight,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),p.shadowMapSize=new THREE.Vector2(p.shadowMapWidth,p.shadowMapHeight),p.shadowMatrix=new THREE.Matrix4;
if(!p.shadowCamera){if(p instanceof THREE.SpotLight)p.shadowCamera=new THREE.PerspectiveCamera(p.shadowCameraFov,p.shadowMapWidth/p.shadowMapHeight,p.shadowCameraNear,p.shadowCameraFar);else if(p instanceof THREE.DirectionalLight)p.shadowCamera=new THREE.OrthographicCamera(p.shadowCameraLeft,p.shadowCameraRight,p.shadowCameraTop,p.shadowCameraBottom,p.shadowCameraNear,p.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}g.add(p.shadowCamera);b.autoUpdateScene&&g.updateMatrixWorld()}if(p.shadowCameraVisible&&
!p.cameraHelper)p.cameraHelper=new THREE.CameraHelper(p.shadowCamera),p.shadowCamera.add(p.cameraHelper);l=p.shadowMap;k=p.shadowMatrix;n=p.shadowCamera;n.position.copy(p.matrixWorld.getPosition());n.lookAt(p.target.matrixWorld.getPosition());n.updateMatrixWorld();n.matrixWorldInverse.getInverse(n.matrixWorld);if(p.cameraHelper)p.cameraHelper.lines.visible=p.shadowCameraVisible;p.shadowCameraVisible&&p.cameraHelper.update(p.shadowCamera);k.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);k.multiplySelf(n.projectionMatrix);
k.multiplySelf(n.matrixWorldInverse);if(!n._viewMatrixArray)n._viewMatrixArray=new Float32Array(16);n.matrixWorldInverse.flattenToArray(n._viewMatrixArray);if(!n._projectionMatrixArray)n._projectionMatrixArray=new Float32Array(16);n.projectionMatrix.flattenToArray(n._projectionMatrixArray);f.multiply(n.projectionMatrix,n.matrixWorldInverse);e.setFromMatrix(f);b.setRenderTarget(l);b.clear();m=g.__webglObjects;for(l=0,k=m.length;l<k;l++)if(q=m[l],p=q.object,q.render=!1,p.visible&&p.castShadow&&(!(p instanceof
THREE.Mesh)||!p.frustumCulled||e.contains(p)))p.matrixWorld.flattenToArray(p._objectMatrixArray),p._modelViewMatrix.multiplyToArray(n.matrixWorldInverse,p.matrixWorld,p._modelViewMatrixArray),q.render=!0;for(l=0,k=m.length;l<k;l++)if(q=m[l],q.render)p=q.object,q=q.buffer,b.setObjectFaces(p),o=p.customDepthMaterial?p.customDepthMaterial:p.geometry.morphTargets.length?d:c,q instanceof THREE.BufferGeometry?b.renderBufferDirect(n,r,null,o,q,p):b.renderBuffer(n,r,null,o,q,p);m=g.__webglObjectsImmediate;
for(l=0,k=m.length;l<k;l++)q=m[l],p=q.object,p.visible&&p.castShadow&&(p.matrixAutoUpdate&&p.matrixWorld.flattenToArray(p._objectMatrixArray),p._modelViewMatrix.multiplyToArray(n.matrixWorldInverse,p.matrixWorld,p._modelViewMatrixArray),b.renderImmediateObject(n,r,null,c,p))}g=b.getClearColor();h=b.getClearAlpha();a.clearColor(g.r,g.g,g.b,h);a.enable(a.BLEND);b.shadowMapCullFrontFaces&&a.cullFace(a.BACK)}};
THREE.SpritePlugin=function(){function a(a,b){return b.z-a.z}var b,c,d,e,f,g,h,i,l,k;this.init=function(a){b=a.context;c=a;d=new Float32Array(16);e=new Uint16Array(6);a=0;d[a++]=-1;d[a++]=-1;d[a++]=0;d[a++]=1;d[a++]=1;d[a++]=-1;d[a++]=1;d[a++]=1;d[a++]=1;d[a++]=1;d[a++]=1;d[a++]=0;d[a++]=-1;d[a++]=1;d[a++]=0;a=d[a++]=0;e[a++]=0;e[a++]=1;e[a++]=2;e[a++]=0;e[a++]=2;e[a++]=3;f=b.createBuffer();g=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,f);b.bufferData(b.ARRAY_BUFFER,d,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,
g);b.bufferData(b.ELEMENT_ARRAY_BUFFER,e,b.STATIC_DRAW);var a=THREE.ShaderSprite.sprite,q=b.createProgram(),o=b.createShader(b.FRAGMENT_SHADER),p=b.createShader(b.VERTEX_SHADER);b.shaderSource(o,a.fragmentShader);b.shaderSource(p,a.vertexShader);b.compileShader(o);b.compileShader(p);b.attachShader(q,o);b.attachShader(q,p);b.linkProgram(q);h=q;i={};l={};i.position=b.getAttribLocation(h,"position");i.uv=b.getAttribLocation(h,"uv");l.uvOffset=b.getUniformLocation(h,"uvOffset");l.uvScale=b.getUniformLocation(h,
"uvScale");l.rotation=b.getUniformLocation(h,"rotation");l.scale=b.getUniformLocation(h,"scale");l.alignment=b.getUniformLocation(h,"alignment");l.color=b.getUniformLocation(h,"color");l.map=b.getUniformLocation(h,"map");l.opacity=b.getUniformLocation(h,"opacity");l.useScreenCoordinates=b.getUniformLocation(h,"useScreenCoordinates");l.affectedByDistance=b.getUniformLocation(h,"affectedByDistance");l.screenPosition=b.getUniformLocation(h,"screenPosition");l.modelViewMatrix=b.getUniformLocation(h,"modelViewMatrix");
l.projectionMatrix=b.getUniformLocation(h,"projectionMatrix");k=!1};this.render=function(d,e,o,p){var d=d.__webglSprites,m=d.length;if(m){var r=i,s=l,t=p/o,o=0.5*o,u=0.5*p,v=!0;b.useProgram(h);k||(b.enableVertexAttribArray(r.position),b.enableVertexAttribArray(r.uv),k=!0);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.depthMask(!0);b.bindBuffer(b.ARRAY_BUFFER,f);b.vertexAttribPointer(r.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(r.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,g);b.uniformMatrix4fv(s.projectionMatrix,
!1,e._projectionMatrixArray);b.activeTexture(b.TEXTURE0);b.uniform1i(s.map,0);for(var x,B=[],r=0;r<m;r++)if(x=d[r],x.visible&&0!==x.opacity)x.useScreenCoordinates?x.z=-x.position.z:(x._modelViewMatrix.multiplyToArray(e.matrixWorldInverse,x.matrixWorld,x._modelViewMatrixArray),x.z=-x._modelViewMatrix.n34);d.sort(a);for(r=0;r<m;r++)x=d[r],x.visible&&0!==x.opacity&&x.map&&x.map.image&&x.map.image.width&&(x.useScreenCoordinates?(b.uniform1i(s.useScreenCoordinates,1),b.uniform3f(s.screenPosition,(x.position.x-
o)/o,(u-x.position.y)/u,Math.max(0,Math.min(1,x.position.z)))):(b.uniform1i(s.useScreenCoordinates,0),b.uniform1i(s.affectedByDistance,x.affectedByDistance?1:0),b.uniformMatrix4fv(s.modelViewMatrix,!1,x._modelViewMatrixArray)),e=x.map.image.width/(x.scaleByViewport?p:1),B[0]=e*t*x.scale.x,B[1]=e*x.scale.y,b.uniform2f(s.uvScale,x.uvScale.x,x.uvScale.y),b.uniform2f(s.uvOffset,x.uvOffset.x,x.uvOffset.y),b.uniform2f(s.alignment,x.alignment.x,x.alignment.y),b.uniform1f(s.opacity,x.opacity),b.uniform3f(s.color,
x.color.r,x.color.g,x.color.b),b.uniform1f(s.rotation,x.rotation),b.uniform2fv(s.scale,B),x.mergeWith3D&&!v?(b.enable(b.DEPTH_TEST),v=!0):!x.mergeWith3D&&v&&(b.disable(b.DEPTH_TEST),v=!1),c.setBlending(x.blending),c.setTexture(x.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};
if(THREE.WebGLRenderer)THREE.AnaglyphWebGLRenderer=function(a){THREE.WebGLRenderer.call(this,a);this.autoUpdateScene=!1;var b=this,c=this.setSize,d=this.render,e=new THREE.PerspectiveCamera,f=new THREE.PerspectiveCamera,g=new THREE.Matrix4,h=new THREE.Matrix4,i,l,k,n;e.matrixAutoUpdate=f.matrixAutoUpdate=!1;var a={minFilter:THREE.LinearFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat},q=new THREE.WebGLRenderTarget(512,512,a),o=new THREE.WebGLRenderTarget(512,512,a),p=new THREE.PerspectiveCamera(53,
1,1,1E4);p.position.z=2;var a=new THREE.ShaderMaterial({uniforms:{mapLeft:{type:"t",value:0,texture:q},mapRight:{type:"t",value:1,texture:o}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = vec2( uv.x, 1.0 - uv.y );\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D mapLeft;\nuniform sampler2D mapRight;\nvarying vec2 vUv;\nvoid main() {\nvec4 colorL, colorR;\nvec2 uv = vUv;\ncolorL = texture2D( mapLeft, uv );\ncolorR = texture2D( mapRight, uv );\ngl_FragColor = vec4( colorL.g * 0.7 + colorL.b * 0.3, colorR.g, colorR.b, colorL.a + colorR.a ) * 1.1;\n}"}),
m=new THREE.Scene;m.add(new THREE.Mesh(new THREE.PlaneGeometry(2,2),a));m.add(p);this.setSize=function(a,d){c.call(b,a,d);q.width=a;q.height=d;o.width=a;o.height=d};this.render=function(a,c){a.updateMatrixWorld();if(i!==c.aspect||l!==c.near||k!==c.far||n!==c.fov){i=c.aspect;l=c.near;k=c.far;n=c.fov;var t=c.projectionMatrix.clone(),u=0.5*(125/30),v=u*l/125,x=l*Math.tan(n*Math.PI/360),B;g.n14=u;h.n14=-u;u=-x*i+v;B=x*i+v;t.n11=2*l/(B-u);t.n13=(B+u)/(B-u);e.projectionMatrix.copy(t);u=-x*i-v;B=x*i-v;t.n11=
2*l/(B-u);t.n13=(B+u)/(B-u);f.projectionMatrix.copy(t)}e.matrixWorld.copy(c.matrixWorld).multiplySelf(h);e.position.copy(c.position);e.near=c.near;e.far=c.far;d.call(b,a,e,q,!0);f.matrixWorld.copy(c.matrixWorld).multiplySelf(g);f.position.copy(c.position);f.near=c.near;f.far=c.far;d.call(b,a,f,o,!0);m.updateMatrixWorld();d.call(b,m,p)}};
if(THREE.WebGLRenderer)THREE.CrosseyedWebGLRenderer=function(a){THREE.WebGLRenderer.call(this,a);this.autoClear=!1;var b=this,c=this.setSize,d=this.render,e,f,g=new THREE.PerspectiveCamera;g.target=new THREE.Vector3(0,0,0);var h=new THREE.PerspectiveCamera;h.target=new THREE.Vector3(0,0,0);b.separation=10;if(a&&void 0!==a.separation)b.separation=a.separation;this.setSize=function(a,d){c.call(b,a,d);e=a/2;f=d};this.render=function(a,c){this.clear();g.fov=c.fov;g.aspect=0.5*c.aspect;g.near=c.near;g.far=
c.far;g.updateProjectionMatrix();g.position.copy(c.position);g.target.copy(c.target);g.translateX(b.separation);g.lookAt(g.target);h.projectionMatrix=g.projectionMatrix;h.position.copy(c.position);h.target.copy(c.target);h.translateX(-b.separation);h.lookAt(h.target);this.setViewport(0,0,e,f);d.call(b,a,g);this.setViewport(e,0,e,f);d.call(b,a,h,!1)}};
THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
lensFlare:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};
THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"precision mediump float;\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n}"}};
// tquery.js - https://github.com/jeromeetienne/tquery - MIT License
/**
 * @fileOverview This file is the core of tQuery library. 
*/

/**
 * Create a tQuery element
 *
 * @class root class
 * 
 * @param {} object
 * @param {THREE.Object3D} rootnode
 * @returns {tQuery.*} the tQuery object created
*/
var tQuery = function (object, root) {
    // TODO make that cleaner
    // - there is a list of functions registered by each plugins
    //   - handle() object instanceof THREE.Mesh
    //   - create() return new tQuery(object)
    // - this list is processed in order here

    if (object instanceof THREE.Mesh && tQuery.Mesh) {
        return new tQuery.Mesh(object);

    } else if (object instanceof THREE.DirectionalLight && tQuery.DirectionalLight) {
        return new tQuery.DirectionalLight(object);
    } else if (object instanceof THREE.AmbientLight && tQuery.AmbientLight) {
        return new tQuery.AmbientLight(object);
    } else if (object instanceof THREE.Light && tQuery.Light) {
        return new tQuery.Light(object);

    } else if (object instanceof THREE.Object3D && tQuery.Object3D) {
        return new tQuery.Object3D(object);
    } else if (object instanceof THREE.Geometry && tQuery.Geometry) {
        return new tQuery.Geometry(object);
    } else if (object instanceof THREE.Material && tQuery.Material) {
        return new tQuery.Material(object);
    } else if (typeof object === "string" && tQuery.Object3D) {
        return new tQuery.Object3D(object, root);

        //Controls
    } else if (object instanceof THREE.TrackballControls && tQuery.TrackballControl) {
        return new tQuery.TrackballControl(object);

    } else {
        console.assert(false, "unsupported type")
    }
    return undefined;
};

/**
 * The version of tQuery
*/
tQuery.VERSION	= "0.0.1";

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * generic getter/setter
 * 
 * @param {Object} object the object in which store the data
 * @param {String} key the key/name of the data to get/set
 * @param {*} value the value to set (optional)
 * 
 * @returns {*} return the value stored in this object for this key
*/
tQuery.data	= function(object, key, value)
{
	// sanity check
	console.assert( object, 'invalid parameters' );
	console.assert( typeof key === 'string', 'invalid parameters');

	// init _tqData
	object['_tqData']	= object['_tqData']	|| {};
	// set the value if any
	if( value ){
		object['_tqData'][key]	= value;
	}
	// return the value
	return object['_tqData'][key];
};

/**
 * Same as jQuery.removeData()
*/
tQuery.removeData	= function(object, key)
{
	// handle the 'key as Array' case
	if( key instanceof Array ){
		key.forEach(function(key){
			tQuery.removeData(object, key);
		})
		return;
	}
	// sanity check
	console.assert( typeof key === "string");
	// do delete the key
	delete object['_tqData'][key];
	// TOTO remove object[_tqData] if empty now
}


//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * loop over a Array.
 * 
 * @param {Array} arr the array to traverse.
 * @param {Function} callback the function to notify. function(element){ }.
 * 			loop interrupted if it returns false
 * 
 * @returns {Boolean} return true if completed, false if interrupted
*/
tQuery.each	= function(arr, callback){
	for(var i = 0; i < arr.length; i++){
		var keepLooping	= callback(arr[i])
		if( keepLooping === false )	return false;
	}
	return true;
};

/**
 * Make a child Class inherit from the parent class.
 *
 * @param {Object} childClass the child class which gonna inherit
 * @param {Object} parentClass the class which gonna be inherited
*/
tQuery.inherit	= function(childClass, parentClass){
	// trick to avoid calling parentClass constructor
	var tempFn		= function() {};
	tempFn.prototype	= parentClass.prototype;
	childClass.prototype	= new tempFn();

	childClass.parent	= parentClass.prototype;
	childClass.prototype.constructor= childClass;	
};

/**
 * extend function. mainly aimed at handling default values - jme: im not sure at all it is the proper one.
 * http://jsapi.info/_/extend
 * similar to jquery one but much smaller
*/
tQuery.extend = function(obj, base){
	var result	= {};
	base && Object.keys(base).forEach(function(key){
		result[key]	= base[key];
	})
	obj && Object.keys(obj).forEach(function(key){
		result[key]	= obj[key];
	})
	return result;
};

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Make an object pluginable
 * 
 * @param {Object} object the object on which you mixin function
 * @param {Object} dest the object in which to register the plugin
*/
tQuery.pluginsOn	= function(object, dest){
	dest	= dest	|| object.prototype || object;
	object.register	= function(name, funct) {
		if( dest[name] ){
			throw new Error('Conflict! Already method called: ' + name);
		}
		dest[name]	= funct;
	};
	object.unregister	= function(name){
		if( dest.hasOwnProperty(name) === false ){
			throw new Error('Plugin not found: ' + name);
		}
		delete dest[name];
	};
	object.registered	= function(name){
		return dest.hasOwnProperty(name) === true;
	}
};

tQuery.pluginsInstanceOn= function(klass){ return tQuery.pluginsOn(klass);		};
tQuery.pluginsStaticOn	= function(klass){ return tQuery.pluginsOn(klass. klass);	};


// make it pluginable
tQuery.pluginsOn(tQuery, tQuery);

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

tQuery.mixinAttributes	= function(dstObject, properties){
	// mixin the new property
	// FIXME the inheritance should work now... not sure
	dstObject.prototype._attrProps	= tQuery.extend(dstObject.prototype._attrProps, properties);

	dstObject.prototype.attr	= function(name, value){
		// handle parameters
		if( name instanceof Object && value === undefined ){
			Object.keys(name).forEach(function(key){
				this.attr(key, name[key]);
			}.bind(this));
		}else if( typeof(name) === 'string' ){
			console.assert( Object.keys(this._attrProps).indexOf(name) !== -1, 'invalid property name:'+name);
		}else	console.assert(false, 'invalid parameter');

		// handle setter
		if( value !== undefined ){
			var convertFn	= this._attrProps[name];
			value		= convertFn(value);
			this.each(function(element){
				element[name]	= value;
			})
			return this;			
		}
		// handle getter
		if( this.length === 0 )	return undefined
		var element	= this.get(0);
		return element[name];
	};

	// add shortcuts
	Object.keys(properties).forEach(function(name){
		dstObject.prototype[name]	= function(value){
			return this.attr(name, value);
		};
	}.bind(this));
};

//////////////////////////////////////////////////////////////////////////////////
//		put some helpers						//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Flow control - from https://github.com/jeromeetienne/gowiththeflow.js
*/
tQuery.Flow	= function(){
	var self, stack = [], timerId = setTimeout(function(){ timerId = null; self._next(); }, 0);
	return self = {
		destroy	: function(){ timerId && clearTimeout(timerId);	},
		par	: function(callback, isSeq){
			if(isSeq || !(stack[stack.length-1] instanceof Array)) stack.push([]);
			stack[stack.length-1].push(callback);
			return self;
		},seq	: function(callback){ return self.par(callback, true);	},
		_next	: function(err, result){
			var errors = [], results = [], callbacks = stack.shift() || [], nbReturn = callbacks.length, isSeq = nbReturn == 1;
			callbacks && callbacks.forEach(function(fct, index){
				fct(function(error, result){
					errors[index]	= error;
					results[index]	= result;		
					if(--nbReturn == 0)	self._next(isSeq?errors[0]:errors, isSeq?results[0]:results)
				}, err, result)
			})
		}
	}
};

/**
 * microevents.js - https://github.com/jeromeetienne/microevent.js
*/
tQuery.MicroeventMixin	= function(destObj){
	destObj.bind	= function(event, fct){
		if(this._events === undefined) 	this._events	= {};
		this._events[event] = this._events[event]	|| [];
		this._events[event].push(fct);
		return fct;
	};
	destObj.unbind	= function(event, fct){
		if(this._events === undefined) 	this._events	= {};
		if( event in this._events === false  )	return;
		this._events[event].splice(this._events[event].indexOf(fct), 1);
	};
	destObj.trigger	= function(event /* , args... */){
		if(this._events === undefined) 	this._events	= {};
		if( this._events[event] === undefined )	return;
		var tmpArray	= this._events[event].slice(); 
		for(var i = 0; i < tmpArray.length; i++){
			tmpArray[i].apply(this, Array.prototype.slice.call(arguments, 1))
		}
	}
};

tQuery.convert	= {};

/**
 * Convert the value into a THREE.Color object
 * 
 * @return {THREE.Color} the resulting color
*/
tQuery.convert.toThreeColor	= function(value){
	if( arguments.length === 1 && typeof(value) === 'number'){
		return new THREE.Color(value);
	}else if( arguments.length === 1 && value instanceof THREE.Color ){
		return value;
	}else{
		console.assert(false, "invalid parameter");
	}
	return undefined;	// never reached - just to workaround linter complaint
};

tQuery.convert.toNumber	= function(value){
	if( arguments.length === 1 && typeof(value) === 'number'){
		return value;
	}else{
		console.assert(false, "invalid parameter");
	}
	return undefined;	// never reached - just to workaround linter complaint
};

tQuery.convert.identity	= function(value){
	return value;
};

tQuery.convert.toBool	= function(value){
	if( arguments.length === 1 && typeof(value) === 'boolean'){
		return value;
	}else{
		console.assert(false, "invalid parameter");
	}
	return undefined;	// never reached - just to workaround linter complaint
};
/**
 * implementation of the tQuery.Node
 *
 * @class base class for tQuery objects
 *
 * @param {Object} object an instance or an array of instance
*/
tQuery.Node	= function(object)
{
	// handle parameters
	if( object instanceof Array )	this._lists	= object;
	else if( !object )		this._lists	= [];
	else				this._lists	= [object];
	this.length	= this._lists.length;
};

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Retrieve the elements matched by the tQuery object
 * 
 * @param {Function} callback the function to notify. function(element){ }.
 * 			loop interrupted if it returns false
 * 
 * @returns {Boolean} return true if completed, false if interrupted
*/
tQuery.Node.prototype.get	= function(idx)
{
	if( idx === undefined )	return this._lists;
	// sanity check - it MUST be defined
	console.assert(this._lists[idx], "element not defined");
	return this._lists[idx];
};

/**
 * loop over element
 * 
 * @param {Function} callback the function to notify. function(element){ }.
 * 			loop interrupted if it returns false
 * 
 * @returns {Boolean} return true if completed, false if interrupted
*/
tQuery.Node.prototype.each	= function(callback)
{
	return tQuery.each(this._lists, callback)
};

/**
 * getter/setter of the back pointer
 *
 * @param {Object} back the value to return when .back() is called. optional
*/
tQuery.Node.prototype.back	= function(value)
{
	if( value  === undefined )	return this._back;
	this._back	= value;
	return this;
};

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * same as .data() in jquery
*/
tQuery.Node.prototype.data	= function(key, value)
{
	// handle the setter case
	if( value ){
		this.each(function(element){
			tQuery.data(element, key, value);
		});
		return this;	// for chained API
	}
	// return the value of the first element
	if( this.length > 0 )	return tQuery.data(this.get(0), key)
	// return undegined if the list is empty
	console.assert(this.length === 0);
	return undefined
}


/**
 * same as .data() in jquery
*/
tQuery.Node.prototype.removeData	= function(key)
{
	this.each(function(element){
		tQuery.removeData(element, key);
	});
	return this;	// for chained API
}/**
 * Handle object3D
 *
 * @class include THREE.Object3D
 *
 * @param {} object
 * @param {THREE.Object3D} rootnode
 * @returns {tQuery.*} the tQuery object created
*/
tQuery.Object3D	= function(object, root)
{
	// handle the case of selector
	if( typeof object === "string" ){
		object	= tQuery.Object3D._select(object, root);
	}

	// call parent ctor
	tQuery.Object3D.parent.constructor.call(this, object)

	// sanity check - all items MUST be THREE.Object3D
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.Object3D); });
};

/**
 * inherit from tQuery.Node
*/
tQuery.inherit(tQuery.Object3D, tQuery.Node);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.Object3D);

//////////////////////////////////////////////////////////////////////////////////
//		geometry and material						//
//////////////////////////////////////////////////////////////////////////////////

/**
 * get geometry.
 *
 * TODO this should be move in tQuery.Mesh
 * 
 * @returns {tQuery.Geometry} return the geometries from the tQuery.Object3D
*/
tQuery.Object3D.prototype.geometry	= function(value){
	var geometries	= [];
	this.each(function(object3d){
		geometries.push(object3d.geometry)
	});
	return new tQuery.Geometry(geometries).back(this);
};

/**
 * get material.
 * 
 * TODO this should be move in tQuery.Mesh
 * 
 * @returns {tQuery.Material} return the materials from the tQuery.Object3D
*/
tQuery.Object3D.prototype.material	= function(){
	var materials	= [];
	this.each(function(object3d){
		materials.push(object3d.material)
	});
	return new tQuery.Material(materials);
};

//////////////////////////////////////////////////////////////////////////////////
//			addTo/removeFrom tQuery.World/tQuery.Object3d		//
//////////////////////////////////////////////////////////////////////////////////

/**
 * add all matched elements to a world
 * 
 * @param {tQuery.World or tQuery.Object3D} target object to which add it
 * @returns {tQuery.Object3D} chained API
*/
tQuery.Object3D.prototype.addTo	= function(target)
{
	console.assert( target instanceof tQuery.World || target instanceof tQuery.Object3D )
	this.each(function(object3d){
		target.add(object3d)
	}.bind(this));
	return this;
}

/**
 * remove all matched elements from a world
 * 
 * @param {tQuery.World or tQuery.Object3D} target object to which add it
 * @returns {tQuery.Object3D} chained API
*/
tQuery.Object3D.prototype.removeFrom	= function(target)
{
	console.assert( target instanceof tQuery.World || target instanceof tQuery.Object3D )
	this.each(function(object3d){
		target.remove(object3d)
	}.bind(this));
	return this;
}

//////////////////////////////////////////////////////////////////////////////////
//			addTo/removeFrom tQuery.World/tQuery.Object3d		//
//////////////////////////////////////////////////////////////////////////////////

/**
 * add all matched elements to a world
 * 
 * @param {tQuery.Object3D} target object to which add it
 * @returns {tQuery.Object3D} chained API
*/
tQuery.Object3D.prototype.add	= function(tqObject3d)
{
	console.assert( tqObject3d instanceof tQuery.Object3D )
	this.each(function(object1){
		tqObject3d.each(function(object2){
			object1.add(object2);
		})
	}.bind(this));
	return this;
}

/**
 * remove all matched elements from a world
 * 
 * @param {tQuery.Object3D} object3d the object to add in this object
 * @returns {tQuery.Object3D} chained API
*/
tQuery.Object3D.prototype.remove	= function(tqObject3d)
{
	console.assert( tqObject3d instanceof tQuery.Object3D )
	this.each(function(object1){
		tqObject3d.each(function(object2){
			object1.remove(object2);
		})
	}.bind(this));
	return this;
}

//////////////////////////////////////////////////////////////////////////////////
//		Handle dom attribute						//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Getter/Setter for the id of the matched elements
*/
tQuery.Object3D.prototype.id	= function(value)
{
	// sanity check 
	console.assert(this.length <= 1, "tQuery.Object3D.id used on multi-elements" );
	if( value !== undefined ){
		if( this.length > 0 ){
			var object3d	= this.get(0);
			object3d._tqId	= value;
		}
		return this;
	}else{
		if( this.length > 0 ){
			var object3d	= this.get(0);
			return object3d._tqId;
		}
		return undefined;
	}
};

/**
 * add a class to all matched elements
 * 
 * @param {string} className the name of the class to add
 * @returns {tQuery.Object3D} chained API
*/
tQuery.Object3D.prototype.addClass	= function(className){
	this.each(function(tObject3d){
		// init ._tqClasses if needed
		tObject3d._tqClasses	= tObject3d._tqClasses	|| '';

		if( tQuery.Object3D._hasClassOne(tObject3d, className) )	return;
		
		tObject3d._tqClasses	+= ' '+className;
	}.bind(this));
	return this;
};

/**
 * remove a class to all matched elements
 * 
 * @param {string} className the name of the class to remove
 * @returns {tQuery.Object3D} chained API
*/
tQuery.Object3D.prototype.removeClass	= function(className){
	this.each(function(tObject3d){
		tQuery.Object3D._removeClassOne(tObject3d, className);
	}.bind(this));
	return this;	// for chained api
};

/**
 * return true if any of the matched elements has this class
 *
 * @param {string} className the name of the class
 * @returns {tQuery.Object3D} true if any of the matched elements has this class, false overwise
*/
tQuery.Object3D.prototype.hasClass	= function(className){
	var completed	= this.each(function(object3d){
		// init ._tqClasses if needed
		object3d._tqClasses	= object3d._tqClasses	|| '';

		var hasClass	= tQuery.Object3D._hasClassOne(object3d, className);
		return hasClass ? false : true;
	}.bind(this));
	return completed ? false : true;
};

tQuery.Object3D._hasClassOne	= function(object3d, className){
	if( object3d._tqClasses === undefined )	return false;
	var classes	= object3d._tqClasses;
	var re		= new RegExp('(^| |\t)+('+className+')($| |\t)+');
	return classes.match(re) ? true : false;
};

tQuery.Object3D._removeClassOne	= function(object3d, className){
	if( object3d._tqClasses === undefined )	return;
	var re		= new RegExp('(^| |\t)('+className+')($| |\t)');
	object3d._tqClasses	= object3d._tqClasses.replace(re, ' ');
};

//////////////////////////////////////////////////////////////////////////////////
//			handling selection					//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Object3D._select	= function(selector, root){
	root		= root	|| tQuery.world.scene();
	var selectItems	= selector.split(' ').filter(function(v){ return v.length > 0;})

	var lists	= [];	
	root.children.forEach(function(child){
		var nodes	= this._crawls(child, selectItems);
		// FIXME reallocate the array without need
		lists		= lists.concat(nodes);
	}.bind(this));	
	return lists;
}

tQuery.Object3D._crawls	= function(root, selectItems)
{
	var result	= [];
//console.log("crawl", root, selectItems)
	console.assert( selectItems.length >= 1 );
	var match	= this._selectItemMatch(root, selectItems[0]);
//console.log("  match", match)
	var nextSelect	= match ? selectItems.slice(1) : selectItems;
//console.log("  nextSelect", nextSelect)

	if( nextSelect.length === 0 )	return [root];

	root.children.forEach(function(child){
		var nodes	= this._crawls(child, nextSelect);
		// FIXME reallocate the array without need
		result		= result.concat(nodes);
	}.bind(this));

	return result;
}

// all the geometries keywords
tQuery.Object3D._selectableGeometries	= Object.keys(THREE).filter(function(value){
	return value.match(/.+Geometry$/);}).map(function(value){ return value.replace(/Geometry$/,'').toLowerCase();
});

// all the light keywords
tQuery.Object3D._selectableLights	= Object.keys(THREE).filter(function(value){
	return value.match(/.+Light$/);}).map(function(value){ return value.replace(/Light$/,'').toLowerCase();
});

tQuery.Object3D._selectableClasses	= ['mesh', 'light'];

tQuery.Object3D._selectItemMatch	= function(object3d, selectItem)
{
	// sanity check
	console.assert( object3d instanceof THREE.Object3D );
	console.assert( typeof selectItem === 'string' );

	// parse selectItem into subItems
	var subItems	= selectItem.match(new RegExp("([^.#]+|\.[^.#]+|\#[^.#]+)", "g"));;

	// go thru each subItem
	var completed	= tQuery.each(subItems, function(subItem){
		var meta	= subItem.charAt(0);
		var suffix	= subItem.slice(1);
		//console.log("meta", meta, subItem, suffix, object3d)
		if( meta === "." ){
			var hasClass	= tQuery.Object3D._hasClassOne(object3d, suffix);
			return hasClass ? true : false;
		}else if( meta === "#" ){
			return object3d._tqId === suffix ? true : false;
		}else if( subItem === "*" ){
			return true;
		}else if( this._selectableGeometries.indexOf(subItem) !== -1 ){	// Handle geometries
			var geometry	= object3d.geometry;
			var className	= subItem.charAt(0).toUpperCase() + subItem.slice(1) + "Geometry";
			return geometry instanceof THREE[className];
		}else if( this._selectableLights.indexOf(subItem) !== -1 ){	// Handle light
			var className	= subItem.charAt(0).toUpperCase() + subItem.slice(1) + "Light";
			return object3d instanceof THREE[className];
		}else if( this._selectableClasses.indexOf(subItem) !== -1 ){	// Handle light
			var className	= subItem.charAt(0).toUpperCase() + subItem.slice(1);
			return object3d instanceof THREE[className];
		}
		// this point should never be reached
		console.assert(false, "invalid selector: "+subItem);
		return true;
	}.bind(this));

	return completed ? true : false;
}
/**
 * Handle geometry. It inherit from tQuery.Node
 *
 * @class handle THREE.Geometry. It inherit from {@link tQuery.Node}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.Geometry} object an instance or an array of instance
*/
tQuery.Geometry	= function(object)
{
	// call parent
	tQuery.Geometry.parent.constructor.call(this, object)

	// sanity check - all items MUST be THREE.Geometry
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.Geometry); });
};

/**
 * inherit from tQuery.Node
*/
tQuery.inherit(tQuery.Geometry, tQuery.Node);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.Geometry);/**
 * Handle material
 *
 * @class include THREE.Material. It inherit from {@link tQuery.Node}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.Material} object an instance or array of instance
*/
tQuery.Material	= function(object)
{
	// call parent
	tQuery.Material.parent.constructor.call(this, object)

	// sanity check - all items MUST be THREE.Material
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.Material); });
};

/**
 * inherit from tQuery.Node
*/
tQuery.inherit(tQuery.Material, tQuery.Node);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.Material);

/**
 * define all acceptable attributes for this class
*/
tQuery.mixinAttributes(tQuery.Material, {
	opacity		: tQuery.convert.toNumber,
	transparent	: tQuery.convert.toBool
});
/**
 * Handle light
 *
 * @class include THREE.Light. It inherit from {@link tQuery.Node}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.Light} object an instance or array of instance
*/
tQuery.Light	= function(elements)
{
	// call parent ctor
	tQuery.Light.parent.constructor.call(this, elements)

	// sanity check - all items MUST be THREE.Light
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.Light); });
};

/**
 * inherit from tQuery.Node
 * - TODO this should inherit from tQuery.Object3D but but in inheritance
*/
tQuery.inherit(tQuery.Light, tQuery.Object3D);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.Light);

/**
 * define all acceptable attributes for this class
*/
tQuery.mixinAttributes(tQuery.Light, {
	color	: tQuery.convert.toThreeColor
});


/**
 * Handle mesh
 *
 * @class include THREE.Mesh. It inherit from {@link tQuery.Node}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.Mesh} object an instance or array of instance
*/
tQuery.Mesh	= function(elements)
{
	// call parent ctor
	var parent	= tQuery.Mesh.parent;
	parent.constructor.call(this, elements)

	// sanity check - all items MUST be THREE.Mesh
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.Mesh); });
};

/**
 * inherit from tQuery.Node
 * - TODO this should inherit from tQuery.Object3D but but in inheritance
*/
tQuery.inherit(tQuery.Mesh, tQuery.Object3D);


/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.Mesh);


tQuery.Mesh.prototype.material	= function(value){
	var parent	= tQuery.Mesh.parent;
	// handle the getter case
	if( value == undefined )	return parent.material.call(this);
	// handle the setter case
	this.each(function(tMesh){
		tMesh.material	= value;
	});
	return this;	// for the chained API
}

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Handle world (aka scene+camera+renderer)
 *
 * @class youpla
 * 
 * @param {THREE.Material} object an instance or an array of instance
*/
tQuery.World	= function()
{
	// update default world.
	// - TODO no sanity check ?
	tQuery.world	= this;
	
	// create a scene
	this._scene	= new THREE.Scene();

	// create a renderer
	if( this._hasWebGL ){
		this._renderer = new THREE.WebGLRenderer({
			antialias		: true,	// to get smoother output
			preserveDrawingBuffer	: true	// to allow screenshot
		});
		this._renderer.setClearColorHex( 0xBBBBBB, 1 );
	}else{
		this._addGetWebGLMessage();
		throw new Error("WebGL required and not available")
	}
	// FIXME this window dimension is crap
	this._renderer.setSize( window.innerWidth, window.innerHeight );

	// create a camera in the scene
	// FIXME this window dimension is crap
	this._camera	= new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.01, 10000 );
	this._camera.position.set(0, 0, 3);
	this._scene.add(this._camera);
	
	// create the loop
	this._loop	= new tQuery.Loop(this)
};

// make it pluginable
tQuery.pluginsInstanceOn(tQuery.World);

// make it eventable
tQuery.MicroeventMixin(tQuery.World.prototype)


tQuery.World.prototype.destroy	= function(){
	// microevent.js notification
	this.trigger('destroy');
	// destroy the loop
	this._loop.destroy();
	// remove this._cameraControls if needed
	this.removeCameraControls();
	// remove renderer element
	var parent	= this._renderer.domElement.parentElement;
	parent	&& parent.removeChild(this._renderer.domElement);
	
	// clear the global if needed
	if( tQuery.world === this )	tQuery.world = null;
}

//////////////////////////////////////////////////////////////////////////////////
//		WebGL Support							//
//////////////////////////////////////////////////////////////////////////////////

/**
 * true if webgl is available, false otherwise
*/
tQuery.World.prototype._hasWebGL	= (function(){
	// test from Detector.js
	try{
		return !! window.WebGLRenderingContext && !! document.createElement( 'canvas' ).getContext( 'experimental-webgl' );
	} catch( e ){
		return false;
	}
})();

/**
*/
tQuery.World.prototype._addGetWebGLMessage	= function(parent)
{
	parent	= parent || document.body;
	
	// message directly taken from Detector.js
	var domElement = document.createElement( 'div' );
	domElement.style.fontFamily = 'monospace';
	domElement.style.fontSize = '13px';
	domElement.style.textAlign = 'center';
	domElement.style.background = '#eee';
	domElement.style.color = '#000';
	domElement.style.padding = '1em';
	domElement.style.width = '475px';
	domElement.style.margin = '5em auto 0';
	domElement.innerHTML = window.WebGLRenderingContext ? [
		'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">WebGL</a>.<br />',
		'Find out how to get it <a href="http://get.webgl.org/">here</a>.'
	].join( '\n' ) : [
		'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">WebGL</a>.<br/>',
		'Find out how to get it <a href="http://get.webgl.org/">here</a>.'
	].join( '\n' );

	parent.appendChild(domElement);
}

//////////////////////////////////////////////////////////////////////////////////
//		add/remove object3D						//
//////////////////////////////////////////////////////////////////////////////////

tQuery.World.prototype.setCameraControls	= function(control){
	if( this.hasCameraControls() )	this.removeCameraControls();
	this._cameraControls	= control;
	return this;	// for chained API
};

tQuery.World.prototype.removeCameraControls	= function(){
	if( this.hasCameraControls() === false )	return this;
	this._cameraControls	= undefined;
	return this;	// for chained API
};

tQuery.World.prototype.getCameraControls	= function(){
	return this._cameraControls;
};

tQuery.World.prototype.hasCameraControls	= function(){
	return this._cameraControls !== undefined ? true : false;
};

//////////////////////////////////////////////////////////////////////////////////
//		add/remove object3D						//
//////////////////////////////////////////////////////////////////////////////////

/**
 * add an object to the scene
 * 
 * @param {tQuery.Object3D} object3D to add to the scene (THREE.Object3D is accepted)
*/
tQuery.World.prototype.add	= function(object3d)
{
	if( object3d instanceof tQuery.Object3D ){
		object3d.each(function(object3d){
			this._scene.add(object3d)			
		}.bind(this));
	}else if( object3d instanceof THREE.Object3D ){
		this._scene.add(object3d)		
	}else	console.assert(false, "invalid type");
	// for chained API
	return this;
}

/**
 * remove an object to the scene
 * 
 * @param {tQuery.Object3D} object3D to add to the scene (THREE.Object3D is accepted)
*/
tQuery.World.prototype.remove	= function(object3d)
{
	if( object3d instanceof tQuery.Object3D ){
		object3d.each(function(object3d){
			this._scene.remove(object3d)
		}.bind(this));
	}else if( object3d instanceof THREE.Object3D ){
		this._scene.remove(object3d)
	}else	console.assert(false, "invalid type");
	// for chained API
	return this;
}

tQuery.World.prototype.appendTo	= function(domElement)
{
	domElement.appendChild(this._renderer.domElement)
	this._renderer.setSize( domElement.offsetWidth, domElement.offsetHeight );
	// for chained API
	return this;
}

/**
 * Start the loop
*/
tQuery.World.prototype.start	= function(){
	this._loop.start();
	return this;	// for chained API
}
/**
 * Stop the loop
*/
tQuery.World.prototype.stop	= function(){
	this._loop.stop();
	return this;	// for chained API
}

tQuery.World.prototype.loop	= function(){ return this._loop;	}
tQuery.World.prototype.renderer	= function(){ return this._renderer;	}
tQuery.World.prototype.camera	= function(){ return this._camera;	}
tQuery.World.prototype.scene	= function(){ return this._scene;	}
tQuery.World.prototype.get	= function(){ return this._scene;	}

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

tQuery.World.prototype.render	= function()
{
	// update the cameraControl
	if( this.hasCameraControls() )	this._cameraControls.update();
	// actually render the scene
	this._renderer.render( this._scene, this._camera );
}
//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Handle the rendering loop
 *
 * @class This class handle the rendering loop
 *
 * @param {THREE.World} world the world to display (optional)
*/
tQuery.Loop	= function(world)
{	
	// internally if world present do that
	this._world	= world;
	this._hooks	= [];
	this._lastTime	= null;

	// if world is available, hook it ON_RENDER
	this._world && this.hookOnRender(function(){
		this._world.render();
	}.bind(this));
};

// make it pluginable
tQuery.pluginsInstanceOn(tQuery.Loop);

/**
 * destructor
*/
tQuery.Loop.prototype.destroy	= function()
{
	this.stop();
	if( tQuery.loop === this )	tQuery.loop = null;
}

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * start looping
 * 
 * @returns {tQuery.Loop} chained API
*/
tQuery.Loop.prototype.start	= function()
{
	if( this._timerId )	this.stop();
	this._timerId	= requestAnimationFrame( this._onAnimationFrame.bind(this) );
	// for chained API
	return this;
}

/**
 * stop looping
 * 
 * @returns {tQuery.Loop} chained API
*/
tQuery.Loop.prototype.stop	= function()
{
	cancelAnimationFrame(this._timerId);
	this._timerId	= null;
	// for chained API
	return this;
}

tQuery.Loop.prototype._onAnimationFrame	= function(time)
{
	// loop on request animation loop
	// - it has to be at the begining of the function
	// - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
	this._timerId	= requestAnimationFrame( this._onAnimationFrame.bind(this) );

	// update time values
	var currentTime	= time/1000;
	if( !this._lastTime )	this._lastTime = currentTime - 1/60;
	var deltaTime	= currentTime - this._lastTime;
	this._lastTime	= currentTime;

	// run all the hooks - from lower priority to higher - in order of registration
	for(var priority = 0; priority <= this._hooks.length; priority++){
		if( this._hooks[priority] === undefined )	continue;
		var callbacks	= this._hooks[priority].slice(0)
		for(var i = 0; i < callbacks.length; i++){
			// TODO ? change that to {delta, current} ?
			// thus function(time){ time.current }
			callbacks[i](deltaTime, currentTime);
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////
//		Handle the hooks						//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Loop.prototype.PRE_RENDER		= 20;
tQuery.Loop.prototype.ON_RENDER		= 50;
tQuery.Loop.prototype.POST_RENDER	= 80;

/**
 * hook a callback at a given priority
 *
 * @param {Number} priority for this callback
 * @param {Function} callback the function which will be called function(time){}
 * @returns {tQuery.Loop} chained API
*/
tQuery.Loop.prototype.hook	= function(priority, callback)
{
	// handle parameters
	if( typeof priority === 'function' ){
		callback	= priority;
		priority	= this.PRE_RENDER;
	}

	this._hooks[priority]	= this._hooks[priority] || [];
	console.assert(this._hooks[priority].indexOf(callback) === -1)
	this._hooks[priority].push(callback);
	// for chained API
	return this;
}

/**
 * unhook a callback at a given priority
 *
 * @param {Number} priority for this callback
 * @param {Function} callback the function which will be called function(time){}
 * @returns {tQuery.Loop} chained API
*/
tQuery.Loop.prototype.unhook	= function(priority, callback)
{
	// handle parameters
	if( typeof priority === 'function' ){
		callback	= priority;
		priority	= this.PRE_RENDER;
	}

	var index	= this._hooks[priority].indexOf(callback);
	console.assert(index !== -1);
	this._hooks[priority].splice(index, 1);
	this._hooks[priority].length === 0 && delete this._hooks[priority]
	// for chained API
	return this;
}


// bunch of shortcut
// - TODO should it be in a plugin ?

tQuery.Loop.prototype.hookPreRender	= function(callback){ return this.hook(this.PRE_RENDER, callback);	};
tQuery.Loop.prototype.hookOnRender	= function(callback){ return this.hook(this.ON_RENDER, callback);	};
tQuery.Loop.prototype.hookPostRender	= function(callback){ return this.hook(this.POST_RENDER, callback);	};
tQuery.Loop.prototype.unhookPreRender	= function(callback){ return this.unhook(this.PRE_RENDER, callback);	};
tQuery.Loop.prototype.unhookOnRender	= function(callback){ return this.unhook(this.ON_RENDER, callback);	};
tQuery.Loop.prototype.unhookPostRender	= function(callback){ return this.unhook(this.POST_RENDER, callback);	};
/**
 * @fileOverview plugins for tQuery.core to help creation of object
*/


//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * Create tQuery.World
*/
tQuery.register('createWorld', function(){
	return new tQuery.World();
});

/**
 * Create tQuery.loop
 * 
 * @param {tQuery.World} world the world to display (optional)
 * @function
*/
tQuery.register('createLoop', function(world){
	return new tQuery.Loop(world);
});


tQuery.register('createDirectionalLight', function(){
	var tLight	= new THREE.DirectionalLight(0xFFFFFF * Math.random());
	tLight.position.set(Math.random()-0.5, Math.random()-0.5, Math.random()-0.5).normalize();
	return tQuery(tLight);
});

tQuery.register('createAmbientLight', function(){
	var tLight	= new THREE.AmbientLight(0xFFFFFF);
	return tQuery(tLight);
});


//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

/**
 * contains the default material to use when create tQuery.Object3D
 * 
 * @fieldOf tQuery
 * @name defaultObject3DMaterial
*/
tQuery.register('defaultObject3DMaterial', new THREE.MeshNormalMaterial());

tQuery.Geometry.prototype.toMesh	= function(material){
	var meshes	= [];
	this.each(function(tGeometry){
		// handle paramters
		material	= material || tQuery.defaultObject3DMaterial;
		// create the THREE.Mesh
		var mesh	= new THREE.Mesh(tGeometry, material)
		// return it
		meshes.push(mesh);
	});
	return new tQuery.Mesh(meshes);
};


/**
 * Create a cube
 * 
 * @returns {tQuery.Object3D} a tQuery.Object3D containing it
*/
tQuery.register('createCube', function(){
	var ctor	= THREE.CubeGeometry;
	var dflGeometry	= [1, 1, 1];
	return this._createMesh(ctor, dflGeometry, arguments)
});

tQuery.register('createTorus', function(){
	var ctor	= THREE.TorusGeometry;
	var dflGeometry	= [0.5-0.15, 0.15];
	return this._createMesh(ctor, dflGeometry, arguments)
});

tQuery.register('createSphere', function(){
	var ctor	= THREE.SphereGeometry;
	var dflGeometry	= [0.5, 32, 16];
	return this._createMesh(ctor, dflGeometry, arguments)
});

tQuery.register('createPlane', function(){
	var ctor	= THREE.PlaneGeometry;
	var dflGeometry	= [1, 1, 16, 16];
	return this._createMesh(ctor, dflGeometry, arguments)
});

tQuery.register('createCylinder', function(){
	var ctor	= THREE.CylinderGeometry;
	var dflGeometry	= [0.5, 0.5, 1, 16, 4];
	return this._createMesh(ctor, dflGeometry, arguments)
});

tQuery.register('_createMesh', function(ctor, dflGeometry, args)
{
	// convert args to array if it is instanceof Arguments
	// FIXME if( args instanceof Arguments )
	args	= Array.prototype.slice.call( args );
	
	// init the material
	var material	= tQuery.defaultObject3DMaterial;
	// if the last arguments is a material, use it
	if( args.length && args[args.length-1] instanceof THREE.Material ){
		material	= args.pop();
	}
	
	// ugly trick to get .apply() to work 
	var createFn	= function(ctor, a0, a1, a2, a3, a4, a5, a6, a7){
		console.assert(arguments.length <= 9);
		//console.log("createFn", arguments)
		return new ctor(a0,a1,a2,a3,a4,a5,a6,a7);
	}
	if( args.length === 0 )	args	= dflGeometry.slice();
	args.unshift(ctor);
	var geometry	= createFn.apply(this, args);

	// set the geometry.dynamic by default
	geometry.dynamic= true;
	// create the THREE.Mesh
	var mesh	= new THREE.Mesh(geometry, material)
	// return it
	return tQuery(mesh);
});

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

tQuery.register('createAxis', function(){
	var axis	= new THREE.AxisHelper();
	axis.scale.multiplyScalar(1/40);
	return tQuery(axis);
});
/**
 * Handle ambient light
 *
 * @class include THREE.AmbientLight. It inherit from {@link tQuery.Light}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.AmbientLight} element an instance or array of instance
*/
tQuery.AmbientLight	= function(elements)
{
	// call parent ctor
	tQuery.AmbientLight.parent.constructor.call(this, elements)

	// sanity check - all items MUST be THREE.Light
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.AmbientLight); });
};

/**
 * inherit from tQuery.Node
*/
tQuery.inherit(tQuery.AmbientLight, tQuery.Light);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.AmbientLight);
/**
 * Handle directional light
 *
 * @class include THREE.DirectionalLight. It inherit from {@link tQuery.Light}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.DirectionalLight} element an instance or array of instance
*/
tQuery.DirectionalLight	= function(elements)
{
	// call parent ctor
	tQuery.DirectionalLight.parent.constructor.call(this, elements)

	// sanity check - all items MUST be THREE.Light
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.DirectionalLight); });
};

/**
 * inherit from tQuery.Light
*/
tQuery.inherit(tQuery.DirectionalLight, tQuery.Light);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.DirectionalLight);

/**
 * define all acceptable attributes for this class
*/
tQuery.mixinAttributes(tQuery.DirectionalLight, {
	intensity	: tQuery.convert.toNumber,
	distance	: tQuery.convert.toNumber
});


/**
 * Handle directional light
 *
 * @class include THREE.PointLight. It inherit from {@link tQuery.Light}
 * 
 * @borrows tQuery.Node#get as this.get
 * @borrows tQuery.Node#each as this.each
 * @borrows tQuery.Node#back as this.back
 *
 * @param {THREE.PointLight} element an instance or array of instance
*/
tQuery.PointLight	= function(elements)
{
	// call parent ctor
	tQuery.PointLight.parent.constructor.call(this, elements)

	// sanity check - all items MUST be THREE.Light
	this._lists.forEach(function(item){ console.assert(item instanceof THREE.PointLight); });
};

/**
 * inherit from tQuery.Light
*/
tQuery.inherit(tQuery.PointLight, tQuery.Light);

/**
 * Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.PointLight);

/**
 * define all acceptable attributes for this class
*/
tQuery.mixinAttributes(tQuery.PointLight, {
	intensity	: tQuery.convert.toNumber,
	distance	: tQuery.convert.toNumber
});


/**
 * @fileOverview Plugins for tQuery.Geometry: tool box to play with geometry
*/

(function(){	// TODO why is there a closure here ?

//////////////////////////////////////////////////////////////////////////////////
//		Size functions							//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Geometry.register('computeAll', function(){
	this.each(function(tGeometry){
		tGeometry.computeBoundingBox();
		tGeometry.computeCentroids();
		tGeometry.computeFaceNormals();
		tGeometry.computeVertexNormals();
		//tGeometry.computeTangents();
	});

	// return this, to get chained API	
	return this;
});

/**
 * zoom a geometry
 *
 * @name zoom
 * @methodOf tQuery.Geometry
*/
tQuery.Geometry.register('scaleBy', function(vector3){
	// handle parameters
	if( typeof vector3 === "number" && arguments.length === 1 ){
		vector3	= new THREE.Vector3(vector3, vector3, vector3);
	}else if( typeof vector3 === "number" && arguments.length === 3 ){
		vector3	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(vector3 instanceof THREE.Vector3, "Geometry.vector3 parameter error");

	// change all geometry.vertices
	this.each(function(geometry){
		for(var i = 0; i < geometry.vertices.length; i++) {
			var vertex	= geometry.vertices[i];
			vertex.position.multiplySelf(vector3); 
		}
		// mark the vertices as dirty
		geometry.__dirtyVertices = true;
		geometry.computeBoundingBox();
	})

	// return this, to get chained API	
	return this;
});

tQuery.Geometry.register('size', function(){
	// only on zero-or-one element
	console.assert(this.length <= 1)
	// if no element, return undefined
	if( this.length === 0 )	return undefined

	// else measure the size of the element
	var geometry	= this.get(0);
	// compute middle
	var size= new THREE.Vector3()
	size.x	= geometry.boundingBox.max.x - geometry.boundingBox.min.x;
	size.y	= geometry.boundingBox.max.y - geometry.boundingBox.min.y;
	size.z	= geometry.boundingBox.max.z - geometry.boundingBox.min.z;

	// return the just computed middle
	return size;	
});

/**
*/
tQuery.Geometry.register('normalize', function(){
	// change all geometry.vertices
	this.each(function(geometry){
		var node	= tQuery(geometry);
		var size	= node.size();
		if( size.x >= size.y && size.x >= size.z ){
			node.zoom(1/size.x);
		}else if( size.y >= size.x && size.y >= size.z ){
			node.zoom(1/size.y);
		}else{
			node.zoom(1/size.z);
		}
	});
	// return this, to get chained API	
	return this;
});


//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////


tQuery.Geometry.register('middlePoint', function(){
	// only on zero-or-one element
	console.assert(this.length <= 1)
	// if no element, return undegined
	if( this.length === 0 )	return undefined
	// else measure the size of the element
	var geometry	= this.get(0);
	// compute middle
	var middle	= new THREE.Vector3()
	middle.x	= ( geometry.boundingBox.max.x + geometry.boundingBox.min.x ) / 2;
	middle.y	= ( geometry.boundingBox.max.y + geometry.boundingBox.min.y ) / 2;
	middle.z	= ( geometry.boundingBox.max.z + geometry.boundingBox.min.z ) / 2;

	// return the just computed middle
	return middle;
});

//////////////////////////////////////////////////////////////////////////////////
//		move functions							//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Geometry.register('translate', function(delta){
	// handle parameters
	if( typeof delta === "number" && arguments.length === 3 ){
		delta	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(delta instanceof THREE.Vector3, "Geometry.translate parameter error");

	// change all geometry.vertices
	this.each(function(geometry){
		// change all geometry.vertices
		for(var i = 0; i < geometry.vertices.length; i++) {
			var vertex	= geometry.vertices[i];
			vertex.position.addSelf(delta); 
		}
		// mark the vertices as dirty
		geometry.__dirtyVertices = true;
		geometry.computeBoundingBox();
	})

	// return this, to get chained API	
	return this;
});

tQuery.Geometry.register('rotate', function(angles, order){
	// handle parameters
	if( typeof angles === "number" && arguments.length === 3 ){
		angles	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(angles instanceof THREE.Vector3, "Geometry.rotate parameter error");

	// set default rotation order if needed
	order	= order	|| 'XYZ';
	// compute transformation matrix
	var matrix	= new THREE.Matrix4();
	matrix.setRotationFromEuler(angles, order);

	// change all geometry.vertices
	this.each(function(geometry){
		// apply the matrix
		geometry.applyMatrix( matrix );
	
		// mark the vertices as dirty
		geometry.__dirtyVertices = true;
		geometry.computeBoundingBox();
	});

	// return this, to get chained API	
	return this;
});

/**
*/
tQuery.Geometry.register('center', function(noX, noY, noZ){
	// change all geometry.vertices
	this.each(function(tGeometry){
		var geometry	= tQuery(tGeometry);
		// compute delta
		var delta 	= geometry.middlePoint().negate();
		if( noX )	delta.x	= 0;
		if( noY )	delta.y	= 0;
		if( noZ )	delta.z	= 0;

		return geometry.translate(delta)
	});
	// return this, to get chained API	
	return this;
});

// some shortcuts
tQuery.Geometry.register('translateX'	, function(delta){ return this.translate(delta, 0, 0);	});
tQuery.Geometry.register('translateY'	, function(delta){ return this.translate(0, delta, 0);	});
tQuery.Geometry.register('translateZ'	, function(delta){ return this.translate(0, 0, delta);	});
tQuery.Geometry.register('rotateX'	, function(angle){ return this.rotate(angle, 0, 0);	});
tQuery.Geometry.register('rotateY'	, function(angle){ return this.rotate(0, angle, 0);	});
tQuery.Geometry.register('rotateZ'	, function(angle){ return this.rotate(0, 0, angle);	});
tQuery.Geometry.register('scaleXBy'	, function(ratio){ return this.scaleBy(ratio, 1, 1);	});
tQuery.Geometry.register('scaleYBy'	, function(ratio){ return this.scaleBy(1, ratio, 1);	});
tQuery.Geometry.register('scaleZBy'	, function(ratio){ return this.scaleBy(1, 1, ratio);	});

// backward compatibility
tQuery.Geometry.register('zoom'		, function(value){return this.scaleBy(value);		});
tQuery.Geometry.register('zoomX'	, function(ratio){ return this.zoom(ratio, 1, 1);	});
tQuery.Geometry.register('zoomY'	, function(ratio){ return this.zoom(1, ratio, 1);	});
tQuery.Geometry.register('zoomZ'	, function(ratio){ return this.zoom(1, 1, ratio);	});


})();	// closure function end
/**
 * @fileOverview Plugins for tQuery.Object3D to play with .position/.rotation/.scale
*/

(function(){	// TODO why is there a closure here ?

//////////////////////////////////////////////////////////////////////////////////
//		set function							//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Object3D.register('scale', function(scale){
	// handle parameters
	if( typeof scale === "number" && arguments.length === 1 ){
		scale	= new THREE.Vector3(scale, scale, scale);
	}else if( typeof scale === "number" && arguments.length === 3 ){
		scale	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(scale instanceof THREE.Vector3, "Geometry.scale parameter error");

	// do the operation on each node
	this.each(function(object3d){
		object3d.scale.copy(scale);
	});

	// return this, to get chained API	
	return this;
});

tQuery.Object3D.register('position', function(vector3){
	// handle parameters
	if( typeof vector3 === "number" && arguments.length === 3 ){
		vector3	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(vector3 instanceof THREE.Vector3, "Object3D.position parameter error");

	// do the operation on each node
	this.each(function(object3d){
		object3d.position.copy(vector3);
	})

	// return this, to get chained API	
	return this;
});

tQuery.Object3D.register('rotation', function(vector3){
	// handle parameters
	if( typeof vector3 === "number" && arguments.length === 3 ){
		vector3	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(vector3 instanceof THREE.Vector3, "Object3D.rotation parameter error");

	// do the operation on each node
	this.each(function(object3d){
		object3d.rotation.copy(vector3);
	})

	// return this, to get chained API	
	return this;
});

//////////////////////////////////////////////////////////////////////////////////
//		add function							//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Object3D.register('translate', function(delta){
	// handle parameters
	if( typeof delta === "number" && arguments.length === 3 ){
		delta	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(delta instanceof THREE.Vector3, "Object3D.translate parameter error");

	// do the operation on each node
	this.each(function(object3d){
		object3d.position.addSelf(delta);
	})

	// return this, to get chained API	
	return this;
});


tQuery.Object3D.register('rotate', function(angles){
	// handle parameters
	if( typeof angles === "number" && arguments.length === 3 ){
		angles	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(angles instanceof THREE.Vector3, "Object3D.rotate parameter error");

	// do the operation on each node
	this.each(function(object3d){
		object3d.rotation.addSelf(angles);
	})

	// return this, to get chained API	
	return this;
});

tQuery.Object3D.register('scaleBy', function(ratio){
	// handle parameters
	if( typeof ratio === "number" && arguments.length === 1 ){
		ratio	= new THREE.Vector3(ratio, ratio, ratio);
	}else if( typeof ratio === "number" && arguments.length === 3 ){
		ratio	= new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
	}
	console.assert(ratio instanceof THREE.Vector3, "Object3D.rotate parameter error");

	// do the operation on each node
	this.each(function(object3d){
		object3d.scale.multiplySelf(ratio);
	})

	// return this, to get chained API	
	return this;
});


// some shortcuts
tQuery.Object3D.register('translateX'	, function(delta){ return this.translate(delta, 0, 0);	});
tQuery.Object3D.register('translateY'	, function(delta){ return this.translate(0, delta, 0);	});
tQuery.Object3D.register('translateZ'	, function(delta){ return this.translate(0, 0, delta);	});
tQuery.Object3D.register('rotateX'	, function(angle){ return this.rotate(angle, 0, 0);	});
tQuery.Object3D.register('rotateY'	, function(angle){ return this.rotate(0, angle, 0);	});
tQuery.Object3D.register('rotateZ'	, function(angle){ return this.rotate(0, 0, angle);	});
tQuery.Object3D.register('scaleXBy'	, function(ratio){ return this.scaleBy(ratio, 1, 1);	});
tQuery.Object3D.register('scaleYBy'	, function(ratio){ return this.scaleBy(1, ratio, 1);	});
tQuery.Object3D.register('scaleZBy'	, function(ratio){ return this.scaleBy(1, 1, ratio);	});

// backward compatibility
tQuery.Object3D.register('zoom'		, function(value){ return this.scaleBy(value);		});
tQuery.Object3D.register('zoomX'	, function(ratio){ return this.zoom(ratio, 1, 1);	});
tQuery.Object3D.register('zoomY'	, function(ratio){ return this.zoom(1, ratio, 1);	});
tQuery.Object3D.register('zoomZ'	, function(ratio){ return this.zoom(1, 1, ratio);	});

})();	// closure function end
// backward compatibility only
tQuery.World.register('fullpage', function(){
	console.log("world.fullpage() is obsolete. use world.boilerplate() instead.");
	return this.boilerplate();
});

tQuery.World.register('boilerplate', function(opts){
	// put renderer fullpage
	var domElement	= document.body;
	domElement.style.margin		= "0";
	domElement.style.padding	= "0";
	domElement.style.overflow	= 'hidden';
	this.appendTo(domElement);

	// add the boilerplate
	this.addBoilerplate(opts);
	
	// for chained API
	return this;
});

tQuery.World.register('addBoilerplate', function(opts){
	var _this	= this;
	// sanity check - no boilerplate is already installed
	console.assert( this.hasBoilerplate() !== true );
	// handle parameters	
	opts	= tQuery.extend(opts, {
		stats		: true,
		cameraControls	: true,
		windowResize	: true,
		screenshot	: true,
		fullscreen	: true
	});
	// get the context
	var ctx	= {};

	// create the context
	tQuery.data(this, '_boilerplateCtx', ctx);

	// add Stats.js - https://github.com/mrdoob/stats.js
	if( opts.stats ){
		ctx.stats	= new Stats();
		ctx.stats.domElement.style.position	= 'absolute';
		ctx.stats.domElement.style.bottom	= '0px';
		document.body.appendChild( ctx.stats.domElement );
		ctx.loopStats	= function(){
			ctx.stats.update();
		};
		this.loop().hook(ctx.loopStats);		
	}

	// get some variables
	var camera	= this.camera();
	var renderer	= this.renderer();

	// create a camera contol
	if( opts.cameraControls ){
		ctx.cameraControls	= new THREEx.DragPanControls(camera);
		this.setCameraControls(ctx.cameraControls);		
	}

	// transparently support window resize
	if( opts.windowResize ){
		ctx.windowResize	= THREEx.WindowResize.bind(renderer, camera);		
	}
	// allow 'p' to make screenshot
	if( opts.screenshot ){		
		ctx.screenshot		= THREEx.Screenshot.bindKey(renderer);
	}
	// allow 'f' to go fullscreen where this feature is supported
	if( opts.fullscreen && THREEx.FullScreen.available() ){
		ctx.fullscreen	= THREEx.FullScreen.bindKey();		
	}

	// bind 'destroy' event on tQuery.world
	ctx._$onDestroy	= this.bind('destroy', function(){
		if( this.hasBoilerplate() === false )	return;
		this.removeBoilerplate();	
	});
	
	// for chained API
	return this;
});

tQuery.World.register('hasBoilerplate', function(){
	// get the context
	var ctx	= tQuery.data(this, "_boilerplateCtx")
	// return true if ctx if defined, false otherwise
	return ctx === undefined ? false : true;
});

tQuery.World.register('removeBoilerplate', function(){
	// get context
	var ctx	= tQuery.data(this, '_boilerplateCtx');
	// if not present, return now
	if( ctx === undefined )	return	this;
	// remove the context from this
	tQuery.removeData(this, '_boilerplateCtx');

	// unbind 'destroy' for tQuery.World
	this.unbind('destroy', this._$onDestroy);

	// remove stats.js
	ctx.stats		&& document.body.removeChild(ctx.stats.domElement );
	ctx.stats		&& this.loop().unhook(ctx.loopStats);
	// remove camera
	ctx.cameraControls	&& this.removeCameraControls()
	// stop windowResize
	ctx.windowResize	&& ctx.windowResize.stop();
	// unbind screenshot
	ctx.screenshot		&& ctx.screenshot.unbind();
	// unbind fullscreen
	ctx.fullscreen		&& ctx.fullscreen.unbind();
});
// tween.js r5 - http://github.com/sole/tween.js
var TWEEN = TWEEN || function () {
    var a, e, c = 60, b = false, h = [], i; return { setFPS: function (f) { c = f || 60 }, start: function (f) { arguments.length != 0 && this.setFPS(f); e = setInterval(this.update, 1E3 / c) }, stop: function () { clearInterval(e) }, setAutostart: function (f) { (b = f) && !e && this.start() }, add: function (f) { h.push(f); b && !e && this.start() }, getAll: function () { return h }, removeAll: function () { h = [] }, remove: function (f) { a = h.indexOf(f); a !== -1 && h.splice(a, 1) }, update: function (f) {
        a = 0; i = h.length; for (f = f || Date.now(); a < i; ) if (h[a].update(f)) a++;
        else { h.splice(a, 1); i-- } i == 0 && b == true && this.stop()
    }
    }
} ();
TWEEN.Tween = function (a) {
    var e = {}, c = {}, b = {}, h = 1E3, i = 0, f = null, n = TWEEN.Easing.Linear.EaseNone, k = null, l = null, m = null; this.to = function (d, g) { if (g !== null) h = g; for (var j in d) if (a[j] !== null) b[j] = d[j]; return this }; this.start = function (d) { TWEEN.add(this); f = d ? d + i : Date.now() + i; for (var g in b) if (a[g] !== null) { e[g] = a[g]; c[g] = b[g] - a[g] } return this }; this.stop = function () { TWEEN.remove(this); return this }; this.delay = function (d) { i = d; return this }; this.easing = function (d) { n = d; return this }; this.chain = function (d) { k = d }; this.onUpdate =
function (d) { l = d; return this }; this.onComplete = function (d) { m = d; return this }; this.update = function (d) { var g, j; if (d < f) return true; d = (d - f) / h; d = d > 1 ? 1 : d; j = n(d); for (g in c) a[g] = e[g] + c[g] * j; l !== null && l.call(a, j); if (d == 1) { m !== null && m.call(a); k !== null && k.start(); return false } return true }
}; TWEEN.Easing = { Linear: {}, Quadratic: {}, Cubic: {}, Quartic: {}, Quintic: {}, Sinusoidal: {}, Exponential: {}, Circular: {}, Elastic: {}, Back: {}, Bounce: {} }; TWEEN.Easing.Linear.EaseNone = function (a) { return a };
TWEEN.Easing.Quadratic.EaseIn = function (a) { return a * a }; TWEEN.Easing.Quadratic.EaseOut = function (a) { return -a * (a - 2) }; TWEEN.Easing.Quadratic.EaseInOut = function (a) { if ((a *= 2) < 1) return 0.5 * a * a; return -0.5 * (--a * (a - 2) - 1) }; TWEEN.Easing.Cubic.EaseIn = function (a) { return a * a * a }; TWEEN.Easing.Cubic.EaseOut = function (a) { return --a * a * a + 1 }; TWEEN.Easing.Cubic.EaseInOut = function (a) { if ((a *= 2) < 1) return 0.5 * a * a * a; return 0.5 * ((a -= 2) * a * a + 2) }; TWEEN.Easing.Quartic.EaseIn = function (a) { return a * a * a * a };
TWEEN.Easing.Quartic.EaseOut = function (a) { return -(--a * a * a * a - 1) }; TWEEN.Easing.Quartic.EaseInOut = function (a) { if ((a *= 2) < 1) return 0.5 * a * a * a * a; return -0.5 * ((a -= 2) * a * a * a - 2) }; TWEEN.Easing.Quintic.EaseIn = function (a) { return a * a * a * a * a }; TWEEN.Easing.Quintic.EaseOut = function (a) { return (a -= 1) * a * a * a * a + 1 }; TWEEN.Easing.Quintic.EaseInOut = function (a) { if ((a *= 2) < 1) return 0.5 * a * a * a * a * a; return 0.5 * ((a -= 2) * a * a * a * a + 2) }; TWEEN.Easing.Sinusoidal.EaseIn = function (a) { return -Math.cos(a * Math.PI / 2) + 1 };
TWEEN.Easing.Sinusoidal.EaseOut = function (a) { return Math.sin(a * Math.PI / 2) }; TWEEN.Easing.Sinusoidal.EaseInOut = function (a) { return -0.5 * (Math.cos(Math.PI * a) - 1) }; TWEEN.Easing.Exponential.EaseIn = function (a) { return a == 0 ? 0 : Math.pow(2, 10 * (a - 1)) }; TWEEN.Easing.Exponential.EaseOut = function (a) { return a == 1 ? 1 : -Math.pow(2, -10 * a) + 1 }; TWEEN.Easing.Exponential.EaseInOut = function (a) { if (a == 0) return 0; if (a == 1) return 1; if ((a *= 2) < 1) return 0.5 * Math.pow(2, 10 * (a - 1)); return 0.5 * (-Math.pow(2, -10 * (a - 1)) + 2) };
TWEEN.Easing.Circular.EaseIn = function (a) { return -(Math.sqrt(1 - a * a) - 1) }; TWEEN.Easing.Circular.EaseOut = function (a) { return Math.sqrt(1 - --a * a) }; TWEEN.Easing.Circular.EaseInOut = function (a) { if ((a /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - a * a) - 1); return 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1) }; TWEEN.Easing.Elastic.EaseIn = function (a) { var e, c = 0.1, b = 0.4; if (a == 0) return 0; if (a == 1) return 1; b || (b = 0.3); if (!c || c < 1) { c = 1; e = b / 4 } else e = b / (2 * Math.PI) * Math.asin(1 / c); return -(c * Math.pow(2, 10 * (a -= 1)) * Math.sin((a - e) * 2 * Math.PI / b)) };
TWEEN.Easing.Elastic.EaseOut = function (a) { var e, c = 0.1, b = 0.4; if (a == 0) return 0; if (a == 1) return 1; b || (b = 0.3); if (!c || c < 1) { c = 1; e = b / 4 } else e = b / (2 * Math.PI) * Math.asin(1 / c); return c * Math.pow(2, -10 * a) * Math.sin((a - e) * 2 * Math.PI / b) + 1 };
TWEEN.Easing.Elastic.EaseInOut = function (a) { var e, c = 0.1, b = 0.4; if (a == 0) return 0; if (a == 1) return 1; b || (b = 0.3); if (!c || c < 1) { c = 1; e = b / 4 } else e = b / (2 * Math.PI) * Math.asin(1 / c); if ((a *= 2) < 1) return -0.5 * c * Math.pow(2, 10 * (a -= 1)) * Math.sin((a - e) * 2 * Math.PI / b); return c * Math.pow(2, -10 * (a -= 1)) * Math.sin((a - e) * 2 * Math.PI / b) * 0.5 + 1 }; TWEEN.Easing.Back.EaseIn = function (a) { return a * a * (2.70158 * a - 1.70158) }; TWEEN.Easing.Back.EaseOut = function (a) { return (a -= 1) * a * (2.70158 * a + 1.70158) + 1 };
TWEEN.Easing.Back.EaseInOut = function (a) { if ((a *= 2) < 1) return 0.5 * a * a * (3.5949095 * a - 2.5949095); return 0.5 * ((a -= 2) * a * (3.5949095 * a + 2.5949095) + 2) }; TWEEN.Easing.Bounce.EaseIn = function (a) { return 1 - TWEEN.Easing.Bounce.EaseOut(1 - a) }; TWEEN.Easing.Bounce.EaseOut = function (a) { return (a /= 1) < 1 / 2.75 ? 7.5625 * a * a : a < 2 / 2.75 ? 7.5625 * (a -= 1.5 / 2.75) * a + 0.75 : a < 2.5 / 2.75 ? 7.5625 * (a -= 2.25 / 2.75) * a + 0.9375 : 7.5625 * (a -= 2.625 / 2.75) * a + 0.984375 };
TWEEN.Easing.Bounce.EaseInOut = function (a) { if (a < 0.5) return TWEEN.Easing.Bounce.EaseIn(a * 2) * 0.5; return TWEEN.Easing.Bounce.EaseOut(a * 2 - 1) * 0.5 + 0.5 };

/**
* @Tween object attached to a tQuery world and hooked into its render cycle for updates
*/

(function () {	// closure function

    var tweenUpdate = function(){
        TWEEN.update();
    }

    tQuery.register('hookTweenUpdate', function (loop) {

        this._loop = loop || tQuery.world.loop();

        this._loop.hookPreRender(tweenUpdate);

    });

    tQuery.register('unhookTweenUpdate', function (loop) {

        this._loop = loop || tQuery.world.loop();

        this._loop.hookPreRender(tweenUpdate);

    });

})(); // closure function end




/**
* @Base tquery object for a control
*/

tQuery.Control = function (elements) {
    // call parent ctor
    tQuery.Control.parent.constructor.call(this, elements);
}

/**
* inherit from tQuery.Node
*/
tQuery.inherit(tQuery.Control, tQuery.Node);

/**
* All controls should implement update to be called in the render loop
*/
tQuery.Control.prototype.update = function () {
    this._lists.forEach(function (item) { item.update(); });
}

/**
* All controls needs to be set to a world, at which point the controls internal camera object is set
* and the worlds camera control is also set.
*/
/**
* All controls needs to be set to a world, at which point the controls internal camera object is set
* and the worlds camera control is also set.
*/
tQuery.Control.prototype.setOn = function (world) {

    console.assert(world instanceof tQuery.World, "Control.setOn world parameter error");

    this._lists[0].object = world.camera();

    world.setCameraControls(this);

    //chain
    return this;
}

/**
* Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.Control);
/**
* @fileOverview tQuery.TrackballControl : Wraps THREE.TrackballControls
*/
tQuery.TrackballControl = function (elements) {

    // call parent ctor
    tQuery.TrackballControl.parent.constructor.call(this, elements)

    // sanity check - all items MUST be THREE.TrackballControls
    this._lists.forEach(function (item) { console.assert(item instanceof THREE.TrackballControls); });
}

/**
* inherit from tQuery.Control - implements update
*/
tQuery.inherit(tQuery.TrackballControl, tQuery.Control);

/**
* Make it pluginable
*/
tQuery.pluginsInstanceOn(tQuery.TrackballControl);

/**
* define all acceptable attributes for this class
*/
tQuery.mixinAttributes(tQuery.TrackballControl, {
    
    rotateSpeed             : tQuery.convert.toNumber,
    zoomSpeed               : tQuery.convert.toNumber,
    minDistance             : tQuery.convert.toNumber,
    maxDistance             : tQuery.convert.toNumber,
    noZoom                  : tQuery.convert.toBool,
    noPan                   : tQuery.convert.toBool,
    staticMoving            : tQuery.convert.toBool,
    dynamicDampingFactor    : tQuery.convert.toNumber,
    keys                    : tQuery.convert.identity

});

//Put these here for now as they relate to the above, don't want the functions registered if the above code isn't included in the build.

//Set the target of the trackball control, as its not an property that is written to, but a function call, then can't use mixin attributes (is this correct?)
tQuery.TrackballControl.register('target', function (vector3) {

    // handle get situation
    if (typeof vector3 === "undefined")
        return this._lists[0].target;

    // handle parameters
    if (typeof vector3 === "number" && arguments.length === 3) {
        vector3 = new THREE.Vector3(arguments[0], arguments[1], arguments[2]);
    }
    console.assert(vector3 instanceof THREE.Vector3, "TrackballControl.target parameter error");

    this._lists[0].target.copy(vector3);

    // return this, to get chained API	
    return this;
});

//Animate movement to new position
tQuery.TrackballControl.register('moveCameraTo', function (target, time) {
    // handle parameters
    console.assert(target instanceof THREE.Vector3, "TrackballControl.moveCameraTo target parameter error");
    console.assert((typeof time === "number"), "TrackballControl.moveCameraTo time parameter error");

    var camera = this._lists[0].object;

    var start = { x: camera.position.x, y: camera.position.y, z: camera.position.z };
    var end = { x: target.x, y: target.y, z: target.z };

    var moveTween = new TWEEN.Tween(start).to(end, time).start();
    moveTween.onUpdate(function () {
        camera.position.set(start.x, start.y, start.z);
    });
});

//Animate movement to new target
tQuery.TrackballControl.register('moveCameraTargetTo', function (target, time) {
    // handle parameters
    console.assert(target instanceof THREE.Vector3, "TrackballControl.moveCameraTo target parameter error");
    console.assert((typeof time === "number"), "TrackballControl.moveCameraTo time parameter error");

    var self = this;

    var currentTarget = self.target();

    var start = { x: currentTarget.x, y: currentTarget.y, z: currentTarget.z };
    var end = { x: target.x, y: target.y, z: target.z };

    var moveTween = new TWEEN.Tween(start).to(end, time).start();
    moveTween.onUpdate(function () {
        self.target(start.x, start.y, start.z);
    });
});

//Combine position and target movement to create pan effect
tQuery.TrackballControl.register('panCameraTo', function (target, time) {

    // handle parameters
    console.assert(target instanceof THREE.Vector3, "TrackballControl.moveCameraTo target parameter error");
    console.assert((typeof time === "number"), "TrackballControl.moveCameraTo time parameter error");

    //Calculate camera position
    var currentTarget = tQuery.world.getCameraControls().target();
    var cameraPos = tQuery.world.camera().position;

    var moveTo = new THREE.Vector3();
    moveTo.copy(target);
    moveTo = moveTo.add(moveTo, cameraPos);
    moveTo = moveTo.sub(moveTo, currentTarget);

    //Call movement functions
    this.moveCameraTo(moveTo, time);
    this.moveCameraTargetTo(target, time);
});

//Create a control with a no camera, when this control is set to a world it will wrap that worlds current camera.
tQuery.register('createTrackballControl', function (settings) {
    
    var defaultSettings = { 
        rotateSpeed : 1.0,
        zoomSpeed : 1.2,
        minDistance : 1,
        maxDistance : 1000,
        noZoom : false,
        noPan : false,
        staticMoving : false,
        dynamicDampingFactor : 0.15,
        keys : [65, 83, 68]
    };

    //Apply default settings
    settings = tQuery.extend(settings, defaultSettings);

    //Create new controls, wrapping no camera to start off with
    var controls = new THREE.TrackballControls(null);

    controls.target.set(0, 0, 0)
    controls.rotateSpeed = settings.rotateSpeed;
    controls.zoomSpeed = settings.zoomSpeed;
    controls.minDistance = settings.minDistance;
    controls.maxDistance = settings.maxDistance;
    controls.noZoom = settings.noZoom;
    controls.noPan = settings.noPan;
    controls.staticMoving = settings.staticMoving;
    controls.dynamicDampingFactor = settings.dynamicDampingFactor;
    controls.keys = settings.keys;

    //Return the controls
    return tQuery(controls);
});// This THREEx helper makes it easy to handle window resize.
// It will update renderer and camera when window is resized.
//
// # Usage
//
// **Step 1**: Start updating renderer and camera
//
// ```var windowResize = THREEx.WindowResize(aRenderer, aCamera)```
//    
// **Step 2**: Start updating renderer and camera
//
// ```windowResize.stop()```
// # Code

//

/** @namespace */
var THREEx	= THREEx 		|| {};

/**
 * Update renderer and camera when the window is resized
 * 
 * @param {Object} renderer the renderer to update
 * @param {Object} Camera the camera to update
*/
THREEx.WindowResize	= function(renderer, camera){
	var callback	= function(){
		// notify the renderer of the size change
		renderer.setSize( window.innerWidth, window.innerHeight );
		// update the camera
		camera.aspect	= window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
	}
	// bind the resize event
	window.addEventListener('resize', callback, false);
	// return .stop() the function to stop watching window resize
	return {
		/**
		 * Stop watching window resize
		*/
		stop	: function(){
			window.removeEventListener('resize', callback);
		}
	};
}

THREEx.WindowResize.bind	= function(renderer, camera){
	return THREEx.WindowResize(renderer, camera);
}
/** @namespace */
var THREEx	= THREEx 		|| {};

// TODO http://29a.ch/2011/9/11/uploading-from-html5-canvas-to-imgur-data-uri
// able to upload your screenshot without running servers

// forced closure
(function(){

	/**
	 * Take a screenshot of a renderer
	 * - require WebGLRenderer to have "preserveDrawingBuffer: true" to be set
	 * - TODO is it possible to check if this variable is set ? if so check it
	 *   and make advice in the console.log
	 *   - maybe with direct access to the gl context...
	 * 
	 * @param {Object} renderer to use
	 * @param {String} mimetype of the output image. default to "image/png"
	 * @param {String} dataUrl of the image
	*/
	var toDataURL	= function(renderer, mimetype)
	{
		mimetype	= mimetype	|| "image/png";
		var dataUrl	= renderer.domElement.toDataURL(mimetype);
		return dataUrl;
	}

	/**
	 * resize an image to another resolution while preserving aspect
	 *
	 * @param {String} srcUrl the url of the image to resize
	 * @param {Number} dstWidth the destination width of the image
	 * @param {Number} dstHeight the destination height of the image
	 * @param {Number} callback the callback to notify once completed with callback(newImageUrl)
	*/
	var _aspectResize	= function(srcUrl, dstW, dstH, callback){
		// to compute the width/height while keeping aspect
		var cpuScaleAspect	= function(maxW, maxH, curW, curH){
			var ratio	= curH / curW;
			if( curW >= maxW && ratio <= 1 ){ 
				curW	= maxW;
				curH	= maxW * ratio;
			}else if(curH >= maxH){
				curH	= maxH;
				curW	= maxH / ratio;
			}
			return { width: curW, height: curH };
		}
		// callback once the image is loaded
		var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
		var onLoad	= __bind(function(){
			// init the canvas
			var canvas	= document.createElement('canvas');
			canvas.width	= dstW;	canvas.height	= dstH;
			var ctx		= canvas.getContext('2d');

			// TODO is this needed
			ctx.fillStyle	= "black";
			ctx.fillRect(0, 0, canvas.width, canvas.height);

			// scale the image while preserving the aspect
			var scaled	= cpuScaleAspect(canvas.width, canvas.height, image.width, image.height);

			// actually draw the image on canvas
			var offsetX	= (canvas.width  - scaled.width )/2;
			var offsetY	= (canvas.height - scaled.height)/2;
			ctx.drawImage(image, offsetX, offsetY, scaled.width, scaled.height);

			// dump the canvas to an URL		
			var mimetype	= "image/png";
			var newDataUrl	= canvas.toDataURL(mimetype);
			// notify the url to the caller
			callback && callback(newDataUrl)
		}, this);

		// Create new Image object
		var image 	= new Image();
		image.onload	= onLoad;
		image.src	= srcUrl;
	}
	

	// Super cooked function: THREEx.Screenshot.bindKey(renderer)
	// and you are done to get screenshot on your demo

	/**
	 * Bind a key to renderer screenshot
	*/
	var bindKey	= function(renderer, opts){
		// handle parameters
		opts		= opts		|| {};
		var charCode	= opts.charCode	|| 'p'.charCodeAt(0);
		var width	= opts.width;
		var height	= opts.height;
		var callback	= opts.callback	|| function(url){
			window.open(url, "name-"+Math.random());
		};

		// callback to handle keypress
		var __bind	= function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
		var onKeyPress	= __bind(function(event){
			// return now if the KeyPress isnt for the proper charCode
			if( event.which !== charCode )	return;
			// get the renderer output
			var dataUrl	= this.toDataURL(renderer);

			if( width === undefined && height === undefined ){
				callback( dataUrl )
			}else{
				// resize it and notify the callback
				// * resize == async so if callback is a window open, it triggers the pop blocker
				_aspectResize(dataUrl, width, height, callback);				
			}
		}, this);

		// listen to keypress
		// NOTE: for firefox it seems mandatory to listen to document directly
		document.addEventListener('keypress', onKeyPress, false);

		return {
			unbind	: function(){
				document.removeEventListener('keypress', onKeyPress, false);
			}
		};
	}

	// export it	
	THREEx.Screenshot	= {
		toDataURL	: toDataURL,
		bindKey		: bindKey
	};
})();
// This THREEx helper makes it easy to handle the fullscreen API
// * it hides the prefix for each browser
// * it hides the little discrepencies of the various vendor API
// * at the time of this writing (nov 2011) it is available in 
//   [firefox nightly](http://blog.pearce.org.nz/2011/11/firefoxs-html-full-screen-api-enabled.html),
//   [webkit nightly](http://peter.sh/2011/01/javascript-full-screen-api-navigation-timing-and-repeating-css-gradients/) and
//   [chrome stable](http://updates.html5rocks.com/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API).

// 
// # Code

//

/** @namespace */
var THREEx		= THREEx 		|| {};
THREEx.FullScreen	= THREEx.FullScreen	|| {};

/**
 * test if it is possible to have fullscreen
 * 
 * @returns {Boolean} true if fullscreen API is available, false otherwise
*/
THREEx.FullScreen.available	= function()
{
	return this._hasWebkitFullScreen || this._hasMozFullScreen;
}

/**
 * test if fullscreen is currently activated
 * 
 * @returns {Boolean} true if fullscreen is currently activated, false otherwise
*/
THREEx.FullScreen.activated	= function()
{
	if( this._hasWebkitFullScreen ){
		return document.webkitIsFullScreen;
	}else if( this._hasMozFullScreen ){
		return document.mozFullScreen;
	}else{
		console.assert(false);
	}
}

/**
 * Request fullscreen on a given element
 * @param {DomElement} element to make fullscreen. optional. default to document.body
*/
THREEx.FullScreen.request	= function(element)
{
	element	= element	|| document.body;
	if( this._hasWebkitFullScreen ){
		element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
	}else if( this._hasMozFullScreen ){
		element.mozRequestFullScreen();
	}else{
		console.assert(false);
	}
}

/**
 * Cancel fullscreen
*/
THREEx.FullScreen.cancel	= function()
{
	if( this._hasWebkitFullScreen ){
		document.webkitCancelFullScreen();
	}else if( this._hasMozFullScreen ){
		document.mozCancelFullScreen();
	}else{
		console.assert(false);
	}
}


// internal functions to know which fullscreen API implementation is available
THREEx.FullScreen._hasWebkitFullScreen	= 'webkitCancelFullScreen' in document	? true : false;	
THREEx.FullScreen._hasMozFullScreen	= 'mozCancelFullScreen' in document	? true : false;	

/**
 * Bind a key to renderer screenshot
*/
THREEx.FullScreen.bindKey	= function(opts){
	opts		= opts		|| {};
	var charCode	= opts.charCode	|| 'f'.charCodeAt(0);
	var dblclick	= opts.dblclick !== undefined ? opts.dblclick : false;
	var element	= opts.element

	var toggle	= function(){
		if( THREEx.FullScreen.activated() ){
			THREEx.FullScreen.cancel();
		}else{
			THREEx.FullScreen.request(element);
		}		
	}

	// callback to handle keypress
	var __bind	= function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	var onKeyPress	= __bind(function(event){
		// return now if the KeyPress isnt for the proper charCode
		if( event.which !== charCode )	return;
		// toggle fullscreen
		toggle();
	}, this);

	// listen to keypress
	// NOTE: for firefox it seems mandatory to listen to document directly
	document.addEventListener('keypress', onKeyPress, false);
	// listen to dblclick
	dblclick && document.addEventListener('dblclick', toggle, false);

	return {
		unbind	: function(){
			document.removeEventListener('keypress', onKeyPress, false);
			dblclick && document.removeEventListener('dblclick', toggle, false);
		}
	};
}
/** @namespace */
var THREEx	= THREEx 		|| {};

THREEx.DragPanControls	= function(object, domElement)
{
	this._object	= object;
	this._domElement= domElement || document;

	// parameters that you can change after initialisation
	this.target	= new THREE.Vector3(0, 0, 0);
	this.speedX	= 0.03;
	this.speedY	= 0.03;
	this.rangeX	= -40;
	this.rangeY	= +40;

	// private variables
	this._mouseX	= 0;
	this._mouseY	= 0;

	var _this	= this;
	this._$onMouseMove	= function(){ _this._onMouseMove.apply(_this, arguments); };
	this._$onTouchStart	= function(){ _this._onTouchStart.apply(_this, arguments); };
	this._$onTouchMove	= function(){ _this._onTouchMove.apply(_this, arguments); };

	this._domElement.addEventListener( 'mousemove', this._$onMouseMove, false );
	this._domElement.addEventListener( 'touchstart', this._$onTouchStart,false );
	this._domElement.addEventListener( 'touchmove', this._$onTouchMove, false );
}

THREEx.DragPanControls.prototype.destroy	= function()
{
	this._domElement.removeEventListener( 'mousemove', this._$onMouseMove, false );
	this._domElement.removeEventListener( 'touchstart', this._$onTouchStart,false );
	this._domElement.removeEventListener( 'touchmove', this._$onTouchMove, false );
}

THREEx.DragPanControls.prototype.update	= function(event)
{
	this._object.position.x += ( this._mouseX * this.rangeX - this._object.position.x ) * this.speedX;
	this._object.position.y += ( this._mouseY * this.rangeY - this._object.position.y ) * this.speedY;
	this._object.lookAt( this.target );
}

THREEx.DragPanControls.prototype._onMouseMove	= function(event)
{
	this._mouseX	= ( event.clientX / window.innerWidth ) - 0.5;
	this._mouseY	= ( event.clientY / window.innerHeight) - 0.5;
}

THREEx.DragPanControls.prototype._onTouchStart	= function(event)
{
	if( event.touches.length != 1 )	return;

	// no preventDefault to get click event on ios

	this._mouseX	= ( event.touches[ 0 ].pageX / window.innerWidth ) - 0.5;
	this._mouseY	= ( event.touches[ 0 ].pageY / window.innerHeight) - 0.5;
}

THREEx.DragPanControls.prototype._onTouchMove	= function(event)
{
	if( event.touches.length != 1 )	return;

	event.preventDefault();

	this._mouseX	= ( event.touches[ 0 ].pageX / window.innerWidth ) - 0.5;
	this._mouseY	= ( event.touches[ 0 ].pageY / window.innerHeight) - 0.5;
}

// stats.js r8 - http://github.com/mrdoob/stats.js
var Stats=function(){var h,a,n=0,o=0,i=Date.now(),u=i,p=i,l=0,q=1E3,r=0,e,j,f,b=[[16,16,48],[0,255,255]],m=0,s=1E3,t=0,d,k,g,c=[[16,48,16],[0,255,0]];h=document.createElement("div");h.style.cursor="pointer";h.style.width="80px";h.style.opacity="0.9";h.style.zIndex="10001";h.addEventListener("mousedown",function(a){a.preventDefault();n=(n+1)%2;n==0?(e.style.display="block",d.style.display="none"):(e.style.display="none",d.style.display="block")},!1);e=document.createElement("div");e.style.textAlign=
"left";e.style.lineHeight="1.2em";e.style.backgroundColor="rgb("+Math.floor(b[0][0]/2)+","+Math.floor(b[0][1]/2)+","+Math.floor(b[0][2]/2)+")";e.style.padding="0 0 3px 3px";h.appendChild(e);j=document.createElement("div");j.style.fontFamily="Helvetica, Arial, sans-serif";j.style.fontSize="9px";j.style.color="rgb("+b[1][0]+","+b[1][1]+","+b[1][2]+")";j.style.fontWeight="bold";j.innerHTML="FPS";e.appendChild(j);f=document.createElement("div");f.style.position="relative";f.style.width="74px";f.style.height=
"30px";f.style.backgroundColor="rgb("+b[1][0]+","+b[1][1]+","+b[1][2]+")";for(e.appendChild(f);f.children.length<74;)a=document.createElement("span"),a.style.width="1px",a.style.height="30px",a.style.cssFloat="left",a.style.backgroundColor="rgb("+b[0][0]+","+b[0][1]+","+b[0][2]+")",f.appendChild(a);d=document.createElement("div");d.style.textAlign="left";d.style.lineHeight="1.2em";d.style.backgroundColor="rgb("+Math.floor(c[0][0]/2)+","+Math.floor(c[0][1]/2)+","+Math.floor(c[0][2]/2)+")";d.style.padding=
"0 0 3px 3px";d.style.display="none";h.appendChild(d);k=document.createElement("div");k.style.fontFamily="Helvetica, Arial, sans-serif";k.style.fontSize="9px";k.style.color="rgb("+c[1][0]+","+c[1][1]+","+c[1][2]+")";k.style.fontWeight="bold";k.innerHTML="MS";d.appendChild(k);g=document.createElement("div");g.style.position="relative";g.style.width="74px";g.style.height="30px";g.style.backgroundColor="rgb("+c[1][0]+","+c[1][1]+","+c[1][2]+")";for(d.appendChild(g);g.children.length<74;)a=document.createElement("span"),
a.style.width="1px",a.style.height=Math.random()*30+"px",a.style.cssFloat="left",a.style.backgroundColor="rgb("+c[0][0]+","+c[0][1]+","+c[0][2]+")",g.appendChild(a);return{domElement:h,update:function(){i=Date.now();m=i-u;s=Math.min(s,m);t=Math.max(t,m);k.textContent=m+" MS ("+s+"-"+t+")";var a=Math.min(30,30-m/200*30);g.appendChild(g.firstChild).style.height=a+"px";u=i;o++;if(i>p+1E3)l=Math.round(o*1E3/(i-p)),q=Math.min(q,l),r=Math.max(r,l),j.textContent=l+" FPS ("+q+"-"+r+")",a=Math.min(30,30-l/
100*30),f.appendChild(f.firstChild).style.height=a+"px",p=i,o=0}}};

/**
 * Declare a no-operation define to be able to load modules which use requirejs
 * without requirejs itself. The goal is to be compatible
 * 
 * @param {Array} array of strings containing files url
 * @param {Function} the callback which actually define the module
*/
function define(deps, callback){
	// TODO sanity check on the deps to know if they are loaded
	// - can be done with document.querySelector
	
	// handle arguments
	if( arguments.length === 1 ){
		callback	= arguments[0];
		deps		= [];
	}
	
	// call the callback
	callback();
}// THREEx.KeyboardState.js keep the current state of the keyboard.
// It is possible to query it at any time. No need of an event.
// This is particularly convenient in loop driven case, like in
// 3D demos or games.
//
// # Usage
//
// **Step 1**: Create the object
//
// ```var keyboard	= new THREEx.KeyboardState();```
//
// **Step 2**: Query the keyboard state
//
// This will return true if shift and A are pressed, false otherwise
//
// ```keyboard.pressed("shift+A")```
//
// **Step 3**: Stop listening to the keyboard
//
// ```keyboard.destroy()```
//
// NOTE: this library may be nice as standaline. independant from three.js
// - rename it keyboardForGame
//
// # Code
//

/** @namespace */
var THREEx	= THREEx 		|| {};

/**
 * - NOTE: it would be quite easy to push event-driven too
 *   - microevent.js for events handling
 *   - in this._onkeyChange, generate a string from the DOM event
 *   - use this as event name
*/
THREEx.KeyboardState	= function()
{
	// to store the current state
	this.keyCodes	= {};
	this.modifiers	= {};
	
	// create callback to bind/unbind keyboard events
	var self	= this;
	this._onKeyDown	= function(event){ self._onKeyChange(event, true); };
	this._onKeyUp	= function(event){ self._onKeyChange(event, false);};

	// bind keyEvents
	document.addEventListener("keydown", this._onKeyDown, false);
	document.addEventListener("keyup", this._onKeyUp, false);
}

/**
 * To stop listening of the keyboard events
*/
THREEx.KeyboardState.prototype.destroy	= function()
{
	// unbind keyEvents
	document.removeEventListener("keydown", this._onKeyDown, false);
	document.removeEventListener("keyup", this._onKeyUp, false);
}

THREEx.KeyboardState.MODIFIERS	= ['shift', 'ctrl', 'alt', 'meta'];
THREEx.KeyboardState.ALIAS	= {
	'left'		: 37,
	'up'		: 38,
	'right'		: 39,
	'down'		: 40,
	'space'		: 32,
	'pageup'	: 33,
	'pagedown'	: 34,
	'tab'		: 9
};

/**
 * to process the keyboard dom event
*/
THREEx.KeyboardState.prototype._onKeyChange	= function(event, pressed)
{
	// log to debug
	//console.log("onKeyChange", event, pressed, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)

	// update this.keyCodes
	var keyCode		= event.keyCode;
	this.keyCodes[keyCode]	= pressed;

	// update this.modifiers
	this.modifiers['shift']= event.shiftKey;
	this.modifiers['ctrl']	= event.ctrlKey;
	this.modifiers['alt']	= event.altKey;
	this.modifiers['meta']	= event.metaKey;
}

/**
 * query keyboard state to know if a key is pressed of not
 *
 * @param {String} keyDesc the description of the key. format : modifiers+key e.g shift+A
 * @returns {Boolean} true if the key is pressed, false otherwise
*/
THREEx.KeyboardState.prototype.pressed	= function(keyDesc)
{
	var keys	= keyDesc.split("+");
	for(var i = 0; i < keys.length; i++){
		var key		= keys[i];
		var pressed;
		if( THREEx.KeyboardState.MODIFIERS.indexOf( key ) !== -1 ){
			pressed	= this.modifiers[key];
		}else if( Object.keys(THREEx.KeyboardState.ALIAS).indexOf( key ) != -1 ){
			pressed	= this.keyCodes[ THREEx.KeyboardState.ALIAS[key] ];
		}else {
			pressed	= this.keyCodes[key.toUpperCase().charCodeAt(0)]
		}
		if( !pressed)	return false;
	};
	return true;
}
/**
 * tquery.js plugin to handle keyboard
*/
define(['threex/THREEx.KeyboardState'], function(){
	var instance	= null;
	tQuery.register('keyboard', function(){
		if( !instance )	instance = new THREEx.KeyboardState();
		return instance;
	});		
});
tQuery.register('Shape', function(tShape){
	this._tShape	= tShape	|| new THREE.Shape();
});

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Shape.prototype.extrude	= function(options){
	// handle parameters
	options	= tQuery.extend(options, tQuery.defaultExtrudeSettings);
	// do the extrude
	var tGeometry	= this._tShape.extrude( options );
	// set the geometry.dynamic by default
	tGeometry.dynamic= true;
	// return the tQuery
	return tQuery(tGeometry)
}

//////////////////////////////////////////////////////////////////////////////////
//		forward functions directly to THREE.Shape			//
//////////////////////////////////////////////////////////////////////////////////

tQuery.Shape.forwardFns	= [
	'moveTo',
	'lineTo',
	'bezierCurveTo',
	'quadraticCurveTo'
];

tQuery.Shape.forwardFns.forEach(function(fn){
	tQuery.Shape.prototype[fn]	= function(){
		// actually call the function
		this._tShape[fn].apply(this._tShape, arguments)
		// for chained API
		return this;
	}
})

tQuery.register('defaultExtrudeSettings', {
	amount		: 5,
	bevelEnabled	: true,
	bevelSegments	: 2,
	steps		: 2
});

tQuery.register('createShape', function(tShape){
	return new tQuery.Shape(tShape);
});


//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

tQuery.register('createFish', function(material){
	return tQuery.createFishShape().extrude()
		.computeAll().center()
		.normalize().rotateY(-Math.PI)
		.toMesh(material);	
});

tQuery.register('createHeart', function(material){
	return tQuery.createHeartShape().extrude()
		.computeAll().center()
		.normalize().rotateZ(Math.PI)
		.toMesh(material);	
});

tQuery.register('createSmiley', function(material){
	return tQuery.createSmileyShape().extrude()
		.computeAll().center()
		.normalize().rotateZ(Math.PI)
		.toMesh(material);	
});

//////////////////////////////////////////////////////////////////////////////////
//										//
//////////////////////////////////////////////////////////////////////////////////

tQuery.register('createHeartShape', function(){
	var x	= 0, y	= 0;
	// TODO put it upsidedown and normalize it
	var shape	= tQuery.createShape()
		.moveTo( x + 25, y + 25 )
		.bezierCurveTo( x + 25, y + 25, x + 20, y, x, y )
		.bezierCurveTo( x - 30, y, x - 30, y + 35,x - 30,y + 35 )
		.bezierCurveTo( x - 30, y + 55, x - 10, y + 77, x + 25, y + 95 )
		.bezierCurveTo( x + 60, y + 77, x + 80, y + 55, x + 80, y + 35 )
		.bezierCurveTo( x + 80, y + 35, x + 80, y, x + 50, y )
		.bezierCurveTo( x + 35, y, x + 25, y + 25, x + 25, y + 25 )
	return shape;
});

tQuery.register('createTriangleShape', function(){
	// TODO normalize it
	var shape	= tQuery.createShape()
		.moveTo(  80, 20 )
		.lineTo(  40, 80 )
		.lineTo( 120, 80 )
		.lineTo(  80, 20 );	
	return shape;
});

tQuery.register('createSquareShape', function(width){
	return tQuery.createRectangleShape(width, width);
});

tQuery.register('createRectangleShape', function(width, height){
	var w		= width !== undefined ? width : 80;
	var h		= height!== undefined ? height: 80;
	var shape	= tQuery.createShape()
		.moveTo(  0, 0 )
		.lineTo(  0, h )
		.lineTo(  w, h )
		.lineTo(  w, 0 )	
		.lineTo(  0, 0 );	
	return shape;
});

tQuery.register('createCircleShape', function(radius){
	radius	= radius !== undefined ? radius	: 40;
	// TODO normalize it
	var shape	= tQuery.createShape()
		.moveTo( 0, radius )
		.quadraticCurveTo(  radius,  radius,  radius, 0 )
		.quadraticCurveTo(  radius, -radius, 0, -radius )
		.quadraticCurveTo( -radius, -radius, -radius, 0 )
		.quadraticCurveTo( -radius,  radius, 0,  radius );
	return shape;
});

tQuery.register('createFishShape', function(radius){
	// TODO normalize it
	var x	= 0, y	= 0;
	var shape	= tQuery.createShape()
		.moveTo(x,y)
		.quadraticCurveTo(x + 50, y - 80, x + 90, y - 10)
		.quadraticCurveTo(x + 100, y - 10, x + 115, y - 40)
		.quadraticCurveTo(x + 115, y, x + 115, y + 40)
		.quadraticCurveTo(x + 100, y + 10, x + 90, y + 10)
		.quadraticCurveTo(x + 50, y + 80, x, y);
	return shape;
});

tQuery.register('createWheelShape', function(){
	var arcShape	= new THREE.Shape();
	arcShape.moveTo( 0, 0 );
	arcShape.arc( 10, 10, 30, 0, Math.PI*2, false );
	
	var holePath	= new THREE.Path();
	holePath.moveTo( 0, 0 );
	holePath.arc( 10, 10, 10, 0, Math.PI*2, true );

	arcShape.holes.push( holePath );

	return new tQuery.Shape(arcShape);
});

tQuery.register('createSmileyShape', function(radius){
	var smileyShape	= new THREE.Shape();
	smileyShape.moveTo( 0, 0 );
	smileyShape.arc( 40, 40, 40, 0, Math.PI*2, false );

// TODO should i do a tQuery.Path ?
// - and shape would inherit from it
	var smileyEye1Path = new THREE.Path();
	smileyEye1Path.moveTo( 0, 0 );
	smileyEye1Path.arc( 25, 20, 10, 0, Math.PI*2, true );
	smileyShape.holes.push( smileyEye1Path );

	var smileyEye2Path = new THREE.Path();
	smileyEye2Path.moveTo( 0, 0 );
	smileyEye2Path.arc( 55, 20, 10, 0, Math.PI*2, true );
	smileyShape.holes.push( smileyEye2Path );

	var smileyMouthPath = new THREE.Path();
	// ugly box mouth
	// smileyMouthPath.moveTo( 20, 40 );
	// smileyMouthPath.lineTo( 60, 40 );
	// smileyMouthPath.lineTo( 60, 60 );
	// smileyMouthPath.lineTo( 20, 60 );
	// smileyMouthPath.lineTo( 20, 40 );

	smileyMouthPath.moveTo( 20, 40 );
	smileyMouthPath.quadraticCurveTo( 40, 60, 60, 40 );
	smileyMouthPath.bezierCurveTo( 70, 45, 70, 50, 60, 60 );
	smileyMouthPath.quadraticCurveTo( 40, 80, 20, 60 );
	smileyMouthPath.quadraticCurveTo( 5, 50, 20, 40 );

	smileyShape.holes.push( smileyMouthPath );

	return new tQuery.Shape(smileyShape);
});
/**
 * add a dollar prefix
*/
window.$3d	= tQuery;
/** @namespace */
var THREEx	= THREEx 		|| {};

THREEx.DeviceOrientationState	= function()
{
	// to store the current state
	this._state	= { x: 0, y: 0, z: 0 };

	this._$callback	= function(event){ this._onDeviceOrientation(event); }.bind(this);
	
	// bind events
	// - spec http://dev.w3.org/geo/api/spec-source-orientation.html
	window.addEventListener('deviceorientation', this._$callback);
}

/**
 * To stop listening of the keyboard events
*/
THREEx.DeviceOrientationState.prototype.destroy	= function()
{
	// unbind events
	window.removeEventListener('deviceorientation', this._$callback);
}

/**
 * to process the keyboard dom event
*/
THREEx.DeviceOrientationState.prototype._onDeviceOrientation	= function(event)
{
	this._state.x	= (!event.alpha ? 0 : event.alpha) * Math.PI / 180;
	this._state.y	= (!event.beta  ? 0 : event.beta ) * Math.PI / 180;
	this._state.z	= (!event.gamma ? 0 : event.gamma) * Math.PI / 180;
}


THREEx.DeviceOrientationState.prototype.angleX	= function()
{
	return this._state.x;
}

THREEx.DeviceOrientationState.prototype.angleY	= function()
{
	return this._state.y;
}

THREEx.DeviceOrientationState.prototype.angleZ	= function()
{
	return this._state.z;
}

/**
 * plugin to handle deviceOrientation API
*/
define(['threex/THREEx.DeviceOrientationState'], function(){
	var instance	= null;
	tQuery.register('deviceOrientation', function(){
		if( !instance )	instance = new THREEx.DeviceOrientationState();
		return instance;
	});	
});
var THREEx		= THREEx || {};

THREEx.GeometryWobble	= {};

// Geometry Wobble
// based on paul lewis / areotwist - http://lab.aerotwist.com/webgl/undulating-monkey/


THREEx.GeometryWobble.init	= function(geometry)
{
	for(var i = 0; i < geometry.vertices.length; i++){
		var vertex	= geometry.vertices[i];
		vertex.originalPosition	= vertex.position.clone();
		vertex.dirVector	= vertex.position.clone().normalize();
	}
	geometry.dynamic	= true;
	
	this.cpuAxis(geometry, 'y');
}

THREEx.GeometryWobble.cpuAxis	= function(geometry, type, factor)
{
	if( type === undefined )	type	= 'x';
	if( factor === undefined )	factor	= 0.2;
	
	for(var i = 0; i < geometry.vertices.length; i++) {
		var vertex	= geometry.vertices[i];
// Note: may need more axis ?
		if( type === 'x' )	vertex.axisValue	= vertex.originalPosition.x * factor;
		else if( type === 'y' )	vertex.axisValue	= vertex.originalPosition.y * factor;
		else if( type === 'z' )	vertex.axisValue	= vertex.originalPosition.z * factor;
		else	console.assert(false);
	}
}

THREEx.GeometryWobble.Animate	= function(geometry, phase, magnitude)
{
	if( phase === undefined )	phase		= 0;
	if( magnitude === undefined )	magnitude	= 0.2;
	
	if( typeof magnitude === "number" )	magnitude	= new THREE.Vector3(magnitude, magnitude, magnitude)


	for(var i = 0; i < geometry.vertices.length; i++) {
		var vertex	= geometry.vertices[i];
		var vertexPhase	= Math.cos(phase + vertex.axisValue);
		
		vertex.position.x = vertex.originalPosition.x + vertexPhase * vertex.dirVector.x * magnitude.x;
		vertex.position.y = vertex.originalPosition.y + vertexPhase * vertex.dirVector.y * magnitude.y;
		vertex.position.z = vertex.originalPosition.z + vertexPhase * vertex.dirVector.z * magnitude.z;
	}
	geometry.__dirtyVertices = true;
}
/**
 * tquery.js plugin to handle keyboard
*/
define(['threex/THREEx.GeometryWobble'], function(){	
	tQuery.Geometry.register('wobble', function(){
		this.each(function(geometry){
			THREEx.GeometryWobble.init(geometry);
			THREEx.GeometryWobble.cpuAxis(geometry, 'x', 4);
	
			tQuery.world.loop().hook(function(delta, present){
				var piSecond	= present * Math.PI;
				var phase	= 200 * piSecond / 180;
				var magnitude	= 0.25;
				THREEx.GeometryWobble.Animate(geometry, phase, magnitude);
			});
		});
		// for chained API
		return this;
	});	
});// http://mrl.nyu.edu/~perlin/noise/

var ImprovedNoise = function () {

	var p = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,
		 23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,
		 174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,
		 133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,
		 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,
		 202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,
		 248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,
		 178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,
		 14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,
		 93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];

	for (var i=0; i < 256 ; i++) {

		p[256+i] = p[i];

	}

	function fade(t) {

		return t * t * t * (t * (t * 6 - 15) + 10);

	}

	function lerp(t, a, b) {

		return a + t * (b - a);

	}

	function grad(hash, x, y, z) {

		var h = hash & 15;
		var u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;
		return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);

	}

	return {

		noise: function (x, y, z) {

			var floorX = ~~x, floorY = ~~y, floorZ = ~~z;

			var X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;

			x -= floorX;
			y -= floorY;
			z -= floorZ;

			var xMinus1 = x -1, yMinus1 = y - 1, zMinus1 = z - 1;

			var u = fade(x), v = fade(y), w = fade(z);

			var A = p[X]+Y, AA = p[A]+Z, AB = p[A+1]+Z, B = p[X+1]+Y, BA = p[B]+Z, BB = p[B+1]+Z;

			return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z), 
							grad(p[BA], xMinus1, y, z)),
						lerp(u, grad(p[AB], x, yMinus1, z),
							grad(p[BB], xMinus1, yMinus1, z))),
					lerp(v, lerp(u, grad(p[AA+1], x, y, zMinus1),
							grad(p[BA+1], xMinus1, y, z-1)),
						lerp(u, grad(p[AB+1], x, yMinus1, zMinus1),
							grad(p[BB+1], xMinus1, yMinus1, zMinus1))));

		}
	}
}
;(function(){

/**
 * Generate a light map
 * TODO make it more tunable
 * TODO make that usable standalone
*/
function generateTexture( data, width, height ){

	var sun		= new THREE.Vector3( 1, 0.5, 1 );
	sun.normalize();

	var canvas	= document.createElement( 'canvas' );
	canvas.width	= width;
	canvas.height	= height;

	var context	= canvas.getContext( '2d' );
	context.fillStyle = '#000';
	context.fillRect(0, 0, width, height );

	var image	= context.getImageData( 0, 0, canvas.width, canvas.height );
	var imageData	= image.data;

	var minColor	= new THREE.Color().setRGB(0.375, 0.125, 0);
	var rngColor	= new THREE.Color().setRGB(0.5, 0.375, 0.375);

	var normal	= new THREE.Vector3( 0, 0, 0 );
	for ( var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++ ) {
		// compute the normal
		normal.x	= data[ j - 2 ] - data[ j + 2 ];
		normal.y	= 2;
		normal.z	= data[ j - width * 2 ] - data[ j + width * 2 ];
		normal.normalize();
		// compute the shade
		var shade	= normal.dot( sun );
		// fill the pixel
		// - make color tunable
		var factor		= 256.0 * ( 0.5 + data[ j ] * 0.015 );
		//var factor		= 256.0;
		imageData[i + 0]	= (minColor.r + shade * rngColor.r) * factor;
		imageData[i + 1]	= (minColor.g + shade * rngColor.g) * factor;
		imageData[i + 2]	= (minColor.b + shade * rngColor.b) * factor;
	}
	// draw the image in a canvas
	context.putImageData(image, 0, 0);

return canvas;

	// Scaled 4x
	var canvasScaled	= document.createElement( 'canvas' );
	canvasScaled.width	= width  * 4;
	canvasScaled.height	= height * 4;

	var context	= canvasScaled.getContext( '2d' );
	context.scale(4, 4);
	context.drawImage(canvas, 0, 0);


	var image	= context.getImageData(0, 0, canvasScaled.width, canvasScaled.height);
	var imageData	= image.data;
	for(var i = 0; i < imageData.length; i += 4){
		var v	= Math.floor( Math.random() * 5 );
		imageData[i + 0]	+= v;
		imageData[i + 1]	+= v;
		imageData[i + 2]	+= v;
	}
	context.putImageData(image, 0, 0);

	return canvasScaled;

}

/**
 * Generate a terrain from Perlin
 * TODO make it more tunable
 * TODO make that usable standalone
*/
function generateHeight( width, height )
{
	var size	= width * height;
	var heights	= new Float32Array( size );
	var perlin	= new ImprovedNoise();
	var z		= Math.random() * 100;
	var quality	= 1;

	// zero the heights
	for(var i = 0; i < size; i ++)	heights[i] = 0;

// TODO find out what are all those constant and make them tunable

	for(var j = 0; j < 4; j++ ){
		for(var y = 0, i = 0; y < height; y++ ){
			for(var x = 0; x < width; x++, i++ ){
				var i		= x + y * width;
				var noise	= perlin.noise( x / quality, y / quality, z );
				heights[i]	+= Math.abs( noise * quality * 1.75 *2 );
			}
		}
		quality *= 5;
	}
	// return the generated heights
	return heights;
}


/**
 * terrain generator geometry
 *
 * all hard work in http://mrdoob.github.com/three.js/examples/webgl_geometry_terrain.html
*/
tQuery.register('generateTerrainGeometry', function(opts){
	
	opts	= tQuery.extend(opts, {
		width		: 10,
		height		: 10,
		segmentsW	: 128*2,
		segmentsH	: 128*2
	});

	// build basic geometry
	var tGeometry	= new THREE.PlaneGeometry(opts.width, opts.height, opts.segmentsW-1, opts.segmentsH-1 );
	tGeometry.dynamic= true;

	var heights	= generateHeight( opts.segmentsW, opts.segmentsH );	
	for( var i = 0; i < tGeometry.vertices.length; i ++ ){
// TODO find out what are all those constant and make them tunable
		tGeometry.vertices[i].position.z = heights[i] / 375;
	}
	
	var canvas	= generateTexture( heights, opts.segmentsW, opts.segmentsH );
	var texture	= new THREE.Texture(canvas);
	texture.needsUpdate = true;

	// mark the vertices as dirty
	tGeometry.__dirtyVertices = true;
	tGeometry.computeBoundingBox();
	tGeometry.computeCentroids();	
	tGeometry.computeFaceNormals();
	tGeometry.computeVertexNormals();
	
	return {
		geometry	: tQuery(tGeometry),
		texture		: texture
	};
});	

})();// This THREEx helper makes it easy to handle the mouse events in your 3D scene
//
// * CHANGES NEEDED
//   * handle drag/drop
//   * notify events not object3D - like DOM
//     * so single object with property
//   * DONE bubling implement bubling/capturing
//   * DONE implement event.stopPropagation()
//   * DONE implement event.type = "click" and co
//   * DONE implement event.target
//
// # Lets get started
//
// First you include it in your page
//
// ```<script src='threex.domevent.js'></script>```
//
// # use the object oriented api
//
// You bind an event like this
// 
// ```mesh.on('click', function(object3d){ ... })```
//
// To unbind an event, just do
//
// ```mesh.off('click', function(object3d){ ... })```
//
// As an alternative, there is another naming closer DOM events.
// Pick the one you like, they are doing the same thing
//
// ```mesh.addEventListener('click', function(object3d){ ... })```
// ```mesh.removeEventListener('click', function(object3d){ ... })```
//
// # Supported Events
//
// Always in a effort to stay close to usual pratices, the events name are the same as in DOM.
// The semantic is the same too.
// Currently, the available events are
// [click, dblclick, mouseup, mousedown](http://www.quirksmode.org/dom/events/click.html),
// [mouseover and mouse out](http://www.quirksmode.org/dom/events/mouseover.html).
//
// # use the standalone api
//
// The object-oriented api modifies THREE.Object3D class.
// It is a global class, so it may be legitimatly considered unclean by some people.
// If this bother you, simply do ```THREEx.DomEvent.noConflict()``` and use the
// standalone API. In fact, the object oriented API is just a thin wrapper
// on top of the standalone API.
//
// First, you instanciate the object
//
// ```var domEvent = new THREEx.DomEvent();```
// 
// Then you bind an event like this
//
// ```domEvent.bind(mesh, 'click', function(object3d){ object3d.scale.x *= 2; });```
//
// To unbind an event, just do
//
// ```domEvent.unbind(mesh, 'click', callback);```
//
// 
// # Code

//

/** @namespace */
var THREEx		= THREEx 		|| {};

// # Constructor
THREEx.DomEvent	= function(camera, domElement)
{
	this._camera	= camera || null;
	this._domElement= domElement || document;
	this._projector	= new THREE.Projector();
	this._selected	= null;
	this._boundObjs	= [];
	// Bind dom event for mouse and touch
	var _this	= this;

	this._$onClick		= function(){ _this._onClick.apply(_this, arguments);		};
	this._$onDblClick	= function(){ _this._onDblClick.apply(_this, arguments);	};
	this._$onMouseMove	= function(){ _this._onMouseMove.apply(_this, arguments);	};
	this._$onMouseDown	= function(){ _this._onMouseDown.apply(_this, arguments);	};
	this._$onMouseUp	= function(){ _this._onMouseUp.apply(_this, arguments);		};
	this._$onTouchMove	= function(){ _this._onTouchMove.apply(_this, arguments);	};
	this._$onTouchStart	= function(){ _this._onTouchStart.apply(_this, arguments);	};
	this._$onTouchEnd	= function(){ _this._onTouchEnd.apply(_this, arguments);	};
	this._domElement.addEventListener( 'click'	, this._$onClick	, false );
	this._domElement.addEventListener( 'dblclick'	, this._$onDblClick	, false );
	this._domElement.addEventListener( 'mousemove'	, this._$onMouseMove	, false );
	this._domElement.addEventListener( 'mousedown'	, this._$onMouseDown	, false );
	this._domElement.addEventListener( 'mouseup'	, this._$onMouseUp	, false );
	this._domElement.addEventListener( 'touchmove'	, this._$onTouchMove	, false );
	this._domElement.addEventListener( 'touchstart'	, this._$onTouchStart	, false );
	this._domElement.addEventListener( 'touchend'	, this._$onTouchEnd	, false );
}

// # Destructor
THREEx.DomEvent.prototype.destroy	= function()
{
	// unBind dom event for mouse and touch
	this._domElement.removeEventListener( 'click'		, this._$onClick	, false );
	this._domElement.removeEventListener( 'dblclick'	, this._$onDblClick	, false );
	this._domElement.removeEventListener( 'mousemove'	, this._$onMouseMove	, false );
	this._domElement.removeEventListener( 'mousedown'	, this._$onMouseDown	, false );
	this._domElement.removeEventListener( 'mouseup'		, this._$onMouseUp	, false );
	this._domElement.removeEventListener( 'touchmove'	, this._$onTouchMove	, false );
	this._domElement.removeEventListener( 'touchstart'	, this._$onTouchStart	, false );
	this._domElement.removeEventListener( 'touchend'	, this._$onTouchEnd	, false );
}

THREEx.DomEvent.eventNames	= [
	"click",
	"dblclick",
	"mouseover",
	"mouseout",
	"mousedown",
	"mouseup"
];

/********************************************************************************/
/*		domevent context						*/
/********************************************************************************/

// handle domevent context in object3d instance

THREEx.DomEvent.prototype._objectCtxInit	= function(object3d){
	object3d._3xDomEvent = {};
}
THREEx.DomEvent.prototype._objectCtxDeinit	= function(object3d){
	delete object3d._3xDomEvent;
}
THREEx.DomEvent.prototype._objectCtxIsInit	= function(object3d){
	return object3d._3xDomEvent ? true : false;
}
THREEx.DomEvent.prototype._objectCtxGet	= function(object3d){
	return object3d._3xDomEvent;
}

/********************************************************************************/
/*										*/
/********************************************************************************/

/**
 * Getter/Setter for camera
*/
THREEx.DomEvent.prototype.camera	= function(value)
{
	if( value )	this._camera	= value;
	return this._camera;
}

THREEx.DomEvent.prototype.bind	= function(object3d, eventName, callback, useCapture)
{
	console.assert( THREEx.DomEvent.eventNames.indexOf(eventName) !== -1, "not available events:"+eventName );

	if( !this._objectCtxIsInit(object3d) )	this._objectCtxInit(object3d);
	var objectCtx	= this._objectCtxGet(object3d);	
	if( !objectCtx[eventName+'Handlers'] )	objectCtx[eventName+'Handlers']	= [];

	objectCtx[eventName+'Handlers'].push({
		callback	: callback,
		useCapture	: useCapture
	});
	
	// add this object in this._boundObjs
	this._boundObjs.push(object3d);
}

THREEx.DomEvent.prototype.unbind	= function(object3d, eventName, callback)
{
	console.assert( THREEx.DomEvent.eventNames.indexOf(eventName) !== -1, "not available events:"+eventName );

	if( !this._objectCtxIsInit(object3d) )	this._objectCtxInit(object3d);

	var objectCtx	= this._objectCtxGet(object3d);
	if( !objectCtx[eventName+'Handlers'] )	objectCtx[eventName+'Handlers']	= [];

	var handlers	= objectCtx[eventName+'Handlers'];
	for(var i = 0; i < handlers.length; i++){
		var handler	= handlers[i];
		if( callback != handler.callback )	continue;
		if( useCapture != handler.useCapture )	continue;
		handlers.splice(i, 1)
		break;
	}
	// from this object from this._boundObjs
	var index	= this._boundObjs.indexOf(object3d);
	console.assert( index !== -1 );
	this._boundObjs.splice(index, 1);
}

THREEx.DomEvent.prototype._bound	= function(eventName, object3d)
{
	var objectCtx	= this._objectCtxGet(object3d);
	if( !objectCtx )	return false;
	return objectCtx[eventName+'Handlers'] ? true : false;
}

/********************************************************************************/
/*		onMove								*/
/********************************************************************************/

// # handle mousemove kind of events

THREEx.DomEvent.prototype._onMove	= function(mouseX, mouseY, origDomEvent)
{
	var vector	= new THREE.Vector3( mouseX, mouseY, 1 );
	this._projector.unprojectVector( vector, this._camera );

	var ray		= new THREE.Ray( this._camera.position, vector.subSelf( this._camera.position ).normalize() );
	var intersects = ray.intersectObjects( this._boundObjs );
	
	var oldSelected	= this._selected;

	if( intersects.length > 0 ){
		var intersect	= intersects[ 0 ];
		var newSelected	= intersect.object;
		this._selected	= newSelected;
	
		var notifyOver, notifyOut;
		if( oldSelected != newSelected ){
			// if newSelected bound mouseenter, notify it
			notifyOver	= this._bound('mouseover', newSelected);
			// if there is a oldSelect and oldSelected bound mouseleave, notify it
			notifyOut	= oldSelected && this._bound('mouseout', oldSelected);
		}
	}else{
		// if there is a oldSelect and oldSelected bound mouseleave, notify it
		notifyOut	= oldSelected && this._bound('mouseout', oldSelected);
		this._selected	= null;
	}

	// notify mouseEnter - done at the end with a copy of the list to allow callback to remove handlers
	notifyOver && this._notify('mouseover', newSelected, origDomEvent);
	// notify mouseLeave - done at the end with a copy of the list to allow callback to remove handlers
	notifyOut  && this._notify('mouseout', oldSelected, origDomEvent);
}


/********************************************************************************/
/*		onEvent								*/
/********************************************************************************/

// # handle click kind of events

THREEx.DomEvent.prototype._onEvent	= function(eventName, mouseX, mouseY, origDomEvent)
{
	var vector	= new THREE.Vector3( mouseX, mouseY, 1 );
	this._projector.unprojectVector( vector, this._camera );

	vector.subSelf( this._camera.position ).normalize()
	var ray		= new THREE.Ray( this._camera.position, vector );
	var intersects	= ray.intersectObjects( this._boundObjs );

	// if there are no intersections, return now
	if( intersects.length === 0 )	return;

	// init some vairables
	var intersect	= intersects[0];
	var object3d	= intersect.object;
	var objectCtx	= this._objectCtxGet(object3d);
	if( !objectCtx )	return;

	// notify handlers
	this._notify(eventName, object3d, origDomEvent);
}

THREEx.DomEvent.prototype._notify	= function(eventName, object3d, origDomEvent)
{
	var objectCtx	= this._objectCtxGet(object3d);
	var handlers	= objectCtx ? objectCtx[eventName+'Handlers'] : null;

	// do bubbling
	if( !objectCtx || !handlers || handlers.length === 0 ){
		object3d.parent && this._notify(eventName, object3d.parent);
		return;
	}
	
	// notify all handlers
	var handlers	= objectCtx[eventName+'Handlers'];
	for(var i = 0; i < handlers.length; i++){
		var handler	= handlers[i];
		var toPropagate	= true;
		handler.callback({
			type		: eventName,
			target		: object3d,
			origDomEvent	: origDomEvent,
			stopPropagation	: function(){
				toPropagate	= false;
			}
		});
		if( !toPropagate )	continue;
		// do bubbling
		if( handler.useCapture === false ){
			object3d.parent && this._notify(eventName, object3d.parent);
		}
	}
}

/********************************************************************************/
/*		handle mouse events						*/
/********************************************************************************/
// # handle mouse events

THREEx.DomEvent.prototype._onMouseDown	= function(event){ return this._onMouseEvent('mousedown', event);	}
THREEx.DomEvent.prototype._onMouseUp	= function(event){ return this._onMouseEvent('mouseup'	, event);	}


THREEx.DomEvent.prototype._onMouseEvent	= function(eventName, domEvent)
{
	var mouseX	= +(domEvent.clientX / window.innerWidth ) * 2 - 1;
	var mouseY	= -(domEvent.clientY / window.innerHeight) * 2 + 1;
	return this._onEvent(eventName, mouseX, mouseY, domEvent);
}

THREEx.DomEvent.prototype._onMouseMove	= function(domEvent)
{
	var mouseX	= +(domEvent.clientX / window.innerWidth ) * 2 - 1;
	var mouseY	= -(domEvent.clientY / window.innerHeight) * 2 + 1;
	return this._onMove(mouseX, mouseY, domEvent);
}

THREEx.DomEvent.prototype._onClick		= function(event)
{
	// TODO handle touch ?
	return this._onMouseEvent('click'	, event);
}
THREEx.DomEvent.prototype._onDblClick		= function(event)
{
	// TODO handle touch ?
	return this._onMouseEvent('dblclick'	, event);
}

/********************************************************************************/
/*		handle touch events						*/
/********************************************************************************/
// # handle touch events


THREEx.DomEvent.prototype._onTouchStart	= function(event){ return this._onTouchEvent('mousedown', event);	}
THREEx.DomEvent.prototype._onTouchEnd	= function(event){ return this._onTouchEvent('mouseup'	, event);	}

THREEx.DomEvent.prototype._onTouchMove	= function(domEvent)
{
	if( domEvent.touches.length != 1 )	return undefined;

	domEvent.preventDefault();

	var mouseX	= +(domEvent.touches[ 0 ].pageX / window.innerWidth ) * 2 - 1;
	var mouseY	= -(domEvent.touches[ 0 ].pageY / window.innerHeight) * 2 + 1;
	return this._onMove('mousemove', mouseX, mouseY, domEvent);
}

THREEx.DomEvent.prototype._onTouchEvent	= function(eventName, domEvent)
{
	if( domEvent.touches.length != 1 )	return undefined;

	domEvent.preventDefault();

	var mouseX	= +(domEvent.touches[ 0 ].pageX / window.innerWidth ) * 2 - 1;
	var mouseY	= -(domEvent.touches[ 0 ].pageY / window.innerHeight) * 2 + 1;
	return this._onEvent(eventName, mouseX, mouseY, domEvent);	
}

/**
 * plugin to handle deviceOrientation API
*/
define(['plugins/domevent/threex.domevent'], function(){
	var domEvent;
	var getInstance	= function(){
		if( !domEvent ){
			domEvent	= new THREEx.DomEvent();
			// yuk!!!! workaround a bug
			// ugly kludge to automatically set the camera in threex.domevent
			// - see github issue #11
			// - better version would be to listen so events on tQuery ?
			// - tQuery.on('cameraChange', function(world){
			//   
			//   })
			domEvent.camera(tQuery.world.camera());
		}
		return domEvent
	}
	
	tQuery.Object3D.register('on', function(eventType, callback){
		var domEvent	= getInstance();

		this.each(function(object3d){
			domEvent.bind(object3d, eventType, callback, false);
		});
		return this;	// for chained API
	});
	
	tQuery.Object3D.register('off', function(eventType, callback){
		var domEvent	= getInstance();
		this.each(function(object3d){
			domEvent.unbind(object3d, eventType, callback, false);
		});
		return this;	// for chained API
	});
});


// Constructive Solid Geometry (CSG) is a modeling technique that uses Boolean
// operations like union and intersection to combine 3D solids. This library
// implements CSG operations on meshes elegantly and concisely using BSP trees,
// and is meant to serve as an easily understandable implementation of the
// algorithm. All edge cases involving overlapping coplanar polygons in both
// solids are correctly handled.
// 
// Example usage:
// 
//     var cube = CSG.cube();
//     var sphere = CSG.sphere({ radius: 1.3 });
//     var polygons = cube.subtract(sphere).toPolygons();
// 
// ## Implementation Details
// 
// All CSG operations are implemented in terms of two functions, `clipTo()` and
// `invert()`, which remove parts of a BSP tree inside another BSP tree and swap
// solid and empty space, respectively. To find the union of `a` and `b`, we
// want to remove everything in `a` inside `b` and everything in `b` inside `a`,
// then combine polygons from `a` and `b` into one solid:
// 
//     a.root.clipTo(b.root);
//     b.root.clipTo(a.root);
//     a.root.build(b.root.allPolygons());
// 
// The only tricky part is handling overlapping coplanar polygons in both trees.
// The code above keeps both copies, but we need to keep them in one tree and
// remove them in the other tree. To remove them from `b` we can clip the
// inverse of `b` against `a`. The code for union now looks like this:
// 
//     a.root.clipTo(b.root);
//     b.root.clipTo(a.root);
//     b.root.invert();
//     b.root.clipTo(a.root);
//     b.root.invert();
//     a.root.build(b.root.allPolygons());
// 
// Subtraction and intersection naturally follow from set operations. If
// union is `A | B`, subtraction is `A - B = ~(~A | B)` and intersection is
// `A & B = ~(~A | ~B)` where `~` is the complement operator.
// 
// ## License
// 
// Copyright (c) 2011 Evan Wallace (http://madebyevan.com/), under the MIT license.

// # class CSG

// Holds a binary space partition tree representing a 3D solid. Two solids can
// be combined using the `union()`, `subtract()`, and `intersect()` methods.

var CSG = function() {
  this.root = new CSG.Node();
};

// Construct a CSG solid from a list of `CSG.Polygon` instances.
CSG.fromPolygons = function(polygons) {
  var bsp = new CSG();
  bsp.root.build(polygons);
  return bsp;
};

CSG.prototype = {
  clone: function() {
    var bsp = new CSG();
    bsp.root = this.root.clone();
    return bsp;
  },

  toPolygons: function() {
    return this.root.allPolygons();
  },

  // Return a new CSG solid representing space in either this solid or in the
  // solid `bsp`. Neither this solid nor the solid `bsp` are modified.
  // 
  //     A.union(B)
  // 
  //     +-------+            +-------+
  //     |       |            |       |
  //     |   A   |            |       |
  //     |    +--+----+   =   |       +----+
  //     +----+--+    |       +----+       |
  //          |   B   |            |       |
  //          |       |            |       |
  //          +-------+            +-------+
  // 
  union: function(bsp) {
    var a = this.clone(), b = bsp.clone();
    a.root.clipTo(b.root);
    b.root.clipTo(a.root);
    b.root.invert();
    b.root.clipTo(a.root);
    b.root.invert();
    a.root.build(b.root.allPolygons());
    return a;
  },

  // Return a new CSG solid representing space in this solid but not in the
  // solid `bsp`. Neither this solid nor the solid `bsp` are modified.
  // 
  //     A.subtract(B)
  // 
  //     +-------+            +-------+
  //     |       |            |       |
  //     |   A   |            |       |
  //     |    +--+----+   =   |    +--+
  //     +----+--+    |       +----+
  //          |   B   |
  //          |       |
  //          +-------+
  // 
  subtract: function(bsp) {
    var a = this.clone(), b = bsp.clone();
    a.root.invert();
    a.root.clipTo(b.root);
    b.root.clipTo(a.root);
    b.root.invert();
    b.root.clipTo(a.root);
    b.root.invert();
    a.root.build(b.root.allPolygons());
    a.root.invert();
    return a;
  },

  // Return a new CSG solid representing space both this solid and in the
  // solid `bsp`. Neither this solid nor the solid `bsp` are modified.
  // 
  //     A.intersect(B)
  // 
  //     +-------+
  //     |       |
  //     |   A   |
  //     |    +--+----+   =   +--+
  //     +----+--+    |       +--+
  //          |   B   |
  //          |       |
  //          +-------+
  // 
  intersect: function(bsp) {
    var a = this.clone(), b = bsp.clone();
    a.root.invert();
    b.root.clipTo(a.root);
    b.root.invert();
    a.root.clipTo(b.root);
    b.root.clipTo(a.root);
    a.root.build(b.root.allPolygons());
    a.root.invert();
    return a;
  },

  // Return a new CSG solid with solid and empty space switched. This solid is
  // not modified.
  inverse: function() {
    var bsp = this.clone();
    bsp.root.invert();
    return bsp;
  }
};

// Construct an axis-aligned solid cube. Optional parameters are `center` and
// `radius`, which default to `[0, 0, 0]` and `1`.
// 
// Example code:
// 
//     var cube = CSG.cube({
//       center: [0, 0, 0],
//       radius: 1
//     });
CSG.cube = function(options) {
  options = options || {};
  var c = new CSG.Vector(options.center || [0, 0, 0]);
  var r = options.radius || 1;
  return CSG.fromPolygons([
    [[0, 4, 6, 2], [-1, 0, 0]],
    [[1, 3, 7, 5], [+1, 0, 0]],
    [[0, 1, 5, 4], [0, -1, 0]],
    [[2, 6, 7, 3], [0, +1, 0]],
    [[0, 2, 3, 1], [0, 0, -1]],
    [[4, 5, 7, 6], [0, 0, +1]]
  ].map(function(info) {
    return new CSG.Polygon(info[0].map(function(i) {
      var pos = new CSG.Vector(
        c.x + r * (2 * !!(i & 1) - 1),
        c.y + r * (2 * !!(i & 2) - 1),
        c.z + r * (2 * !!(i & 4) - 1)
      );
      return new CSG.Vertex(pos, new CSG.Vector(info[1]));
    }));
  }));
};

// Construct a solid sphere. Optional parameters are `center`, `radius`,
// `slices`, and `stacks`, which default to `[0, 0, 0]`, `1`, `16`, and `8`.
// The `slices` and `stacks` parameters control the tessellation along the
// longitude and latitude directions.
// 
// Example usage:
// 
//     var sphere = CSG.sphere({
//       center: [0, 0, 0],
//       radius: 1,
//       slices: 16,
//       stacks: 8
//     });
CSG.sphere = function(options) {
  options = options || {};
  var c = new CSG.Vector(options.center || [0, 0, 0]);
  var r = options.radius || 1;
  var slices = options.slices || 16;
  var stacks = options.stacks || 8;
  var polygons = [], vertices;
  function vertex(theta, phi) {
    theta *= Math.PI * 2;
    phi *= Math.PI;
    var dir = new CSG.Vector(
      Math.cos(theta) * Math.sin(phi),
      Math.cos(phi),
      Math.sin(theta) * Math.sin(phi)
    );
    vertices.push(new CSG.Vertex(c.plus(dir.times(r)), dir));
  }
  for (var i = 0; i < slices; i++) {
    for (var j = 0; j < stacks; j++) {
      vertices = [];
      vertex(i / slices, j / stacks);
      if (j > 0) vertex((i + 1) / slices, j / stacks);
      if (j < stacks - 1) vertex((i + 1) / slices, (j + 1) / stacks);
      vertex(i / slices, (j + 1) / stacks);
      polygons.push(new CSG.Polygon(vertices));
    }
  }
  return CSG.fromPolygons(polygons);
};

// Construct a solid cylinder. Optional parameters are `start`, `end`,
// `radius`, and `slices`, which default to `[0, -1, 0]`, `[0, 1, 0]`, `1`, and
// `16`. The `slices` parameter controls the tessellation.
// 
// Example usage:
// 
//     var cylinder = CSG.cylinder({
//       start: [0, -1, 0],
//       end: [0, 1, 0],
//       radius: 1,
//       slices: 16
//     });
CSG.cylinder = function(options) {
  options = options || {};
  var s = new CSG.Vector(options.start || [0, -1, 0]);
  var e = new CSG.Vector(options.end || [0, 1, 0]);
  var ray = e.minus(s);
  var r = options.radius || 1;
  var slices = options.slices || 16;
  var axisZ = ray.unit(), isY = (Math.abs(axisZ.y) > 0.5);
  var axisX = new CSG.Vector(isY, !isY, 0).cross(axisZ).unit();
  var axisY = axisX.cross(axisZ).unit();
  var start = new CSG.Vertex(s, axisZ.negated());
  var end = new CSG.Vertex(e, axisZ.unit());
  var polygons = [];
  function point(stack, slice, normalBlend) {
    var angle = slice * Math.PI * 2;
    var out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)));
    var pos = s.plus(ray.times(stack)).plus(out.times(r));
    var normal = out.times(1 - Math.abs(normalBlend)).plus(axisZ.times(normalBlend));
    return new CSG.Vertex(pos, normal);
  }
  for (var i = 0; i < slices; i++) {
    var t0 = i / slices, t1 = (i + 1) / slices;
    polygons.push(new CSG.Polygon([start, point(0, t0, -1), point(0, t1, -1)]));
    polygons.push(new CSG.Polygon([point(0, t1, 0), point(0, t0, 0), point(1, t0, 0), point(1, t1, 0)]));
    polygons.push(new CSG.Polygon([end, point(1, t1, 1), point(1, t0, 1)]));
  }
  return CSG.fromPolygons(polygons);
};

// # class Vector

// Represents a 3D vector.
// 
// Example usage:
// 
//     new CSG.Vector(1, 2, 3);
//     new CSG.Vector([1, 2, 3]);
//     new CSG.Vector({ x: 1, y: 2, z: 3 });

CSG.Vector = function(x, y, z) {
  if (arguments.length == 3) {
    this.x = x;
    this.y = y;
    this.z = z;
  } else if ('x' in x) {
    this.x = x.x;
    this.y = x.y;
    this.z = x.z;
  } else {
    this.x = x[0];
    this.y = x[1];
    this.z = x[2];
  }
};

CSG.Vector.prototype = {
  clone: function() {
    return new CSG.Vector(this.x, this.y, this.z);
  },

  negated: function() {
    return new CSG.Vector(-this.x, -this.y, -this.z);
  },

  plus: function(a) {
    return new CSG.Vector(this.x + a.x, this.y + a.y, this.z + a.z);
  },

  minus: function(a) {
    return new CSG.Vector(this.x - a.x, this.y - a.y, this.z - a.z);
  },

  times: function(a) {
    return new CSG.Vector(this.x * a, this.y * a, this.z * a);
  },

  dividedBy: function(a) {
    return new CSG.Vector(this.x / a, this.y / a, this.z / a);
  },

  dot: function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z;
  },

  lerp: function(a, t) {
    return this.plus(a.minus(this).times(t));
  },

  length: function() {
    return Math.sqrt(this.dot(this));
  },

  unit: function() {
    return this.dividedBy(this.length());
  },

  cross: function(a) {
    return new CSG.Vector(
      this.y * a.z - this.z * a.y,
      this.z * a.x - this.x * a.z,
      this.x * a.y - this.y * a.x
    );
  }
};

// # class Vertex

// Represents a vertex of a polygon. Use your own vertex class instead of this
// one to provide additional features like texture coordinates and vertex
// colors. Custom vertex classes need to provide a `pos` property and `clone()`,
// `flip()`, and `interpolate()` methods that behave analogous to the ones
// defined by `CSG.Vertex`. This class provides `normal` so convenience
// functions like `CSG.sphere()` can return a smooth vertex normal, but `normal`
// is not used anywhere else.

CSG.Vertex = function(pos, normal) {
  this.pos = new CSG.Vector(pos);
  this.normal = new CSG.Vector(normal);
};

CSG.Vertex.prototype = {
  clone: function() {
    return new CSG.Vertex(this.pos.clone(), this.normal.clone());
  },

  // Invert all orientation-specific data (e.g. vertex normal). Called when the
  // orientation of a polygon is flipped.
  flip: function() {
    this.normal = this.normal.negated();
  },

  // Create a new vertex between this vertex and `other` by linearly
  // interpolating all properties using a parameter of `t`. Subclasses should
  // override this to interpolate additional properties.
  interpolate: function(other, t) {
    return new CSG.Vertex(
      this.pos.lerp(other.pos, t),
      this.normal.lerp(other.normal, t)
    );
  }
};

// # class Plane

// Represents a plane in 3D space.

CSG.Plane = function(normal, w) {
  this.normal = normal;
  this.w = w;
};

// `CSG.Plane.EPSILON` is the tolerance used by `splitPolygon()` to decide if a
// point is on the plane.
CSG.Plane.EPSILON = 1e-5;

CSG.Plane.fromPoints = function(a, b, c) {
  var n = b.minus(a).cross(c.minus(a)).unit();
  return new CSG.Plane(n, n.dot(a));
};

CSG.Plane.prototype = {
  clone: function() {
    return new CSG.Plane(this.normal.clone(), this.w);
  },

  flip: function() {
    this.normal = this.normal.negated();
    this.w = -this.w;
  },

  // Split `polygon` by this plane if needed, then put the polygon or polygon
  // fragments in the appropriate lists. Coplanar polygons go into either
  // `coplanarFront` or `coplanarBack` depending on their orientation with
  // respect to this plane. Polygons in front or in back of this plane go into
  // either `front` or `back`.
  splitPolygon: function(polygon, coplanarFront, coplanarBack, front, back) {
    var COPLANAR = 0;
    var FRONT = 1;
    var BACK = 2;
    var SPANNING = 3;

    // Classify each point as well as the entire polygon into one of the above
    // four classes.
    var polygonType = 0;
    var types = [];
    for (var i = 0; i < polygon.vertices.length; i++) {
      var t = this.normal.dot(polygon.vertices[i].pos) - this.w;
      var type = (t < -CSG.Plane.EPSILON) ? BACK : (t > CSG.Plane.EPSILON) ? FRONT : COPLANAR;
      polygonType |= type;
      types.push(type);
    }

    // Put the polygon in the correct list, splitting it when necessary.
    switch (polygonType) {
      case COPLANAR:
        (this.normal.dot(polygon.plane.normal) > 0 ? coplanarFront : coplanarBack).push(polygon);
        break;
      case FRONT:
        front.push(polygon);
        break;
      case BACK:
        back.push(polygon);
        break;
      case SPANNING:
        var f = [], b = [];
        for (var i = 0; i < polygon.vertices.length; i++) {
          var j = (i + 1) % polygon.vertices.length;
          var ti = types[i], tj = types[j];
          var vi = polygon.vertices[i], vj = polygon.vertices[j];
          if (ti != BACK) f.push(vi);
          if (ti != FRONT) b.push(ti != BACK ? vi.clone() : vi);
          if ((ti | tj) == SPANNING) {
            var t = (this.w - this.normal.dot(vi.pos)) / this.normal.dot(vj.pos.minus(vi.pos));
            var v = vi.interpolate(vj, t);
            f.push(v);
            b.push(v.clone());
          }
        }
        if (f.length >= 3) front.push(new CSG.Polygon(f, polygon.shared));
        if (b.length >= 3) back.push(new CSG.Polygon(b, polygon.shared));
        break;
    }
  }
};

// # class Polygon

// Represents a convex polygon. The vertices used to initialize a polygon must
// be coplanar and form a convex loop. They do not have to be `CSG.Vertex`
// instances but they must behave similarly (duck typing can be used for
// customization).
// 
// Each convex polygon has a `shared` property, which is shared between all
// polygons that are clones of each other or were split from the same polygon.
// This can be used to define per-polygon properties (such as surface color).

CSG.Polygon = function(vertices, shared) {
  this.vertices = vertices;
  this.shared = shared;
  this.plane = CSG.Plane.fromPoints(vertices[0].pos, vertices[1].pos, vertices[2].pos);
};

CSG.Polygon.prototype = {
  clone: function() {
    var vertices = this.vertices.map(function(v) { return v.clone(); });
    return new CSG.Polygon(vertices, this.shared);
  },

  flip: function() {
    this.vertices.reverse().map(function(v) { v.flip(); });
    this.plane.flip();
  }
};

// # class Node

// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons
// by picking a polygon to split along. That polygon (and all other coplanar
// polygons) are added directly to that node and the other polygons are added to
// the front and/or back subtrees. This is not a leafy BSP tree since there is
// no distinction between internal and leaf nodes.

CSG.Node = function() {
  this.plane = null;
  this.front = null;
  this.back = null;
  this.polygons = [];
};

CSG.Node.prototype = {
  clone: function() {
    var node = new CSG.Node();
    node.plane = this.plane && this.plane.clone();
    node.front = this.front && this.front.clone();
    node.back = this.back && this.back.clone();
    node.polygons = this.polygons.map(function(p) { return p.clone(); });
    return node;
  },

  // Convert solid space to empty space and empty space to solid space.
  invert: function() {
    for (var i = 0; i < this.polygons.length; i++) {
      this.polygons[i].flip();
    }
    this.plane.flip();
    if (this.front) this.front.invert();
    if (this.back) this.back.invert();
    var temp = this.front;
    this.front = this.back;
    this.back = temp;
  },

  // Recursively remove all polygons in `polygons` that are inside this BSP
  // tree.
  clipPolygons: function(polygons) {
    var front = [], back = [];
    for (var i = 0; i < polygons.length; i++) {
      this.plane.splitPolygon(polygons[i], front, back, front, back);
    }
    if (this.front) front = this.front.clipPolygons(front);
    if (this.back) back = this.back.clipPolygons(back);
    else back = [];
    return front.concat(back);
  },

  // Remove all polygons in this BSP tree that are inside the other BSP tree
  // `bsp`.
  clipTo: function(bsp) {
    this.polygons = bsp.clipPolygons(this.polygons);
    if (this.front) this.front.clipTo(bsp);
    if (this.back) this.back.clipTo(bsp);
  },

  // Return a list of all polygons in this BSP tree.
  allPolygons: function() {
    var polygons = this.polygons.slice();
    if (this.front) polygons = polygons.concat(this.front.allPolygons());
    if (this.back) polygons = polygons.concat(this.back.allPolygons());
    return polygons;
  },

  // Build a BSP tree out of `polygons`. When called on an existing tree, the
  // new polygons are filtered down to the bottom of the tree and become new
  // nodes there. Each set of polygons is partitioned using the first polygon
  // (no heuristic is used to pick a good split).
  build: function(polygons) {
    if (!polygons.length) return;
    if (!this.plane) this.plane = polygons[0].plane.clone();
    var front = [], back = [];
    for (var i = 0; i < polygons.length; i++) {
      this.plane.splitPolygon(polygons[i], this.polygons, this.polygons, front, back);
    }
    if (front.length) {
      if (!this.front) this.front = new CSG.Node();
      this.front.build(front);
    }
    if (back.length) {
      if (!this.back) this.back = new CSG.Node();
      this.back.build(back);
    }
  }
};

/*
	THREE.CSG
	@author Chandler Prall <chandler.prall@gmail.com> http://chandler.prallfamily.com
	
	Wrapper for Evan Wallace's CSG library (https://github.com/evanw/csg.js/)
	Provides CSG capabilities for Three.js models.
	
	Provided under the MIT License
*/

THREE.CSG = {
	toCSG: function ( three_model, offset, rotation ) {
		var i, geometry, offset, polygons, vertices, rotation_matrix;
		
		if ( !CSG ) {
			throw 'CSG library not loaded. Please get a copy from https://github.com/evanw/csg.js';
		}
		
		if ( three_model instanceof THREE.Mesh ) {
			geometry = three_model.geometry;
			offset = offset || three_model.position;
			rotation = rotation || three_model.rotation;
		} else if ( three_model instanceof THREE.Geometry ) {
			geometry = three_model;
			offset = offset || new THREE.Vector3( 0, 0, 0 );
			rotation = rotation || new THREE.Vector3( 0, 0, 0 );
		} else {
			throw 'Model type not supported.';
		}
		rotation_matrix = new THREE.Matrix4( ).setRotationFromEuler( rotation );
		
		var polygons = [];
		for ( i = 0; i < geometry.faces.length; i++ ) {
			if ( geometry.faces[i] instanceof THREE.Face3 ) {
				
				
				vertices = [];
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].a].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].b].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].c].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				polygons.push( new CSG.Polygon( vertices ) );
				
			} else if ( geometry.faces[i] instanceof THREE.Face4 ) {
				
				vertices = [];
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].a].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].b].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].d].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				polygons.push( new CSG.Polygon( vertices ) );
				
				vertices = [];
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].b].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].c].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				vertices.push( new CSG.Vertex( rotation_matrix.multiplyVector3( geometry.vertices[geometry.faces[i].d].position.clone( ).addSelf( offset ) ), [ geometry.faces[i].normal.x, geometry.faces[i].normal.y, geometry.faces[i].normal.z ] ) );
				polygons.push( new CSG.Polygon( vertices ) );
				
			} else {
				throw 'Model contains unsupported face.';
			}
		}
		
		return CSG.fromPolygons( polygons );
	},
	
	fromCSG: function( csg_model ) {
		var i, j, vertices, face,
			three_geometry = new THREE.Geometry( ),
			polygons = csg_model.toPolygons( );
		
		if ( !CSG ) {
			throw 'CSG library not loaded. Please get a copy from https://github.com/evanw/csg.js';
		}
		
		for ( i = 0; i < polygons.length; i++ ) {
			
			// Vertices
			vertices = [];
			for ( j = 0; j < polygons[i].vertices.length; j++ ) {
				vertices.push( this.getGeometryVertice( three_geometry, polygons[i].vertices[j].pos ) );
			}
			if ( vertices[0] === vertices[vertices.length - 1] ) {
				vertices.pop( );
			}
			
			for (var j = 2; j < vertices.length; j++) {
				face = new THREE.Face3( vertices[0], vertices[j-1], vertices[j], new THREE.Vector3( ).copy( polygons[i].plane.normal ) );
				three_geometry.faces.push( face );
				three_geometry.faceVertexUvs[0].push( new THREE.UV( ) );
			}
		}
		
		three_geometry.computeBoundingBox();
		
		return three_geometry;
	},
	
	getGeometryVertice: function getGeometryVertice ( geometry, vertice_position ) {
		//var i;
		//for ( i = 0; i < geometry.vertices.length; i++ ) {
		//	if ( geometry.vertices[i].position.x === vertice_position.x
		//		&& geometry.vertices[i].position.y === vertice_position.y
		//		&& geometry.vertices[i].position.z === vertice_position.z ) {
		//		// Vertice already exists
		//		return i;
		//	}
		//};
		
		geometry.vertices.push( new THREE.Vertex( new THREE.Vector3( vertice_position.x, vertice_position.y, vertice_position.z ) ) );
		return geometry.vertices.length - 1;
	}
};define(['plugins/csg/csg', 'plugins/csg/ThreeCSG'], function(){
	tQuery.Geometry.register('csg', function(operation, geometry){
		// sanity check - check parameters
		var operations	= ['subtract', 'union', 'intersect'];
		console.assert( operations.indexOf(operation) !== -1 );
	
		console.assert( geometry instanceof tQuery.Geometry );
		console.assert( geometry.length <= 1 );
		
		// to store the resulting geometries
		var geometries	= [];
	
		// convert geometry from three.js to csg.js
		var geometry2	= geometry.get(0);
		var cGeometry2	= THREE.CSG.toCSG(geometry2);
	
		// loop over each item
		this.each(function(tGeometry){
			// convert geometry from three.js to csg.js
			var cGeometry1	= THREE.CSG.toCSG(tGeometry);
			// perform operation
			var resultCsg	= cGeometry1[operation](cGeometry2);
			// convert result from csg.js to three.js
			var resultGeo	= THREE.CSG.fromCSG( resultCsg );
			// queue the result
			geometries.push(resultGeo);
		});
	
		return new tQuery.Geometry(geometries).back(this);
	});
});define(['plugins/csg/tquery.geometry.csg'], function(){
	tQuery.Object3D.register('csg', function(operation, tqObject){
		var objects3d	= [];
		this.each(function(object3d){
			var tqGeometry	= tQuery(object3d).geometry().csg(operation, tqObject.geometry());
			var geometry	= tqGeometry.get(0);
	
			var material	= new THREE.MeshNormalMaterial();
			var mesh	= new THREE.Mesh(geometry, material);
			objects3d.push(mesh);
		});
		return new tQuery.Object3D(objects3d).back(this);
	});
	
	// some shortcut
	tQuery.Object3D.register('union'	, function(tqObject){ return this.csg('union'	 , tqObject);	});
	tQuery.Object3D.register('subtract'	, function(tqObject){ return this.csg('subtract' , tqObject);	});
	tQuery.Object3D.register('intersect'	, function(tqObject){ return this.csg('intersect', tqObject);	});
});/**
 * Fireball material
 * 
 * All hard work by @alteredq - http://alteredqualia.com/three/examples/webgl_shader_fireball.html
 * and Ian McEwan(Ashima Arts) - https://github.com/ashima/webgl-noise
*/
tQuery.Object3D.register('useFileballMaterial', function(scale){
	scale	= scale !== undefined ? scale : 1;

	this.each(function(object3d){
		var uniforms	= {
			time	: { type: "f", value: 1.0 },
			scale	: { type: "f", value: scale }
		};
		
		var material	= new THREE.ShaderMaterial({
			uniforms	: uniforms,
			vertexShader	: tQuery.Object3D.prototype.useFileballMaterial._vertexShaderText,
			fragmentShader	: tQuery.Object3D.prototype.useFileballMaterial._fragmentShaderText,
		});
		
		object3d.material	= material;
		
		tQuery.world.loop().hook(function(deltaTime, present){
			uniforms.time.value += 0.275 * deltaTime;
		});
	});
	// for chained API
	return this;
});	

// converted by document.getElementById( 'vertexShader' ).textContent.split('\n').map(function(line){ return "\'"+line+"\',"; }).join('\n');
tQuery.Object3D.prototype.useFileballMaterial._vertexShaderText = [
'		uniform float time;',
'		uniform float scale;',
'',
'		varying vec3 vTexCoord3D;',
'		varying vec3 vNormal;',
'		varying vec3 vViewPosition;',
'',
'		void main( void ) {',
'',
'			vec4 mPosition = objectMatrix * vec4( position, 1.0 );',
'			vNormal = normalize( normalMatrix * normal );',
'			vViewPosition = cameraPosition - mPosition.xyz;',
'',
'			vTexCoord3D = scale * ( position.xyz + vec3( 0.0, 0.0, -time ) );',
'			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
'',
'		}',
'',
'	'	
].join('\n');

// converted by document.getElementById( 'fragmentShader' ).textContent.split('\n').map(function(line){ return "\""+line+"\","; }).join('\n');
tQuery.Object3D.prototype.useFileballMaterial._fragmentShaderText = [
"",
"",
"		//",
"		// Description : Array and textureless GLSL 3D simplex noise function.",
"		//      Author : Ian McEwan, Ashima Arts.",
"		//  Maintainer : ijm",
"		//     Lastmod : 20110409 (stegu)",
"		//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.",
"		//               Distributed under the MIT License. See LICENSE file.",
"		//",
"",
"		uniform float time;",
"",
"		varying vec3 vTexCoord3D;",
"		varying vec3 vNormal;",
"		varying vec3 vViewPosition;",
"",
"		vec4 permute( vec4 x ) {",
"",
"			return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );",
"",
"		}",
"",
"		vec4 taylorInvSqrt( vec4 r ) {",
"",
"			return 1.79284291400159 - 0.85373472095314 * r;",
"",
"		}",
"",
"		float snoise( vec3 v ) {",
"",
"			const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );",
"			const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );",
"",
"			// First corner",
"",
"			vec3 i  = floor( v + dot( v, C.yyy ) );",
"			vec3 x0 = v - i + dot( i, C.xxx );",
"",
"			// Other corners",
"",
"			vec3 g = step( x0.yzx, x0.xyz );",
"			vec3 l = 1.0 - g;",
"			vec3 i1 = min( g.xyz, l.zxy );",
"			vec3 i2 = max( g.xyz, l.zxy );",
"",
"			//  x0 = x0 - 0. + 0.0 * C",
"			vec3 x1 = x0 - i1 + 1.0 * C.xxx;",
"			vec3 x2 = x0 - i2 + 2.0 * C.xxx;",
"			vec3 x3 = x0 - 1. + 3.0 * C.xxx;",
"",
"			// Permutations",
"",
"			i = mod( i, 289.0 );",
"			vec4 p = permute( permute( permute(",
"					 i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )",
"				   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )",
"				   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );",
"",
"			// Gradients",
"			// ( N*N points uniformly over a square, mapped onto an octahedron.)",
"",
"			float n_ = 1.0 / 7.0; // N=7",
"",
"			vec3 ns = n_ * D.wyz - D.xzx;",
"",
"			vec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)",
"",
"			vec4 x_ = floor( j * ns.z );",
"			vec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)",
"",
"			vec4 x = x_ *ns.x + ns.yyyy;",
"			vec4 y = y_ *ns.x + ns.yyyy;",
"			vec4 h = 1.0 - abs( x ) - abs( y );",
"",
"			vec4 b0 = vec4( x.xy, y.xy );",
"			vec4 b1 = vec4( x.zw, y.zw );",
"",
"			vec4 s0 = floor( b0 ) * 2.0 + 1.0;",
"			vec4 s1 = floor( b1 ) * 2.0 + 1.0;",
"			vec4 sh = -step( h, vec4( 0.0 ) );",
"",
"			vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;",
"			vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;",
"",
"			vec3 p0 = vec3( a0.xy, h.x );",
"			vec3 p1 = vec3( a0.zw, h.y );",
"			vec3 p2 = vec3( a1.xy, h.z );",
"			vec3 p3 = vec3( a1.zw, h.w );",
"",
"			// Normalise gradients",
"",
"			vec4 norm = taylorInvSqrt( vec4( dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3) ) );",
"			p0 *= norm.x;",
"			p1 *= norm.y;",
"			p2 *= norm.z;",
"			p3 *= norm.w;",
"",
"			// Mix final noise value",
"",
"			vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3) ), 0.0 );",
"			m = m * m;",
"			return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),",
"										dot(p2,x2), dot(p3,x3) ) );",
"",
"		}",
"",
"		float heightMap( vec3 coord ) {",
"",
"			float n = abs( snoise( coord ) );",
"",
"			n += 0.25   * abs( snoise( coord * 2.0 ) );",
"			n += 0.25   * abs( snoise( coord * 4.0 ) );",
"			n += 0.125  * abs( snoise( coord * 8.0 ) );",
"			n += 0.0625 * abs( snoise( coord * 16.0 ) );",
"",
"			return n;",
"",
"		}",
"",
"		void main( void ) {",
"",
"			// height",
"",
"			float n = heightMap( vTexCoord3D );",
"",
"			// color",
"",
"			gl_FragColor = vec4( vec3( 1.5 - n, 1.0 - n, 0.5 - n ), 1.0 );",
"",
"			// normal",
"",
"			const float e = 0.001;",
"",
"			float nx = heightMap( vTexCoord3D + vec3( e, 0.0, 0.0 ) );",
"			float ny = heightMap( vTexCoord3D + vec3( 0.0, e, 0.0 ) );",
"			float nz = heightMap( vTexCoord3D + vec3( 0.0, 0.0, e ) );",
"",
"			vec3 normal = normalize( vNormal + 0.05 * vec3( n - nx, n - ny, n - nz ) / e );",
"",
"			// diffuse light",
"",
"			vec3 vLightWeighting = vec3( 0.1 );",
"",
"			vec4 lDirection = viewMatrix * vec4( normalize( vec3( 1.0, 0.0, 0.5 ) ), 0.0 );",
"			float directionalLightWeighting = dot( normal, normalize( lDirection.xyz ) ) * 0.25 + 0.75;",
"			vLightWeighting += vec3( 1.0 ) * directionalLightWeighting;",
"",
"			// specular light",
"",
"			vec3 dirHalfVector = normalize( lDirection.xyz + normalize( vViewPosition ) );",
"",
"			float dirDotNormalHalf = dot( normal, dirHalfVector );",
"",
"			float dirSpecularWeight = 0.0;",
"			if ( dirDotNormalHalf >= 0.0 )",
"				dirSpecularWeight = ( 1.0 - n ) * pow( dirDotNormalHalf, 5.0 );",
"",
"			vLightWeighting += vec3( 1.0, 0.5, 0.0 ) * dirSpecularWeight * n * 2.0;",
"",
"			gl_FragColor *= vec4( vLightWeighting, 1.0 );",
"",
"		}",
"",
"	"
].join('\n');
/**
 * Create tQuery.Scene
*/
tQuery.register('createVideoTexture', function(opts){
	// handle parameters
	if( arguments.length === 1 && typeof opts === 'string' ){
		opts	= { url : arguments[0] };
	}
	opts	= tQuery.extend(opts, {
		loop	: tQuery.world.loop()
	});
	console.assert( opts.url, "url MUST be specified" )

	// create the video element
	var video	= document.createElement('video');
	video.width	= 320;
	video.height	= 240;
	video.autoplay	= true;
	video.loop	= true;
	video.src	= opts.url;

	// create the texture
	var texture	= new THREE.Texture( video );
	
	opts.loop.hook(function(){
		if( video.readyState === video.HAVE_ENOUGH_DATA ){
			texture.needsUpdate	= true;
		}
	});
	
	return texture;
});

/**
 * Create tQuery.Scene
*/
tQuery.register('createWebcamTexture', function(opts){
	// handle parameters
	opts	= tQuery.extend(opts, {
		loop	: tQuery.world.loop()
	});

	var video	= document.createElement('video');
	video.width	= 320;
	video.height	= 240;
	video.autoplay	= true;
	video.loop	= true;	

	var hasUserMedia = navigator.webkitGetUserMedia ? true : false;
	console.log("UserMedia is detected", hasUserMedia);

	var texture;

	if( hasUserMedia ){
		navigator.webkitGetUserMedia('video', function(stream){
			video.src	= webkitURL.createObjectURL(stream);
			console.log("pseudo object URL", video.src);
		}, function(error){
			alert('you got no WebRTC webcam');
		});
		texture	= new THREE.Texture( video );
	}
	
	opts.loop.hook(function(){
		if( video.readyState === video.HAVE_ENOUGH_DATA ){
			texture.needsUpdate	= true;
		}
	});
	
	return texture;
});

if (_typeface_js && _typeface_js.loadFace) _typeface_js.loadFace({"glyphs":{"ǻ":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 322 1166 q 356 1203 337 1182 q 394 1246 375 1224 q 429 1290 413 1268 q 457 1331 446 1311 l 675 1331 l 675 1320 q 632 1283 662 1305 q 565 1236 602 1261 q 488 1190 528 1212 q 416 1153 448 1167 l 322 1153 l 322 1166 m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 586 962 q 573 897 586 925 q 537 849 560 868 q 484 820 515 830 q 419 811 454 811 q 354 820 384 811 q 301 849 323 830 q 265 897 278 868 q 253 962 253 925 q 265 1028 253 999 q 301 1075 278 1056 q 354 1104 323 1094 q 419 1114 384 1114 q 484 1104 454 1114 q 537 1075 515 1094 q 573 1028 560 1056 q 586 962 586 999 m 501 962 q 494 997 501 982 q 477 1020 488 1011 q 451 1033 465 1029 q 419 1038 436 1038 q 387 1033 402 1038 q 361 1020 373 1029 q 344 997 350 1011 q 337 962 337 982 q 344 927 337 942 q 361 904 350 913 q 387 891 373 895 q 419 887 402 887 q 451 891 436 887 q 477 904 465 895 q 494 927 488 913 q 501 962 501 942 "},"Á":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 436 1089 q 469 1134 450 1108 q 506 1187 487 1160 q 542 1242 525 1215 q 569 1293 558 1269 l 788 1293 l 788 1278 q 745 1233 775 1260 q 678 1175 715 1205 q 602 1118 641 1146 q 530 1071 562 1089 l 436 1071 l 436 1089 "},"ĥ":{"x_min":23.703125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 79 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 826 q 348 768 349 799 q 344 710 346 736 q 339 649 341 679 l 351 649 q 395 711 372 688 q 445 744 418 733 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 m 207 1127 q 245 1172 223 1146 q 289 1225 267 1198 q 330 1280 310 1253 q 360 1331 349 1307 l 547 1331 q 577 1280 558 1307 q 618 1225 596 1253 q 662 1172 640 1198 q 700 1127 683 1146 l 700 1109 l 604 1109 q 570 1136 590 1120 q 529 1168 550 1151 q 488 1202 508 1185 q 453 1233 468 1219 q 417 1202 437 1219 q 376 1168 397 1185 q 336 1136 356 1151 q 303 1109 317 1120 l 207 1109 l 207 1127 "},"Κ":{"x_min":38.453125,"x_max":1019,"ha":1019,"o":"m 602 739 q 640 782 625 763 q 664 818 655 802 q 677 850 673 835 q 681 879 681 865 q 664 911 681 902 q 603 920 646 920 l 603 992 l 980 992 l 980 920 q 926 911 951 920 q 876 886 901 902 q 828 847 852 869 q 780 797 804 825 l 597 596 l 855 185 q 894 131 875 153 q 932 97 913 110 q 970 79 951 84 q 1013 73 990 73 l 1019 73 l 1019 0 l 944 0 q 851 3 891 0 q 781 13 811 6 q 729 30 751 20 q 691 55 707 41 q 661 87 675 69 q 635 127 648 105 l 448 447 l 387 398 l 387 164 q 392 116 387 134 q 408 89 398 99 q 431 76 417 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 504 l 602 739 "},"»":{"x_min":90.046875,"x_max":679,"ha":770,"o":"m 679 339 l 466 97 l 369 97 l 510 375 l 369 654 l 466 654 l 679 411 l 679 339 m 400 339 l 187 97 l 90 97 l 230 375 l 90 654 l 187 654 l 400 411 l 400 339 "},"∆":{"x_min":68,"x_max":904,"ha":973,"o":"m 904 0 l 68 0 l 68 90 l 393 992 l 591 992 l 904 99 l 904 0 m 689 109 l 510 632 q 471 751 489 694 q 441 860 453 809 q 414 759 431 810 q 376 644 398 709 l 192 109 l 689 109 "},"ў":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 m 407 918 q 499 952 467 918 q 539 1059 531 986 l 713 1059 q 695 977 708 1016 q 649 908 682 938 q 559 859 617 877 q 407 842 501 842 q 256 859 314 842 q 165 908 198 877 q 119 977 132 938 q 102 1059 106 1016 l 275 1059 q 315 952 283 986 q 407 918 348 918 "},"ţ":{"x_min":29.546875,"x_max":534,"ha":562,"o":"m 436 97 q 487 101 463 97 q 534 110 512 105 l 534 20 q 504 9 523 15 q 461 -2 485 2 q 405 -10 436 -7 q 337 -14 374 -14 q 253 -2 291 -14 q 188 34 215 8 q 148 102 162 60 q 134 205 134 144 l 134 650 l 29 650 l 29 721 q 109 738 74 721 q 165 779 144 756 q 229 917 208 824 l 344 917 l 344 745 l 521 745 l 521 650 l 344 650 l 344 219 q 366 127 344 156 q 436 97 387 97 m 179 -289 q 193 -242 185 -268 q 209 -189 201 -216 q 223 -134 216 -161 q 233 -85 229 -108 l 395 -85 l 395 -98 q 370 -147 385 -120 q 336 -202 354 -174 q 299 -257 318 -230 q 262 -307 280 -285 l 179 -307 l 179 -289 "},"«":{"x_min":90,"x_max":678.28125,"ha":770,"o":"m 90 411 l 302 654 l 399 654 l 259 375 l 399 97 l 302 97 l 90 339 l 90 411 m 369 411 l 581 654 l 678 654 l 538 375 l 678 97 l 581 97 l 369 339 l 369 411 "},"í":{"x_min":23.703125,"x_max":532,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 180 860 q 213 905 194 879 q 250 958 231 931 q 286 1013 269 986 q 313 1064 302 1040 l 532 1064 l 532 1049 q 489 1004 519 1031 q 422 946 459 976 q 346 889 385 917 q 274 842 306 860 l 180 842 l 180 860 "},"ņ":{"x_min":27.78125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 580 q 131 627 139 610 q 111 655 124 645 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 418 730 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 m 344 -289 q 358 -242 350 -268 q 374 -189 366 -216 q 388 -134 381 -161 q 398 -85 394 -108 l 560 -85 l 560 -98 q 535 -147 550 -120 q 501 -202 519 -174 q 464 -257 483 -230 q 427 -307 445 -285 l 344 -307 l 344 -289 "},"µ":{"x_min":112.71875,"x_max":888.453125,"ha":924,"o":"m 389 -14 q 290 7 331 -14 q 222 67 249 28 q 227 -39 222 9 q 247 -124 232 -87 q 292 -183 263 -161 q 371 -212 322 -206 q 362 -261 371 -239 q 336 -299 353 -283 q 296 -324 320 -315 q 242 -334 272 -334 q 193 -324 217 -334 q 151 -293 169 -315 q 123 -237 133 -272 q 112 -151 112 -202 q 114 -64 112 -110 q 119 35 116 -19 q 125 158 122 90 q 129 312 128 225 l 129 745 l 340 745 l 340 285 q 345 215 340 248 q 362 157 350 182 q 394 118 374 132 q 445 104 415 104 q 498 119 475 104 q 538 163 522 135 q 564 231 555 191 q 573 319 573 271 l 573 745 l 784 745 l 784 191 q 807 101 784 128 q 878 73 830 73 l 888 73 l 888 0 l 767 0 q 650 33 695 0 q 586 120 604 66 l 579 120 q 545 64 563 89 q 505 22 527 39 q 454 -4 482 4 q 389 -14 425 -14 "},"ỳ":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 m 420 842 q 348 889 388 860 q 271 946 308 917 q 204 1004 234 976 q 162 1049 174 1031 l 162 1064 l 379 1064 q 407 1013 390 1040 q 443 958 424 986 q 481 905 461 931 q 515 860 500 879 l 515 842 l 420 842 "},"Ι":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 "},"Ύ":{"x_min":-52,"x_max":1166.5625,"ha":1167,"o":"m 432 0 l 432 73 l 497 73 q 528 75 514 73 q 554 86 543 77 q 571 111 565 94 q 578 157 578 128 l 578 351 l 321 844 q 301 879 310 865 q 281 902 292 893 q 256 914 270 910 q 222 918 243 918 l 204 918 l 204 992 l 669 992 l 669 918 l 645 918 q 583 901 603 918 q 562 856 562 884 q 568 817 562 838 q 583 779 575 797 l 686 575 q 722 496 708 530 q 747 430 736 462 q 780 510 761 467 q 822 600 799 553 l 902 766 q 922 817 917 797 q 926 850 926 838 q 903 902 926 886 q 834 918 881 918 l 803 918 l 803 992 l 1166 992 l 1166 918 l 1140 918 q 1109 913 1122 918 q 1086 897 1097 909 q 1063 863 1075 884 q 1035 810 1051 842 l 799 349 l 799 159 q 805 112 799 129 q 821 86 811 95 q 846 75 832 77 q 876 73 860 73 l 944 73 l 944 0 l 432 0 m -52 788 q -37 835 -45 809 q -22 888 -30 861 q -8 943 -15 916 q 1 993 -2 969 l 191 993 l 191 978 q 164 930 181 957 q 128 875 148 903 q 86 820 108 847 q 44 770 64 793 l -52 770 l -52 788 "},"ѕ":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 "},"Ш":{"x_min":38.453125,"x_max":1541.859375,"ha":1581,"o":"m 38 0 l 38 73 l 96 73 q 123 76 111 73 q 146 88 136 79 q 162 114 156 97 q 168 158 168 130 l 168 828 q 162 876 168 858 q 147 903 157 893 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 495 992 l 495 918 l 450 918 q 422 915 435 918 q 399 903 409 912 q 384 876 390 893 q 378 828 378 858 l 378 84 l 685 84 l 685 828 q 679 876 685 858 q 664 903 674 893 q 641 915 654 912 q 613 918 628 918 l 568 918 l 568 992 l 1011 992 l 1011 918 l 966 918 q 939 916 952 918 q 917 904 927 913 q 901 879 907 895 q 895 835 895 863 l 895 84 l 1202 84 l 1202 828 q 1196 876 1202 858 q 1181 903 1190 893 q 1158 915 1171 912 q 1130 918 1145 918 l 1084 918 l 1084 992 l 1541 992 l 1541 918 l 1483 918 q 1456 915 1469 918 q 1433 903 1443 912 q 1418 876 1423 893 q 1413 828 1413 858 l 1413 158 q 1418 114 1413 130 q 1434 88 1424 97 q 1456 76 1444 79 q 1483 73 1469 73 l 1541 73 l 1541 0 l 38 0 "},"M":{"x_min":38.453125,"x_max":1283.875,"ha":1323,"o":"m 839 0 l 839 73 l 853 73 q 891 76 874 73 q 918 87 908 79 q 935 110 929 95 q 940 151 940 126 l 940 855 l 660 0 l 565 0 l 271 855 l 271 164 q 278 116 271 134 q 299 89 286 99 q 331 76 312 80 q 374 73 350 73 l 383 73 l 383 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 438 992 l 669 320 l 891 992 l 1283 992 l 1283 918 l 1225 918 q 1197 915 1210 918 q 1175 903 1184 912 q 1160 876 1165 893 q 1155 828 1155 858 l 1155 164 q 1160 116 1155 134 q 1175 89 1165 99 q 1197 76 1184 80 q 1225 73 1210 73 l 1283 73 l 1283 0 l 839 0 "},"Ψ":{"x_min":30.046875,"x_max":1322.9375,"ha":1356,"o":"m 522 330 q 385 341 444 330 q 285 375 327 353 q 215 426 243 396 q 172 490 188 455 q 150 564 156 525 q 144 645 144 604 l 144 818 q 134 870 144 850 q 110 901 125 890 q 74 915 95 911 q 30 918 53 918 l 30 992 l 346 992 l 346 664 q 355 550 346 598 q 385 471 363 502 q 445 425 407 439 q 544 410 484 410 l 575 410 l 575 832 q 565 876 575 860 q 541 903 556 893 q 505 915 526 912 q 461 918 484 918 l 442 918 l 442 992 l 909 992 l 909 918 l 891 918 q 847 915 868 918 q 811 903 826 912 q 786 876 796 893 q 777 832 777 860 l 777 410 l 808 410 q 906 425 868 410 q 967 471 945 439 q 997 550 989 502 q 1006 664 1006 598 l 1006 992 l 1322 992 l 1322 918 q 1278 915 1299 918 q 1242 901 1257 911 q 1218 870 1227 890 q 1209 818 1209 850 l 1209 645 q 1202 564 1209 604 q 1180 490 1196 525 q 1137 426 1164 455 q 1067 375 1109 396 q 967 341 1025 353 q 830 330 908 330 l 777 330 l 777 157 q 786 114 777 130 q 811 88 796 97 q 847 76 826 79 q 891 73 868 73 l 909 73 l 909 0 l 442 0 l 442 73 l 461 73 q 505 76 484 73 q 541 88 526 79 q 565 114 556 97 q 575 157 575 130 l 575 330 l 522 330 "},"ũ":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 573 974 q 600 980 588 974 q 621 996 612 986 q 634 1020 629 1006 q 641 1047 639 1033 l 732 1047 q 716 968 729 1005 q 680 902 702 930 q 626 858 657 874 q 558 842 595 842 q 490 855 521 842 q 434 885 460 869 q 385 916 408 902 q 340 929 363 929 q 313 923 325 929 q 292 907 301 917 q 279 883 284 897 q 272 856 274 870 l 182 856 q 197 935 184 898 q 234 1001 211 973 q 288 1045 257 1029 q 356 1062 319 1062 q 424 1048 394 1062 q 480 1018 454 1034 q 529 987 506 1001 q 573 974 552 974 "},"ŭ":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 454 842 q 358 861 399 842 q 289 911 317 880 q 247 981 261 942 q 232 1060 233 1020 l 323 1060 q 369 987 335 1009 q 454 965 402 965 q 539 987 505 965 q 584 1060 573 1009 l 677 1060 q 661 981 675 1020 q 619 911 647 942 q 550 861 591 880 q 454 842 509 842 "},"―":{"x_min":-7,"x_max":1396,"ha":1389,"o":"m 1396 331 l -7 331 l -7 414 l 1396 414 l 1396 331 "},"{":{"x_min":41.59375,"x_max":572.640625,"ha":614,"o":"m 440 -174 q 337 -159 382 -174 q 263 -118 293 -145 q 218 -53 233 -91 q 203 31 203 -15 l 203 269 q 190 334 203 309 q 156 373 177 358 q 105 393 134 387 q 41 400 75 398 l 41 485 q 105 491 75 486 q 156 511 134 497 q 190 550 177 525 q 203 613 203 575 l 203 852 q 263 1002 203 949 q 440 1055 323 1055 l 572 1055 l 572 981 l 518 981 q 469 972 488 981 q 439 947 450 964 q 423 904 428 930 q 419 846 419 879 l 419 611 q 383 507 419 548 q 266 449 347 467 l 266 437 q 383 377 346 417 q 419 273 419 336 l 419 35 q 423 -22 419 3 q 439 -65 428 -47 q 469 -91 450 -82 q 518 -100 488 -100 l 572 -100 l 572 -174 l 440 -174 "},"¼":{"x_min":7.015625,"x_max":1139.84375,"ha":1167,"o":"m 300 999 l 300 512 q 305 484 300 495 q 319 468 310 474 q 339 461 327 463 q 364 460 351 460 l 421 460 l 421 399 l 29 399 l 29 460 l 99 460 q 124 461 113 460 q 144 468 135 463 q 158 484 153 474 q 163 512 163 495 l 163 906 q 105 844 130 868 q 54 821 79 821 q 20 840 34 821 q 7 889 7 860 q 62 909 32 895 q 135 952 93 923 l 197 999 l 300 999 m 392 0 l 284 0 l 779 992 l 887 992 l 392 0 m 1032 163 l 1032 114 q 1036 86 1032 97 q 1049 70 1041 76 q 1068 63 1057 65 q 1090 62 1078 62 l 1118 62 l 1118 1 l 798 1 l 798 62 l 837 62 q 859 63 848 62 q 877 70 869 65 q 889 86 884 76 q 894 114 894 97 l 894 163 l 630 163 l 630 218 l 906 601 l 1032 601 l 1032 237 l 1139 237 l 1139 163 l 1032 163 m 894 403 q 896 446 894 425 q 901 493 897 468 q 889 471 895 482 q 880 454 883 459 l 721 237 l 894 237 l 894 403 "},"Ḿ":{"x_min":38.453125,"x_max":1283.875,"ha":1323,"o":"m 839 0 l 839 73 l 853 73 q 891 76 874 73 q 918 87 908 79 q 935 110 929 95 q 940 151 940 126 l 940 855 l 660 0 l 565 0 l 271 855 l 271 164 q 278 116 271 134 q 299 89 286 99 q 331 76 312 80 q 374 73 350 73 l 383 73 l 383 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 438 992 l 669 320 l 891 992 l 1283 992 l 1283 918 l 1225 918 q 1197 915 1210 918 q 1175 903 1184 912 q 1160 876 1165 893 q 1155 828 1155 858 l 1155 164 q 1160 116 1155 134 q 1175 89 1165 99 q 1197 76 1184 80 q 1225 73 1210 73 l 1283 73 l 1283 0 l 839 0 m 578 1108 q 611 1153 592 1127 q 648 1206 629 1179 q 684 1261 667 1234 q 711 1312 700 1288 l 930 1312 l 930 1297 q 887 1252 917 1279 q 820 1194 857 1224 q 744 1137 783 1165 q 672 1090 704 1108 l 578 1090 l 578 1108 "},"ι":{"x_min":129,"x_max":533,"ha":546,"o":"m 339 745 l 339 227 q 361 128 339 159 q 432 97 383 97 q 484 100 457 97 q 533 108 511 104 l 533 15 q 507 6 524 11 q 468 -3 490 0 q 417 -10 445 -7 q 359 -14 389 -14 q 262 -2 305 -14 q 190 33 219 8 q 144 100 160 58 q 129 201 129 141 l 129 745 l 339 745 "},"Ĳ":{"x_min":38.453125,"x_max":1052.96875,"ha":1068,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 1052 918 l 994 918 q 966 915 979 918 q 943 903 953 912 q 928 876 934 893 q 922 828 922 858 l 922 -2 q 908 -114 922 -65 q 869 -200 894 -163 q 809 -263 844 -237 q 733 -304 774 -288 q 646 -326 692 -319 q 553 -334 600 -334 l 502 -334 l 502 -253 l 528 -253 q 592 -240 561 -253 q 648 -199 624 -228 q 688 -121 673 -169 q 703 -4 703 -74 l 703 833 q 697 878 703 861 q 682 903 692 895 q 659 915 672 912 q 632 918 646 918 l 574 918 l 574 992 l 1052 992 l 1052 918 "},"Ê":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 196 1089 q 234 1134 212 1108 q 278 1187 256 1160 q 319 1242 299 1215 q 349 1293 338 1269 l 536 1293 q 566 1242 547 1269 q 607 1187 585 1215 q 651 1134 629 1160 q 689 1089 672 1108 l 689 1071 l 593 1071 q 559 1098 579 1082 q 518 1130 539 1113 q 477 1164 497 1147 q 442 1195 457 1181 q 406 1164 426 1181 q 365 1130 386 1147 q 325 1098 345 1113 q 292 1071 306 1082 l 196 1071 l 196 1089 "},"Ά":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 63 788 q 77 835 69 809 q 92 888 84 861 q 106 943 99 916 q 116 993 112 969 l 306 993 l 306 978 q 279 930 296 957 q 243 875 263 903 q 201 820 223 847 q 159 770 179 793 l 63 770 l 63 788 "},")":{"x_min":45,"x_max":476,"ha":555,"o":"m 252 441 q 244 603 252 524 q 213 752 235 682 q 149 882 190 823 q 45 984 109 941 l 45 1072 q 242 963 160 1025 q 376 822 324 901 q 452 648 428 743 q 476 441 476 553 q 452 233 476 329 q 376 58 428 137 q 242 -83 324 -20 q 45 -193 160 -146 l 45 -104 q 149 -1 109 -61 q 213 128 190 57 q 244 279 235 199 q 252 441 252 358 "},"ε":{"x_min":52,"x_max":691,"ha":743,"o":"m 285 560 q 290 512 285 535 q 306 470 296 488 q 333 440 317 452 q 369 426 348 428 q 433 442 398 434 q 500 450 468 450 q 549 437 531 450 q 567 397 567 425 q 542 346 567 366 q 474 327 517 327 q 445 329 463 327 q 407 335 427 331 q 370 344 387 339 q 340 353 352 348 q 285 308 306 343 q 265 219 265 273 q 309 122 265 155 q 436 89 353 89 q 512 98 478 89 q 574 121 546 107 q 622 155 601 136 q 659 192 643 173 q 681 169 671 186 q 691 135 691 153 q 674 79 691 106 q 619 31 657 52 q 521 -1 582 11 q 374 -14 461 -14 q 232 3 292 -14 q 131 51 171 21 q 71 122 91 81 q 52 209 52 163 q 65 280 52 251 q 100 328 78 308 q 149 362 121 348 q 208 385 178 375 l 208 393 q 152 419 177 402 q 109 459 127 437 q 81 509 91 482 q 72 563 72 535 q 94 648 72 611 q 156 710 116 685 q 254 748 196 735 q 383 761 311 761 q 509 747 456 761 q 597 713 563 734 q 648 667 632 693 q 664 615 664 640 q 617 551 664 571 q 474 531 571 531 q 450 642 474 602 q 378 682 426 682 q 334 672 352 682 q 305 645 316 662 q 290 607 294 629 q 285 560 285 585 "},"э":{"x_min":47,"x_max":656,"ha":721,"o":"m 313 63 q 366 78 343 63 q 405 125 389 92 q 430 211 421 158 q 441 343 439 265 l 199 343 l 199 432 l 441 432 q 433 536 439 489 q 413 615 426 582 q 377 665 399 647 q 320 682 354 682 q 270 667 292 682 q 234 627 249 651 q 213 573 220 602 q 206 514 206 543 q 102 540 135 514 q 70 611 70 567 q 84 665 70 638 q 130 713 98 692 q 211 748 161 735 q 333 761 262 761 q 470 740 410 761 q 571 675 530 719 q 634 560 612 630 q 656 390 656 489 q 631 200 656 276 q 563 76 607 123 q 457 8 519 28 q 320 -12 395 -12 q 188 0 241 -12 q 104 34 135 13 q 59 84 72 56 q 47 146 47 113 q 81 225 47 196 q 184 253 116 253 q 192 178 184 213 q 217 118 201 143 q 257 78 233 93 q 313 63 281 63 "},"ш":{"x_min":23.703125,"x_max":1358.296875,"ha":1382,"o":"m 494 745 l 888 745 l 888 671 l 885 671 q 854 668 871 671 q 825 655 838 664 q 802 628 811 645 q 793 580 793 610 l 793 79 l 1038 79 l 1038 580 q 1029 628 1038 610 q 1006 655 1020 645 q 977 668 993 664 q 947 671 961 671 l 944 671 l 944 745 l 1358 745 l 1358 671 l 1341 671 q 1309 668 1326 671 q 1277 655 1291 664 q 1252 628 1262 645 q 1243 580 1243 610 l 1243 158 q 1252 114 1243 130 q 1277 88 1262 97 q 1309 76 1292 79 q 1341 73 1327 73 l 1358 73 l 1358 0 l 23 0 l 23 73 l 39 73 q 72 76 54 73 q 104 88 89 79 q 129 114 119 97 q 139 158 139 130 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 437 745 l 437 671 l 434 671 q 404 668 420 671 q 375 655 388 664 q 352 628 361 645 q 343 580 343 610 l 343 79 l 589 79 l 589 586 q 579 630 589 614 q 556 656 570 647 q 526 668 542 665 q 497 671 511 671 l 494 671 l 494 745 "},"Я":{"x_min":-7,"x_max":942.53125,"ha":981,"o":"m 942 0 l 463 0 l 463 73 l 522 73 q 549 76 536 73 q 571 87 562 79 q 587 112 581 96 q 593 156 593 129 l 593 431 l 489 431 l 350 152 q 296 73 325 103 q 232 26 268 42 q 148 5 195 10 q 38 0 100 0 l -7 0 l -7 73 l -1 73 q 74 100 38 73 q 143 187 109 126 l 295 469 q 228 506 261 484 q 170 561 195 528 q 129 637 144 594 q 114 735 114 680 q 205 926 114 860 q 494 992 297 992 l 942 992 l 942 918 l 884 918 q 857 915 869 918 q 834 903 844 912 q 818 878 824 895 q 813 833 813 861 l 813 156 q 818 112 813 129 q 834 87 824 96 q 857 76 844 79 q 884 73 869 73 l 942 73 l 942 0 m 593 909 l 518 909 q 439 899 472 909 q 386 865 407 888 q 356 805 366 842 q 347 716 347 768 q 355 626 347 665 q 383 563 363 588 q 435 524 403 537 q 515 512 467 512 l 593 512 l 593 909 "},"a":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 "},"Ę":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 484 -180 q 497 -118 484 -147 q 534 -65 511 -89 q 586 -24 557 -41 q 648 0 616 -7 l 755 0 q 710 -20 733 -6 q 668 -53 687 -33 q 637 -100 650 -74 q 625 -160 625 -127 q 632 -193 625 -179 q 652 -215 639 -207 q 683 -229 665 -224 q 721 -233 700 -233 q 761 -230 740 -233 q 809 -222 783 -228 l 809 -311 q 782 -321 798 -317 q 749 -327 766 -325 q 717 -332 733 -330 q 690 -334 701 -334 q 536 -297 589 -334 q 484 -180 484 -260 "},"Z":{"x_min":58,"x_max":864,"ha":925,"o":"m 833 921 l 310 84 l 610 84 q 680 96 653 84 q 723 128 707 108 q 746 172 739 147 q 756 223 754 197 l 763 286 l 864 286 l 857 0 l 58 0 l 58 69 l 578 907 l 305 907 q 251 898 272 907 q 217 873 230 889 q 199 833 205 856 q 191 781 193 809 l 183 706 l 84 706 l 90 992 l 833 992 l 833 921 "}," ":{"x_min":0,"x_max":0,"ha":231},"k":{"x_min":23.703125,"x_max":884,"ha":884,"o":"m 884 0 l 864 0 q 736 3 788 0 q 647 18 685 6 q 583 55 610 31 q 529 123 556 80 l 405 318 l 349 276 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 519 q 348 475 349 500 q 346 428 347 451 q 343 375 344 402 l 518 571 q 548 612 541 597 q 555 637 555 627 q 536 665 555 655 q 483 675 518 675 l 483 745 l 833 745 l 833 675 q 739 646 785 675 q 637 557 692 618 l 550 457 l 734 181 q 808 100 771 126 q 879 73 846 73 l 884 73 l 884 0 "},"Ù":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 551 1071 q 479 1118 519 1089 q 402 1175 439 1146 q 335 1233 365 1205 q 293 1278 305 1260 l 293 1293 l 510 1293 q 538 1242 521 1269 q 574 1187 555 1215 q 612 1134 592 1160 q 646 1089 631 1108 l 646 1071 l 551 1071 "},"Ů":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 696 1208 q 683 1142 696 1170 q 647 1095 670 1114 q 594 1066 624 1076 q 529 1057 563 1057 q 463 1066 494 1057 q 410 1095 433 1076 q 374 1142 387 1114 q 362 1208 362 1170 q 374 1273 362 1244 q 410 1320 387 1301 q 463 1349 433 1339 q 529 1359 494 1359 q 594 1349 563 1359 q 647 1320 624 1339 q 683 1273 670 1301 q 696 1208 696 1244 m 611 1208 q 604 1242 611 1228 q 587 1265 598 1256 q 560 1278 575 1274 q 529 1282 545 1282 q 497 1278 512 1282 q 470 1265 482 1274 q 453 1242 459 1256 q 446 1208 446 1228 q 453 1173 446 1187 q 470 1150 459 1159 q 497 1137 482 1141 q 529 1132 512 1132 q 560 1137 545 1132 q 587 1150 575 1141 q 604 1173 598 1159 q 611 1208 611 1187 "},"¢":{"x_min":79,"x_max":720,"ha":777,"o":"m 387 115 q 260 143 317 119 q 163 212 203 166 q 101 327 123 257 q 79 496 79 397 q 102 672 79 600 q 166 791 125 745 q 263 860 207 837 q 387 889 320 883 l 387 991 l 473 991 l 473 889 q 579 873 532 885 q 656 841 625 860 q 704 797 688 821 q 720 744 720 772 q 712 700 720 722 q 684 663 704 679 q 629 636 664 646 q 540 626 595 626 q 537 683 540 655 q 526 734 534 711 q 505 774 518 757 q 473 798 492 790 l 473 218 q 539 227 508 218 q 595 251 570 237 q 640 286 621 266 q 672 330 660 306 q 698 302 690 319 q 707 266 707 285 q 693 217 707 242 q 650 170 679 192 q 577 134 621 149 q 473 115 533 119 l 473 0 l 387 0 l 387 115 m 291 498 q 314 325 291 391 q 387 234 336 259 l 387 796 q 346 764 364 785 q 316 707 329 743 q 297 620 304 671 q 291 498 291 568 "},"В":{"x_min":38.453125,"x_max":884,"ha":933,"o":"m 842 739 q 829 659 842 693 q 793 600 816 624 q 738 557 770 575 q 666 527 706 539 l 666 520 q 754 487 715 508 q 823 435 794 466 q 868 363 852 404 q 884 272 884 322 q 784 67 884 135 q 486 0 684 0 l 38 0 l 38 73 l 95 73 q 124 76 111 73 q 146 89 137 80 q 162 116 156 99 q 168 164 168 134 l 168 829 q 162 874 168 857 q 146 901 156 892 q 123 915 136 911 q 95 918 110 918 l 38 918 l 38 992 l 444 992 q 742 930 642 992 q 842 739 842 869 m 387 84 l 479 84 q 558 94 525 84 q 611 127 590 105 q 640 187 631 150 q 650 276 650 223 q 641 365 650 327 q 614 427 633 402 q 562 464 594 451 q 482 476 530 476 l 387 476 l 387 84 m 387 561 l 440 561 q 521 571 489 561 q 573 602 553 581 q 600 657 592 624 q 608 739 608 691 q 599 818 608 786 q 569 870 590 850 q 516 898 549 889 q 437 906 484 906 l 387 906 l 387 561 "},"І":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 "},"ē":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 623 842 l 220 842 l 220 951 l 623 951 l 623 842 "},"β":{"x_min":129,"x_max":856,"ha":921,"o":"m 129 -334 l 129 793 q 155 924 129 871 q 229 1009 182 977 q 339 1056 276 1042 q 475 1070 402 1070 q 621 1054 558 1070 q 725 1009 684 1038 q 788 937 767 979 q 809 842 809 894 q 801 779 809 808 q 780 727 793 751 q 752 685 768 704 q 718 651 735 666 q 628 597 678 618 l 628 588 q 717 550 676 573 q 790 494 759 527 q 838 415 820 460 q 856 309 856 370 q 834 168 856 229 q 772 67 812 107 q 674 6 731 26 q 546 -14 617 -14 q 421 2 472 -14 q 339 48 370 19 l 339 -334 l 129 -334 m 507 67 q 562 81 537 67 q 605 125 587 95 q 634 200 624 155 q 644 307 644 245 q 635 401 644 362 q 610 468 626 440 q 568 514 593 495 q 511 544 543 532 q 472 531 494 537 q 422 526 451 526 q 383 540 399 526 q 368 579 368 554 q 438 635 368 635 q 457 633 446 635 q 480 631 468 632 q 504 628 493 630 q 521 624 515 626 q 587 692 565 645 q 610 818 610 738 q 601 889 610 857 q 576 945 593 922 q 534 980 559 968 q 476 993 509 993 q 416 980 441 993 q 373 942 390 966 q 347 883 356 918 q 339 804 339 848 l 339 149 q 369 119 352 133 q 408 93 386 104 q 454 74 429 81 q 507 67 478 67 "},"≠":{"x_min":87,"x_max":690,"ha":777,"o":"m 386 679 l 424 822 l 521 822 l 483 679 l 690 679 l 690 582 l 458 582 l 413 409 l 690 409 l 690 313 l 388 313 l 352 169 l 253 169 l 289 313 l 87 313 l 87 409 l 315 409 l 360 582 l 87 582 l 87 679 l 386 679 "},"‼":{"x_min":144.875,"x_max":730.421875,"ha":874,"o":"m 144 992 l 386 992 l 305 317 l 226 317 l 144 992 m 153 99 q 161 152 153 131 q 185 187 170 174 q 222 205 201 200 q 267 211 243 211 q 310 205 290 211 q 347 187 331 200 q 371 152 362 174 q 381 99 381 131 q 371 47 381 68 q 347 13 362 26 q 310 -5 331 0 q 267 -11 290 -11 q 222 -5 243 -11 q 185 13 201 0 q 161 47 170 26 q 153 99 153 68 m 488 992 l 730 992 l 649 317 l 570 317 l 488 992 m 497 99 q 505 152 497 131 q 529 187 514 174 q 566 205 545 200 q 611 211 587 211 q 654 205 634 211 q 691 187 675 200 q 715 152 706 174 q 725 99 725 131 q 715 47 725 68 q 691 13 706 26 q 654 -5 675 0 q 611 -11 634 -11 q 566 -5 587 -11 q 529 13 545 0 q 505 47 514 26 q 497 99 497 68 "},"¥":{"x_min":-4.265625,"x_max":749.859375,"ha":749,"o":"m 132 0 l 132 73 l 164 73 q 207 74 187 73 q 243 82 227 75 q 267 105 258 89 q 278 152 277 122 l 278 229 l 83 229 l 83 311 l 278 311 l 278 392 l 83 392 l 83 474 l 254 474 l 90 844 q 72 880 80 865 q 53 902 63 894 q 30 915 43 911 q 0 918 17 918 l -4 918 l -4 992 l 393 992 l 393 918 l 383 918 q 322 905 340 918 q 304 864 304 893 q 310 827 304 847 q 326 782 315 807 l 379 650 q 409 565 396 606 q 427 496 422 524 q 442 541 431 515 q 463 598 452 568 l 522 750 q 536 791 530 774 q 544 821 541 808 q 548 844 547 834 q 549 863 549 854 q 530 905 549 891 q 465 918 511 918 l 460 918 l 460 992 l 749 992 l 749 918 l 745 918 q 714 914 728 918 q 689 897 701 909 q 665 863 677 884 q 640 810 654 842 l 497 474 l 678 474 l 678 392 l 484 392 l 484 311 l 678 311 l 678 229 l 484 229 l 484 159 q 494 109 484 126 q 518 83 503 91 q 554 74 533 75 q 598 73 575 73 l 630 73 l 630 0 l 132 0 "},"Ĥ":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 475 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 877 168 861 q 146 903 156 894 q 123 915 136 911 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 902 417 911 q 392 875 398 892 q 387 827 387 857 l 387 560 l 749 560 l 749 827 q 743 875 749 857 q 728 902 738 892 q 705 915 718 911 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 902 999 911 q 974 875 979 892 q 969 827 969 857 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 m 323 1089 q 361 1134 339 1108 q 405 1187 383 1160 q 446 1242 426 1215 q 476 1293 465 1269 l 663 1293 q 693 1242 674 1269 q 734 1187 712 1215 q 778 1134 756 1160 q 816 1089 799 1108 l 816 1071 l 720 1071 q 686 1098 706 1082 q 645 1130 666 1113 q 604 1164 624 1147 q 569 1195 584 1181 q 533 1164 553 1181 q 492 1130 513 1147 q 452 1098 472 1113 q 419 1071 433 1082 l 323 1071 l 323 1089 "},"U":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 "},"Ñ":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 813 0 l 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 298 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 0 l 813 0 m 676 1203 q 703 1209 691 1203 q 724 1225 715 1215 q 737 1249 732 1235 q 744 1276 742 1262 l 835 1276 q 819 1197 832 1234 q 783 1131 805 1159 q 729 1087 760 1103 q 661 1071 698 1071 q 593 1084 624 1071 q 537 1114 563 1098 q 488 1145 511 1131 q 443 1158 466 1158 q 416 1152 428 1158 q 395 1136 404 1146 q 382 1112 387 1126 q 375 1085 377 1099 l 285 1085 q 300 1164 287 1127 q 337 1230 314 1202 q 391 1274 360 1258 q 459 1291 422 1291 q 527 1277 497 1291 q 583 1247 557 1263 q 632 1216 609 1230 q 676 1203 655 1203 "},"F":{"x_min":38.453125,"x_max":815,"ha":863,"o":"m 718 736 l 711 803 q 677 882 704 858 q 608 907 650 907 l 387 907 l 387 528 l 716 528 l 716 445 l 387 445 l 387 164 q 392 116 387 134 q 408 89 398 99 q 431 76 417 80 q 459 73 444 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 808 992 l 815 736 l 718 736 "},"ϑ":{"x_min":21.453125,"x_max":937.203125,"ha":958,"o":"m 629 668 q 609 796 623 740 q 576 892 596 853 q 531 952 556 932 q 475 973 505 973 q 411 945 437 973 q 386 859 386 917 q 406 774 386 810 q 458 715 425 738 q 536 680 491 691 q 629 668 580 668 m 844 592 q 846 556 845 576 q 847 514 847 536 q 821 300 847 397 q 744 133 796 202 q 614 24 692 63 q 432 -14 536 -14 q 282 6 343 -14 q 183 59 221 26 q 129 135 146 92 q 113 226 113 179 q 115 282 113 253 q 120 338 117 310 q 126 389 123 365 q 129 430 129 413 q 116 476 129 459 q 65 494 102 494 l 21 494 l 21 568 l 165 568 q 301 537 260 568 q 343 446 343 506 q 340 393 343 423 q 335 331 338 363 q 329 268 332 300 q 326 211 326 237 q 332 156 326 182 q 353 113 338 131 q 391 84 367 94 q 449 73 414 73 q 533 105 497 73 q 592 194 569 136 q 627 332 615 251 q 638 512 638 413 q 638 555 638 533 q 636 592 637 578 q 432 613 517 594 q 292 668 346 633 q 211 750 237 702 q 185 858 185 799 q 203 943 185 905 q 258 1007 222 980 q 345 1047 294 1033 q 464 1061 397 1061 q 616 1032 552 1061 q 725 952 680 1003 q 797 827 770 900 q 838 666 824 754 l 937 666 l 937 592 l 844 592 "},"Ќ":{"x_min":38.453125,"x_max":1000,"ha":1000,"o":"m 901 0 q 807 8 847 0 q 738 33 768 16 q 687 75 709 50 q 648 132 665 99 l 516 372 q 485 419 499 403 q 455 445 471 436 q 419 456 439 454 q 373 458 400 458 l 373 164 q 379 116 373 134 q 394 89 385 99 q 417 76 404 80 q 445 73 430 73 l 503 73 l 503 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 503 992 l 503 918 l 445 918 q 417 915 430 918 q 394 903 404 912 q 379 875 385 893 q 373 828 373 858 l 373 538 q 413 540 396 538 q 442 546 429 542 q 467 558 456 550 q 488 577 477 566 q 538 647 507 597 q 606 773 568 697 q 663 877 637 834 q 719 947 690 920 q 781 987 748 974 q 856 1000 814 1000 q 940 975 915 1000 q 966 912 966 950 q 947 842 966 869 q 898 809 929 815 q 889 836 895 823 q 873 859 883 849 q 851 875 864 869 q 820 881 837 881 q 781 872 799 881 q 748 846 764 864 q 714 798 732 827 q 675 727 697 769 q 635 652 652 684 q 601 597 617 620 q 571 558 586 575 q 540 530 556 542 q 598 521 570 530 q 650 494 626 511 q 694 453 674 477 q 731 400 715 429 l 844 198 q 879 141 863 165 q 914 103 896 118 q 950 81 932 88 q 991 73 969 73 l 1000 73 l 1000 0 l 901 0 m 449 1089 q 482 1134 463 1108 q 519 1187 500 1160 q 555 1242 538 1215 q 582 1293 571 1269 l 801 1293 l 801 1278 q 758 1233 788 1260 q 691 1175 728 1205 q 615 1118 654 1146 q 543 1071 575 1089 l 449 1071 l 449 1089 "},"å":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 587 979 q 574 913 587 941 q 538 866 561 885 q 485 837 515 847 q 420 828 454 828 q 354 837 385 828 q 301 866 324 847 q 265 913 278 885 q 253 979 253 941 q 265 1044 253 1015 q 301 1091 278 1072 q 354 1120 324 1110 q 420 1130 385 1130 q 485 1120 454 1130 q 538 1091 515 1110 q 574 1044 561 1072 q 587 979 587 1015 m 502 979 q 495 1013 502 999 q 478 1036 489 1027 q 451 1049 466 1045 q 420 1053 436 1053 q 388 1049 403 1053 q 361 1036 373 1045 q 344 1013 350 1027 q 337 979 337 999 q 344 944 337 958 q 361 921 350 930 q 388 908 373 912 q 420 903 403 903 q 451 908 436 903 q 478 921 466 912 q 495 944 489 930 q 502 979 502 958 "},"Ϋ":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 m 272 1184 q 278 1224 272 1207 q 296 1251 285 1240 q 322 1265 307 1261 q 353 1270 337 1270 q 384 1265 370 1270 q 411 1251 399 1261 q 429 1224 422 1240 q 437 1184 437 1207 q 429 1144 437 1160 q 411 1117 422 1127 q 384 1102 399 1107 q 353 1098 370 1098 q 322 1102 337 1098 q 296 1117 307 1107 q 278 1144 285 1127 q 272 1184 272 1160 m 557 1184 q 563 1224 557 1207 q 582 1251 570 1240 q 608 1265 593 1261 q 640 1270 623 1270 q 670 1265 655 1270 q 696 1251 684 1261 q 714 1224 707 1240 q 722 1184 722 1207 q 714 1144 722 1160 q 696 1117 707 1127 q 670 1102 684 1107 q 640 1098 655 1098 q 608 1102 623 1098 q 582 1117 593 1107 q 563 1144 570 1127 q 557 1184 557 1160 "},"0":{"x_min":47,"x_max":730,"ha":777,"o":"m 730 497 q 710 288 730 382 q 650 126 691 193 q 544 22 609 59 q 388 -14 479 -14 q 228 22 293 -14 q 122 126 163 59 q 64 288 82 193 q 47 498 47 383 q 64 707 47 613 q 122 867 82 801 q 228 970 163 934 q 390 1006 294 1006 q 545 970 480 1006 q 650 867 609 934 q 710 707 691 801 q 730 497 730 613 m 262 497 q 267 319 262 397 q 286 187 272 241 q 325 104 300 133 q 388 76 349 76 q 452 104 427 76 q 490 187 476 133 q 509 319 504 241 q 515 497 515 397 q 509 674 515 596 q 491 805 504 752 q 452 887 477 859 q 390 915 428 915 q 326 887 351 915 q 287 805 301 859 q 267 674 272 752 q 262 497 262 596 "},"ō":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 623 842 l 220 842 l 220 951 l 623 951 l 623 842 "},"”":{"x_min":61.96875,"x_max":601,"ha":679,"o":"m 311 839 q 297 753 311 795 q 254 676 283 712 q 176 613 224 641 q 61 567 129 585 l 61 638 q 115 660 92 649 q 153 684 138 671 q 176 711 168 696 q 184 747 184 727 q 176 769 184 761 q 158 784 169 777 q 133 800 146 792 q 109 820 120 807 q 90 850 97 832 q 83 896 83 868 q 111 967 83 943 q 182 992 140 992 q 276 951 241 992 q 311 839 311 910 m 601 839 q 587 753 601 795 q 544 676 573 712 q 466 613 514 641 q 351 567 419 585 l 351 638 q 405 660 382 649 q 443 684 428 671 q 466 711 458 696 q 474 747 474 727 q 466 769 474 761 q 448 784 459 777 q 423 800 436 792 q 399 820 410 807 q 380 850 387 832 q 373 896 373 868 q 401 967 373 943 q 472 992 430 992 q 566 951 531 992 q 601 839 601 910 "},"ö":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 199 955 q 205 995 199 978 q 223 1022 212 1011 q 249 1036 234 1032 q 280 1041 264 1041 q 311 1036 297 1041 q 338 1022 326 1032 q 356 995 349 1011 q 364 955 364 978 q 356 915 364 931 q 338 888 349 898 q 311 873 326 878 q 280 869 297 869 q 249 873 264 869 q 223 888 234 878 q 205 915 212 898 q 199 955 199 931 m 484 955 q 490 995 484 978 q 509 1022 497 1011 q 535 1036 520 1032 q 567 1041 550 1041 q 597 1036 582 1041 q 623 1022 611 1032 q 641 995 634 1011 q 649 955 649 978 q 641 915 649 931 q 623 888 634 898 q 597 873 611 878 q 567 869 582 869 q 535 873 550 869 q 509 888 520 878 q 490 915 497 898 q 484 955 484 931 "},"ć":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 m 304 860 q 337 905 318 879 q 374 958 355 931 q 410 1013 393 986 q 437 1064 426 1040 l 656 1064 l 656 1049 q 613 1004 643 1031 q 546 946 583 976 q 470 889 509 917 q 398 842 430 860 l 304 842 l 304 860 "},"þ":{"x_min":18.703125,"x_max":831,"ha":896,"o":"m 34 -260 q 67 -257 49 -260 q 99 -244 85 -253 q 124 -217 114 -234 q 134 -169 134 -199 l 134 884 q 126 935 134 916 q 107 964 119 954 q 77 978 94 974 q 40 981 60 981 l 30 981 l 30 1055 l 344 1055 l 344 800 q 342 752 344 780 q 336 698 339 724 q 327 635 332 667 l 334 635 q 368 685 348 663 q 415 724 388 707 q 473 749 441 740 q 546 758 506 758 q 668 735 615 758 q 757 664 721 712 q 812 543 793 616 q 831 369 831 470 q 812 196 831 269 q 758 75 794 123 q 671 5 723 28 q 551 -17 619 -17 q 422 13 472 -17 q 343 94 373 43 l 334 94 q 339 31 336 62 q 343 -23 341 5 q 344 -74 344 -52 l 344 -169 q 354 -217 344 -199 q 379 -244 364 -234 q 411 -257 393 -253 q 443 -260 428 -260 l 473 -260 l 473 -334 l 18 -334 l 18 -260 l 34 -260 m 486 86 q 586 156 556 86 q 616 368 616 226 q 586 580 616 506 q 487 654 556 654 q 418 635 445 654 q 374 580 391 616 q 351 491 358 544 q 344 369 344 437 q 351 244 344 297 q 374 155 358 191 q 418 103 391 120 q 486 86 445 86 "},"]":{"x_min":51.453125,"x_max":436,"ha":575,"o":"m 436 1055 l 436 -178 l 51 -178 l 51 -104 l 111 -104 q 155 -101 134 -104 q 191 -87 176 -97 q 215 -56 206 -76 q 225 -4 225 -36 l 225 881 q 215 934 225 914 q 191 964 206 953 q 155 978 176 974 q 111 981 134 981 l 51 981 l 51 1055 l 436 1055 "},"А":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 "},"′":{"x_min":93,"x_max":310.03125,"ha":403,"o":"m 93 992 l 310 992 l 247 610 l 155 610 l 93 992 "},"Ы":{"x_min":38.453125,"x_max":1332.859375,"ha":1372,"o":"m 545 992 l 545 918 l 460 918 q 405 900 423 918 q 387 835 387 881 l 387 558 l 460 558 q 630 537 560 558 q 745 480 700 517 q 809 392 789 444 q 830 280 830 341 q 807 166 830 218 q 738 77 784 114 q 620 20 691 40 q 453 0 550 0 l 38 0 l 38 73 l 96 73 q 131 79 117 73 q 153 94 144 84 q 164 123 161 105 q 168 165 168 141 l 168 828 q 162 874 168 857 q 148 902 157 892 q 126 915 139 911 q 96 918 113 918 l 38 918 l 38 992 l 545 992 m 387 82 l 441 82 q 512 93 483 82 q 560 129 541 105 q 586 189 578 153 q 595 273 595 225 q 585 367 595 328 q 556 431 576 406 q 503 466 535 455 q 426 477 471 477 l 387 477 l 387 82 m 854 0 l 854 73 l 912 73 q 940 76 927 73 q 962 89 953 80 q 977 116 972 99 q 982 164 982 134 l 982 828 q 977 876 982 858 q 962 903 972 893 q 940 915 953 912 q 912 918 927 918 l 854 918 l 854 992 l 1332 992 l 1332 918 l 1274 918 q 1246 915 1259 918 q 1224 903 1233 912 q 1209 876 1214 893 q 1204 828 1204 858 l 1204 164 q 1209 116 1204 134 q 1224 89 1214 99 q 1246 76 1233 80 q 1274 73 1259 73 l 1332 73 l 1332 0 l 854 0 "},"ẁ":{"x_min":-4.40625,"x_max":1190.078125,"ha":1189,"o":"m 686 737 l 821 327 q 846 242 838 277 q 858 181 853 207 l 862 181 q 868 215 865 199 q 876 247 871 230 q 886 284 880 264 q 899 330 891 304 l 960 533 q 970 571 966 550 q 973 603 973 591 q 951 654 973 638 q 881 671 928 671 l 871 671 l 871 745 l 1190 745 l 1190 671 l 1172 671 q 1137 667 1152 671 q 1110 651 1122 662 q 1089 617 1099 639 q 1068 562 1078 596 l 888 0 l 739 0 l 587 461 l 427 0 l 276 0 l 98 597 q 81 633 90 619 q 61 656 72 648 q 34 667 49 664 q 0 671 20 671 l -4 671 l -4 745 l 402 745 l 402 671 l 384 671 q 321 659 342 671 q 300 612 300 647 q 304 584 300 601 q 312 553 308 568 l 363 372 q 376 320 370 347 q 388 269 382 294 q 398 221 393 244 q 405 181 402 199 l 409 181 q 425 253 415 216 q 454 341 436 290 l 595 737 l 686 737 m 632 842 q 560 889 600 860 q 483 946 520 917 q 416 1004 446 976 q 374 1049 386 1031 l 374 1064 l 591 1064 q 619 1013 602 1040 q 655 958 636 986 q 693 905 673 931 q 727 860 712 879 l 727 842 l 632 842 "},"ĭ":{"x_min":12,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 234 842 q 138 861 179 842 q 69 911 97 880 q 27 981 41 942 q 12 1060 13 1020 l 103 1060 q 149 987 115 1009 q 234 965 182 965 q 319 987 285 965 q 364 1060 353 1009 l 457 1060 q 441 981 455 1020 q 399 911 427 942 q 330 861 371 880 q 234 842 289 842 "},"8":{"x_min":41,"x_max":735,"ha":777,"o":"m 41 252 q 55 333 41 297 q 97 398 70 369 q 162 453 124 428 q 245 501 200 478 q 118 610 162 549 q 74 752 74 671 q 90 846 74 801 q 145 927 107 892 q 244 984 183 963 q 396 1006 306 1006 q 524 987 469 1006 q 617 936 580 969 q 673 859 654 904 q 692 762 692 815 q 678 689 692 720 q 641 631 665 657 q 582 582 616 604 q 504 537 547 560 q 610 476 566 507 q 682 411 654 445 q 722 341 709 378 q 735 262 735 304 q 710 145 735 196 q 640 58 686 93 q 529 4 595 23 q 379 -14 463 -14 q 228 7 292 -14 q 122 64 164 28 q 61 148 81 100 q 41 252 41 197 m 385 64 q 450 77 422 64 q 500 113 479 90 q 531 168 520 136 q 542 238 542 200 q 530 299 542 272 q 494 351 519 327 q 431 398 469 375 q 339 445 393 421 q 295 411 316 430 q 260 367 275 391 q 237 313 245 343 q 228 247 228 283 q 240 172 228 206 q 272 115 251 139 q 321 77 292 91 q 385 64 350 64 m 517 765 q 508 823 517 794 q 483 875 500 852 q 443 911 467 897 q 387 925 419 925 q 336 913 358 925 q 299 880 314 901 q 277 831 284 860 q 269 769 269 803 q 279 706 269 733 q 308 657 289 679 q 354 618 327 636 q 419 584 382 601 q 463 616 445 599 q 493 655 481 633 q 511 703 505 676 q 517 765 517 730 "},"R":{"x_min":38.453125,"x_max":987.734375,"ha":982,"o":"m 38 73 l 96 73 q 123 76 111 73 q 146 87 136 79 q 162 112 156 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 486 992 q 775 926 683 992 q 867 735 867 860 q 850 637 867 680 q 807 562 834 594 q 746 508 780 530 q 677 472 712 486 l 843 187 q 877 136 860 157 q 910 100 894 114 q 945 80 927 86 q 982 73 962 73 l 987 73 l 987 0 l 942 0 q 833 4 879 0 q 751 23 786 9 q 691 61 716 37 q 644 124 666 86 l 479 431 l 387 431 l 387 156 q 392 112 387 129 q 408 87 398 96 q 431 76 418 79 q 458 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 m 387 512 l 465 512 q 545 524 513 512 q 597 563 577 537 q 625 626 616 588 q 633 716 633 665 q 624 805 633 768 q 594 865 614 842 q 541 899 573 888 q 462 909 508 909 l 387 909 l 387 512 "},"Ż":{"x_min":58,"x_max":864,"ha":925,"o":"m 833 921 l 310 84 l 610 84 q 680 96 653 84 q 723 128 707 108 q 746 172 739 147 q 756 223 754 197 l 763 286 l 864 286 l 857 0 l 58 0 l 58 69 l 578 907 l 305 907 q 251 898 272 907 q 217 873 230 889 q 199 833 205 856 q 191 781 193 809 l 183 706 l 84 706 l 90 992 l 833 992 l 833 921 m 368 1198 q 377 1243 368 1224 q 402 1274 386 1262 q 439 1292 418 1286 q 486 1298 460 1298 q 531 1292 509 1298 q 569 1274 553 1286 q 595 1243 585 1262 q 605 1198 605 1224 q 595 1153 605 1172 q 569 1122 585 1134 q 531 1104 553 1110 q 486 1098 509 1098 q 439 1104 460 1098 q 402 1122 418 1110 q 377 1153 386 1134 q 368 1198 368 1172 "},"ħ":{"x_min":18.28125,"x_max":889.65625,"ha":926,"o":"m 139 876 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 876 l 565 876 l 565 802 l 349 802 l 349 784 q 348 726 349 757 q 344 669 346 695 q 339 608 341 638 l 351 608 q 395 670 372 647 q 445 703 418 692 q 501 717 471 714 q 563 721 530 721 q 659 705 616 721 q 731 657 701 689 q 776 574 760 624 q 792 453 792 523 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 l 581 415 q 575 494 581 459 q 556 553 569 529 q 521 590 543 577 q 470 602 500 602 q 412 585 435 602 q 375 537 389 567 q 356 469 362 508 q 349 387 349 430 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 802 l 18 802 l 18 876 l 139 876 "},"õ":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 538 974 q 565 980 553 974 q 586 996 577 986 q 599 1020 594 1006 q 606 1047 604 1033 l 697 1047 q 681 968 694 1005 q 645 902 667 930 q 591 858 622 874 q 523 842 560 842 q 455 855 486 842 q 399 885 425 869 q 350 916 373 902 q 305 929 328 929 q 278 923 290 929 q 257 907 266 917 q 244 883 249 897 q 237 856 239 870 l 147 856 q 162 935 149 898 q 199 1001 176 973 q 253 1045 222 1029 q 321 1062 284 1062 q 389 1048 359 1062 q 445 1018 419 1034 q 494 987 471 1001 q 538 974 517 974 "},"˙":{"x_min":113,"x_max":350.390625,"ha":452,"o":"m 113 969 q 122 1014 113 995 q 147 1045 131 1033 q 184 1063 163 1057 q 231 1069 205 1069 q 276 1063 254 1069 q 314 1045 298 1057 q 340 1014 330 1033 q 350 969 350 995 q 340 924 350 943 q 314 893 330 905 q 276 875 298 881 q 231 869 254 869 q 184 875 205 869 q 147 893 163 881 q 122 924 131 905 q 113 969 113 943 "},"ê":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 173 860 q 211 905 189 879 q 255 958 233 931 q 296 1013 276 986 q 326 1064 315 1040 l 513 1064 q 543 1013 524 1040 q 584 958 562 986 q 628 905 606 931 q 666 860 649 879 l 666 842 l 570 842 q 536 869 556 853 q 495 901 516 884 q 454 935 474 918 q 419 966 434 952 q 383 935 403 952 q 342 901 363 918 q 302 869 322 884 q 269 842 283 853 l 173 842 l 173 860 "},"″":{"x_min":93,"x_max":612.359375,"ha":705,"o":"m 396 992 l 612 992 l 563 610 l 471 610 l 396 992 m 93 992 l 310 992 l 247 610 l 155 610 l 93 992 "},"„":{"x_min":61.96875,"x_max":601,"ha":699,"o":"m 311 58 q 297 -27 311 14 q 254 -104 283 -68 q 176 -167 224 -139 q 61 -214 129 -195 l 61 -142 q 115 -120 92 -131 q 153 -96 138 -109 q 176 -69 168 -84 q 184 -33 184 -53 q 176 -12 184 -20 q 158 3 169 -3 q 133 19 146 11 q 109 39 120 26 q 90 69 97 51 q 83 115 83 87 q 111 186 83 162 q 182 211 140 211 q 276 170 241 211 q 311 58 311 129 m 601 58 q 587 -27 601 14 q 544 -104 573 -68 q 466 -167 514 -139 q 351 -214 419 -195 l 351 -142 q 405 -120 382 -131 q 443 -96 428 -109 q 466 -69 458 -84 q 474 -33 474 -53 q 466 -12 474 -20 q 448 3 459 -3 q 423 19 436 11 q 399 39 410 26 q 380 69 387 51 q 373 115 373 87 q 401 186 373 162 q 472 211 430 211 q 566 170 531 211 q 601 58 601 129 "},"ч":{"x_min":22.578125,"x_max":922.3125,"ha":946,"o":"m 463 0 l 463 73 l 487 73 q 530 76 510 73 q 564 89 549 80 q 587 117 579 98 q 596 166 596 136 l 596 342 q 529 304 561 321 q 466 275 498 287 q 400 256 434 263 q 324 250 365 250 q 240 263 277 250 q 177 300 202 276 q 138 359 151 325 q 125 433 125 392 l 125 576 q 98 649 125 627 q 26 671 71 671 l 22 671 l 22 745 l 430 745 l 430 671 l 428 671 q 396 667 412 671 q 366 654 380 664 q 345 625 353 643 q 336 577 336 607 l 336 454 q 358 383 336 405 q 425 362 381 362 q 466 365 447 362 q 504 375 484 368 q 546 394 524 382 q 596 421 568 405 l 596 576 q 588 623 596 605 q 568 652 581 641 q 539 667 556 662 q 503 671 522 671 l 501 671 l 501 745 l 922 745 l 922 671 l 906 671 q 868 667 886 671 q 836 652 850 662 q 814 624 822 642 q 807 578 807 606 l 807 166 q 814 120 807 138 q 836 92 822 102 q 868 77 850 82 q 906 73 886 73 l 922 73 l 922 0 l 463 0 "},"δ":{"x_min":65,"x_max":786,"ha":851,"o":"m 571 299 q 558 391 571 352 q 525 461 546 430 q 478 516 505 491 q 421 563 451 540 q 369 534 394 552 q 324 484 344 515 q 292 405 305 452 q 280 291 280 358 q 290 200 280 240 q 319 132 300 160 q 365 88 338 104 q 426 73 391 73 q 487 88 461 73 q 533 133 514 104 q 561 204 551 162 q 571 299 571 246 m 350 885 q 360 831 350 855 q 391 785 369 808 q 447 740 413 763 q 530 687 481 717 q 635 614 588 651 q 716 536 682 577 q 767 445 749 494 q 786 337 786 396 q 759 185 786 251 q 686 75 733 120 q 572 8 638 31 q 423 -14 505 -14 q 280 6 345 -14 q 166 67 214 27 q 91 164 118 106 q 65 296 65 221 q 85 420 65 368 q 143 510 106 472 q 232 573 181 548 q 344 615 283 598 q 281 667 310 640 q 229 725 251 694 q 194 790 207 755 q 182 866 182 825 q 203 952 182 915 q 262 1013 224 988 q 351 1050 299 1038 q 463 1063 402 1063 q 586 1050 535 1063 q 668 1017 636 1037 q 714 973 699 997 q 729 925 729 949 q 691 851 729 876 q 591 825 654 825 q 582 889 591 860 q 558 940 574 919 q 517 973 541 961 q 461 985 493 985 q 411 976 432 985 q 376 954 390 968 q 356 922 363 940 q 350 885 350 904 "},"Â":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 282 1089 q 320 1134 298 1108 q 364 1187 342 1160 q 405 1242 385 1215 q 435 1293 424 1269 l 622 1293 q 652 1242 633 1269 q 693 1187 671 1215 q 737 1134 715 1160 q 775 1089 758 1108 l 775 1071 l 679 1071 q 645 1098 665 1082 q 604 1130 625 1113 q 563 1164 583 1147 q 528 1195 543 1181 q 492 1164 512 1181 q 451 1130 472 1147 q 411 1098 431 1113 q 378 1071 392 1082 l 282 1071 l 282 1089 "},"Į":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 136 -180 q 149 -118 136 -147 q 186 -65 163 -89 q 238 -24 209 -41 q 300 0 268 -7 l 407 0 q 362 -20 385 -6 q 320 -53 339 -33 q 289 -100 302 -74 q 277 -160 277 -127 q 284 -193 277 -179 q 304 -215 291 -207 q 335 -229 317 -224 q 373 -233 352 -233 q 413 -230 392 -233 q 461 -222 435 -228 l 461 -311 q 434 -321 450 -317 q 401 -327 418 -325 q 369 -332 385 -330 q 342 -334 353 -334 q 188 -297 241 -334 q 136 -180 136 -260 "},"ω":{"x_min":65,"x_max":1046,"ha":1111,"o":"m 761 -14 q 686 -3 718 -14 q 630 25 654 6 q 587 71 605 44 q 554 133 569 99 q 521 71 539 99 q 479 25 503 44 q 423 -3 455 6 q 349 -14 392 -14 q 139 74 213 -14 q 65 341 65 163 q 78 465 65 407 q 118 577 92 524 q 180 678 144 630 q 262 770 216 725 l 360 706 q 323 630 339 669 q 297 548 307 592 q 283 453 288 504 q 279 338 279 402 q 289 223 279 271 q 317 146 300 175 q 356 103 334 116 q 398 89 377 89 q 466 120 439 89 q 503 220 493 151 q 486 278 493 253 q 474 326 478 304 q 467 369 469 348 q 465 412 465 390 q 488 499 465 473 q 555 526 511 526 q 622 499 599 526 q 645 412 645 473 q 643 369 645 390 q 636 327 640 349 q 624 280 631 306 q 607 222 617 254 q 644 121 617 152 q 712 89 672 89 q 755 103 734 89 q 794 146 776 116 q 821 223 811 175 q 832 338 832 271 q 827 453 832 402 q 813 548 822 504 q 787 630 803 592 q 750 706 772 669 l 848 770 q 930 678 894 725 q 992 577 967 630 q 1032 465 1018 524 q 1046 341 1046 407 q 972 74 1046 163 q 761 -14 898 -14 "},"Ţ":{"x_min":13,"x_max":893,"ha":907,"o":"m 563 164 q 568 116 563 134 q 584 89 574 99 q 606 76 593 80 q 634 73 619 73 l 692 73 l 692 0 l 213 0 l 213 73 l 271 73 q 300 76 287 73 q 322 89 313 80 q 337 116 332 99 q 343 164 343 134 l 343 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 886 992 l 893 723 l 800 723 l 789 809 q 780 850 787 832 q 761 881 774 868 q 726 900 747 893 q 674 907 705 907 l 563 907 l 563 164 m 328 -289 q 342 -242 334 -268 q 358 -189 350 -216 q 372 -134 365 -161 q 382 -85 378 -108 l 544 -85 l 544 -98 q 519 -147 534 -120 q 485 -202 503 -174 q 448 -257 467 -230 q 411 -307 429 -285 l 328 -307 l 328 -289 "},"´":{"x_min":224,"x_max":576,"ha":802,"o":"m 224 860 q 257 905 238 879 q 294 958 275 931 q 330 1013 313 986 q 357 1064 346 1040 l 576 1064 l 576 1049 q 533 1004 563 1031 q 466 946 503 976 q 390 889 429 917 q 318 842 350 860 l 224 842 l 224 860 "},"Ĉ":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 m 280 1089 q 318 1134 296 1108 q 362 1187 340 1160 q 403 1242 383 1215 q 433 1293 422 1269 l 620 1293 q 650 1242 631 1269 q 691 1187 669 1215 q 735 1134 713 1160 q 773 1089 756 1108 l 773 1071 l 677 1071 q 643 1098 663 1082 q 602 1130 623 1113 q 561 1164 581 1147 q 526 1195 541 1181 q 490 1164 510 1181 q 449 1130 470 1147 q 409 1098 429 1113 q 376 1071 390 1082 l 280 1071 l 280 1089 "},"И":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 749 685 l 387 220 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 339 l 749 805 l 749 828 q 743 876 749 858 q 728 903 738 893 q 705 915 718 912 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 903 999 912 q 974 876 979 893 q 969 828 969 858 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 685 "},"Љ":{"x_min":0,"x_max":1285,"ha":1327,"o":"m 441 918 q 429 736 437 831 q 408 546 420 640 q 379 365 395 452 q 343 210 363 279 q 299 104 324 146 q 247 36 275 61 q 184 0 218 11 q 111 -10 149 -10 q 30 16 61 -10 q 0 93 0 43 q 5 132 0 114 q 21 161 11 149 q 42 180 30 173 q 67 186 54 186 q 84 140 67 159 q 128 121 101 121 q 171 130 151 121 q 207 158 190 138 q 238 214 224 179 q 267 302 253 249 q 290 402 279 347 q 308 514 300 457 q 323 627 317 571 q 334 730 330 683 q 340 812 338 777 q 343 863 343 847 q 334 893 343 882 q 310 910 325 904 q 274 917 294 916 q 231 918 254 918 l 210 918 l 210 992 l 1000 992 l 1000 918 l 915 918 q 860 900 878 918 q 842 835 842 881 l 842 558 l 916 558 q 1085 537 1015 558 q 1199 480 1155 517 q 1264 392 1244 444 q 1285 280 1285 341 q 1262 166 1285 218 q 1193 77 1239 114 q 1075 20 1146 40 q 908 0 1004 0 l 493 0 l 493 73 l 551 73 q 586 79 572 73 q 608 94 599 84 q 619 123 616 105 q 623 165 623 141 l 623 918 l 441 918 m 842 82 l 896 82 q 967 93 938 82 q 1015 129 997 105 q 1042 189 1034 153 q 1050 273 1050 225 q 1040 367 1050 328 q 1010 431 1031 406 q 958 466 990 455 q 880 477 926 477 l 842 477 l 842 82 "},"р":{"x_min":18.703125,"x_max":831,"ha":896,"o":"m 34 -260 q 67 -257 50 -260 q 99 -244 85 -253 q 124 -217 114 -234 q 134 -169 134 -199 l 134 574 q 126 624 134 605 q 107 654 119 643 q 77 667 94 664 q 40 671 60 671 l 30 671 l 30 745 l 302 745 l 327 635 l 334 635 q 368 685 348 663 q 415 724 388 707 q 473 749 441 740 q 546 758 506 758 q 668 735 615 758 q 757 664 721 712 q 812 543 793 616 q 831 369 831 470 q 812 196 831 269 q 758 75 794 123 q 671 5 723 28 q 551 -17 619 -17 q 422 13 472 -17 q 343 94 373 43 l 334 94 q 339 31 336 62 q 343 -23 341 5 q 344 -74 344 -52 l 344 -169 q 354 -217 344 -199 q 379 -244 364 -234 q 411 -257 393 -253 q 443 -260 428 -260 l 473 -260 l 473 -334 l 18 -334 l 18 -260 l 34 -260 m 486 86 q 586 156 556 86 q 616 368 616 226 q 586 580 616 506 q 487 654 556 654 q 418 635 446 654 q 374 580 391 616 q 351 491 358 544 q 344 369 344 437 q 351 244 344 297 q 374 155 358 191 q 418 103 391 120 q 486 86 445 86 "},"Ω":{"x_min":61,"x_max":1061,"ha":1122,"o":"m 89 625 q 118 782 89 712 q 206 902 147 852 q 354 979 265 952 q 563 1007 443 1007 q 763 979 676 1007 q 911 902 851 952 q 1002 782 971 852 q 1033 625 1033 712 q 947 386 1033 478 q 693 265 861 295 l 690 148 l 829 148 q 890 153 865 148 q 931 168 915 158 q 958 195 948 179 q 973 234 968 211 l 984 280 l 1061 280 l 1050 0 l 603 0 l 612 335 q 696 363 661 341 q 752 423 730 386 q 782 510 773 460 q 792 625 792 561 q 780 748 792 694 q 740 840 767 802 q 669 897 713 877 q 562 916 625 916 q 453 897 498 916 q 381 840 408 877 q 340 748 353 802 q 327 625 327 694 q 337 510 327 561 q 368 423 347 460 q 424 363 390 386 q 508 335 459 341 l 518 0 l 70 0 l 61 278 l 137 278 l 148 231 q 162 192 153 208 q 188 165 172 176 q 230 150 205 155 q 291 145 255 145 l 431 145 l 427 267 q 174 388 259 296 q 89 625 89 479 "},"т":{"x_min":28,"x_max":760,"ha":787,"o":"m 751 745 l 760 508 l 664 508 l 658 553 q 649 607 654 585 q 634 641 643 629 q 612 660 624 654 q 579 665 599 665 l 499 665 l 499 166 q 507 121 499 139 q 527 92 514 103 q 557 77 540 82 q 592 73 574 73 l 608 73 l 608 0 l 173 0 l 173 73 l 189 73 q 227 77 209 73 q 259 92 245 82 q 280 121 272 103 q 289 166 289 139 l 289 665 l 208 665 q 176 660 189 665 q 153 641 162 654 q 138 607 144 629 q 129 553 133 585 l 123 508 l 28 508 l 36 745 l 751 745 "},"П":{"x_min":38.453125,"x_max":1084.875,"ha":1124,"o":"m 606 0 l 606 73 l 665 73 q 692 76 679 73 q 715 89 705 80 q 730 116 725 99 q 736 164 736 134 l 736 907 l 387 907 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 1084 992 l 1084 918 l 1026 918 q 999 915 1012 918 q 976 903 986 912 q 961 876 966 893 q 956 828 956 858 l 956 156 q 961 112 956 129 q 977 87 967 96 q 999 76 987 79 q 1026 73 1012 73 l 1084 73 l 1084 0 l 606 0 "},"Ö":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 314 1184 q 320 1224 314 1207 q 338 1251 327 1240 q 364 1265 349 1261 q 395 1270 379 1270 q 426 1265 412 1270 q 453 1251 441 1261 q 471 1224 464 1240 q 479 1184 479 1207 q 471 1144 479 1160 q 453 1117 464 1127 q 426 1102 441 1107 q 395 1098 412 1098 q 364 1102 379 1098 q 338 1117 349 1107 q 320 1144 327 1127 q 314 1184 314 1160 m 599 1184 q 605 1224 599 1207 q 624 1251 612 1240 q 650 1265 635 1261 q 682 1270 665 1270 q 712 1265 697 1270 q 738 1251 726 1261 q 756 1224 749 1240 q 764 1184 764 1207 q 756 1144 764 1160 q 738 1117 749 1127 q 712 1102 726 1107 q 682 1098 697 1098 q 650 1102 665 1098 q 624 1117 635 1107 q 605 1144 612 1127 q 599 1184 599 1160 "},"z":{"x_min":25,"x_max":694,"ha":735,"o":"m 511 94 q 547 100 532 94 q 572 120 562 106 q 590 155 583 133 q 603 207 597 176 l 611 252 l 694 252 l 687 0 l 25 0 l 25 56 l 435 650 l 232 650 q 204 645 216 650 q 184 630 193 641 q 167 600 175 618 q 152 553 160 581 l 144 520 l 61 520 l 77 745 l 678 745 l 678 685 l 266 94 l 511 94 "},"™":{"x_min":37.21875,"x_max":1101.828125,"ha":1160,"o":"m 896 512 l 896 549 q 934 556 920 549 q 950 586 948 562 l 950 896 l 792 512 l 744 512 l 587 897 l 587 591 q 601 556 587 564 q 642 549 615 549 l 642 512 l 474 512 l 474 549 l 488 549 q 525 556 509 549 q 543 587 541 562 l 543 914 q 537 935 542 927 q 526 947 533 943 q 508 952 518 951 q 488 953 498 953 l 474 953 l 474 992 l 634 992 l 787 607 l 945 992 l 1101 992 l 1101 953 l 1086 953 q 1065 951 1075 953 q 1048 946 1055 950 q 1037 934 1041 942 q 1034 911 1034 925 l 1034 592 q 1037 569 1034 577 q 1048 556 1041 561 q 1065 550 1055 552 q 1086 549 1075 549 l 1101 549 l 1101 512 l 896 512 m 286 592 q 290 569 286 577 q 302 556 294 561 q 319 550 309 552 q 339 549 328 549 l 360 549 l 360 512 l 124 512 l 124 549 l 148 549 q 168 550 158 549 q 184 556 177 552 q 195 567 191 560 q 200 587 200 575 l 200 947 l 138 947 q 113 943 124 947 q 97 933 103 939 q 88 917 91 926 q 83 899 84 909 l 77 865 l 37 865 l 41 992 l 446 992 l 451 865 l 410 865 l 405 899 q 391 933 402 918 q 349 947 379 947 l 286 947 l 286 592 "},"Θ":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 433 638 l 440 611 q 449 584 444 596 q 463 564 453 573 q 492 552 474 556 q 541 548 510 548 l 548 548 q 594 552 576 548 q 624 565 612 556 q 642 585 636 573 q 652 611 648 597 l 659 638 l 731 638 l 731 373 l 659 373 l 652 399 q 642 425 648 413 q 624 445 636 437 q 594 458 612 454 q 548 463 576 463 l 541 463 q 492 458 510 463 q 463 446 474 454 q 449 426 453 438 q 440 399 444 414 l 433 373 l 361 373 l 361 638 l 433 638 m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 "},"Ř":{"x_min":38.453125,"x_max":987.734375,"ha":982,"o":"m 38 73 l 96 73 q 123 76 111 73 q 146 87 136 79 q 162 112 156 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 486 992 q 775 926 683 992 q 867 735 867 860 q 850 637 867 680 q 807 562 834 594 q 746 508 780 530 q 677 472 712 486 l 843 187 q 877 136 860 157 q 910 100 894 114 q 945 80 927 86 q 982 73 962 73 l 987 73 l 987 0 l 942 0 q 833 4 879 0 q 751 23 786 9 q 691 61 716 37 q 644 124 666 86 l 479 431 l 387 431 l 387 156 q 392 112 387 129 q 408 87 398 96 q 431 76 418 79 q 458 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 m 387 512 l 465 512 q 545 524 513 512 q 597 563 577 537 q 625 626 616 588 q 633 716 633 665 q 624 805 633 768 q 594 865 614 842 q 541 899 573 888 q 462 909 508 909 l 387 909 l 387 512 m 209 1293 l 305 1293 q 338 1265 319 1281 q 378 1233 358 1250 q 419 1199 399 1215 q 455 1167 439 1182 q 490 1199 470 1182 q 531 1233 510 1215 q 572 1265 552 1250 q 606 1293 592 1281 l 702 1293 l 702 1274 q 664 1229 685 1255 q 620 1176 642 1203 q 579 1121 598 1148 q 549 1071 560 1094 l 362 1071 q 332 1121 351 1094 q 291 1176 312 1148 q 247 1229 269 1203 q 209 1274 225 1255 l 209 1293 "},"Ň":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 813 0 l 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 298 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 0 l 813 0 m 330 1293 l 426 1293 q 459 1265 440 1281 q 499 1233 479 1250 q 540 1199 520 1215 q 576 1167 560 1182 q 611 1199 591 1182 q 652 1233 631 1215 q 693 1265 673 1250 q 727 1293 713 1281 l 823 1293 l 823 1274 q 785 1229 806 1255 q 741 1176 763 1203 q 700 1121 719 1148 q 670 1071 681 1094 l 483 1071 q 453 1121 472 1094 q 412 1176 433 1148 q 368 1229 390 1203 q 330 1274 346 1255 l 330 1293 "},"É":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 355 1089 q 388 1134 369 1108 q 425 1187 406 1160 q 461 1242 444 1215 q 488 1293 477 1269 l 707 1293 l 707 1278 q 664 1233 694 1260 q 597 1175 634 1205 q 521 1118 560 1146 q 449 1071 481 1089 l 355 1071 l 355 1089 "},"и":{"x_min":23.703125,"x_max":936.296875,"ha":960,"o":"m 821 164 q 830 116 821 134 q 855 89 840 99 q 887 76 869 80 q 920 73 905 73 l 936 73 l 936 0 l 515 0 l 515 73 l 518 73 q 548 76 532 73 q 578 89 564 80 q 600 116 591 99 q 610 164 610 134 l 610 462 l 349 177 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 444 73 l 444 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 444 745 l 444 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 645 q 349 580 349 610 l 349 284 l 610 569 l 610 580 q 600 628 610 610 q 578 655 591 645 q 548 668 564 664 q 518 671 532 671 l 515 671 l 515 745 l 936 745 l 936 671 l 920 671 q 887 668 905 671 q 855 655 869 664 q 830 628 840 645 q 821 580 821 610 l 821 164 "},"³":{"x_min":54,"x_max":497,"ha":555,"o":"m 324 854 q 309 920 324 897 q 259 943 295 943 q 223 933 237 943 q 200 906 208 923 q 187 868 191 890 q 184 822 184 846 q 134 824 156 822 q 96 834 111 827 q 71 852 80 840 q 63 881 63 863 q 76 930 63 907 q 114 969 89 953 q 176 996 139 986 q 262 1006 214 1006 q 348 996 310 1006 q 415 969 387 987 q 458 926 443 951 q 473 868 473 900 q 435 768 473 807 q 331 714 397 730 l 331 706 q 392 694 362 702 q 445 672 422 687 q 482 633 468 657 q 497 571 497 609 q 471 485 497 520 q 405 429 445 450 q 318 398 366 407 q 229 389 271 389 q 126 399 172 389 q 54 422 81 409 l 54 494 q 87 482 68 488 q 127 471 106 476 q 170 463 148 466 q 212 460 191 460 q 315 486 278 460 q 352 574 352 513 q 314 645 352 620 q 201 670 277 670 l 155 670 l 155 736 l 201 736 q 249 744 226 736 q 288 768 272 752 q 314 806 305 784 q 324 854 324 828 "},"[":{"x_min":139,"x_max":523.5625,"ha":575,"o":"m 139 -178 l 139 1055 l 523 1055 l 523 981 l 463 981 q 419 978 440 981 q 383 964 398 974 q 359 934 368 953 q 349 881 349 914 l 349 -4 q 359 -56 349 -36 q 383 -87 368 -76 q 419 -101 398 -97 q 463 -104 440 -104 l 523 -104 l 523 -178 l 139 -178 "},"ζ":{"x_min":65,"x_max":718,"ha":692,"o":"m 65 283 q 87 455 65 369 q 152 621 110 540 q 255 775 194 701 q 391 909 315 848 q 321 924 357 913 q 250 952 285 935 q 180 988 214 968 q 115 1031 145 1008 l 165 1101 q 227 1058 195 1078 q 296 1022 260 1038 q 371 995 332 1006 q 455 980 411 984 q 492 1008 471 994 q 537 1035 513 1023 q 586 1055 561 1047 q 637 1064 611 1064 q 696 1047 675 1064 q 718 1000 718 1030 q 707 953 718 974 q 673 917 696 932 q 613 893 650 901 q 524 884 576 884 q 499 884 513 884 q 473 886 486 884 q 385 749 421 819 q 325 607 348 679 q 290 463 301 535 q 279 319 279 390 q 291 229 279 262 q 329 175 303 196 q 395 143 355 155 q 492 118 435 131 q 615 58 574 99 q 657 -50 657 17 q 639 -128 657 -90 q 586 -196 622 -165 q 495 -249 550 -227 q 365 -282 440 -271 l 365 -209 q 419 -190 397 -201 q 453 -167 440 -180 q 472 -138 467 -153 q 477 -104 477 -122 q 470 -69 477 -84 q 444 -43 463 -54 q 392 -23 425 -32 q 309 -3 359 -14 q 204 28 249 7 q 127 84 158 50 q 80 168 96 119 q 65 283 65 217 "},"∏":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 618 -334 l 618 -260 l 678 -260 q 705 -257 692 -260 q 728 -244 718 -253 q 743 -217 738 -234 q 749 -169 749 -199 l 749 907 l 387 907 l 387 -169 q 392 -217 387 -199 q 408 -244 398 -234 q 430 -257 417 -253 q 458 -260 443 -260 l 517 -260 l 517 -334 l 38 -334 l 38 -260 l 96 -260 q 124 -257 111 -260 q 147 -244 137 -253 q 162 -217 157 -234 q 168 -169 168 -199 l 168 833 q 161 878 167 861 q 145 903 155 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 903 999 912 q 974 875 979 893 q 969 828 969 858 l 969 -176 q 976 -221 970 -204 q 991 -246 981 -237 q 1013 -257 1000 -254 q 1039 -260 1025 -260 l 1097 -260 l 1097 -334 l 618 -334 "},"Έ":{"x_min":-52,"x_max":1033,"ha":1076,"o":"m 558 84 l 836 84 q 872 92 857 84 q 898 114 887 100 q 915 148 909 128 q 925 190 922 167 l 936 256 l 1033 256 l 1022 0 l 208 0 l 208 73 l 266 73 q 294 76 281 73 q 317 87 307 79 q 332 112 327 96 q 338 156 338 129 l 338 828 q 332 876 338 858 q 317 903 327 893 q 295 915 308 912 q 266 918 282 918 l 208 918 l 208 992 l 979 992 l 985 736 l 888 736 l 881 801 q 855 880 875 852 q 792 907 835 907 l 558 907 l 558 560 l 888 560 l 888 476 l 558 476 l 558 84 m -52 788 q -37 835 -45 809 q -22 888 -30 861 q -8 943 -15 916 q 1 993 -2 969 l 191 993 l 191 978 q 164 930 181 957 q 128 875 148 903 q 86 820 108 847 q 44 770 64 793 l -52 770 l -52 788 "},"Ρ":{"x_min":38.453125,"x_max":844,"ha":886,"o":"m 844 697 q 822 577 844 635 q 751 475 800 519 q 625 405 702 431 q 434 379 547 379 l 387 379 l 387 156 q 393 112 387 129 q 409 87 399 96 q 433 76 419 79 q 460 73 446 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 464 992 q 632 971 561 992 q 750 912 703 951 q 820 820 797 874 q 844 697 844 766 m 387 460 l 420 460 q 508 472 472 460 q 566 513 544 485 q 600 585 589 541 q 610 692 610 629 q 601 788 610 747 q 572 856 592 829 q 520 896 552 883 q 441 909 488 909 l 387 909 l 387 460 "},"ğ":{"x_min":3,"x_max":772,"ha":778,"o":"m 772 717 q 767 687 772 702 q 751 662 762 672 q 720 644 740 651 q 672 638 701 638 q 668 663 672 652 q 656 681 664 674 q 639 693 649 689 q 619 696 630 696 q 594 692 608 696 q 574 681 581 687 q 600 646 588 666 q 622 603 612 626 q 636 555 631 580 q 642 504 642 530 q 625 408 642 452 q 574 331 608 363 q 486 280 539 298 q 361 262 433 262 q 342 262 353 262 q 319 263 330 262 q 297 264 307 263 q 281 266 286 265 q 263 254 272 261 q 246 238 253 247 q 235 218 239 229 q 230 195 230 207 q 248 161 230 172 q 295 151 266 151 l 464 151 q 583 136 533 151 q 666 94 633 121 q 715 27 699 67 q 731 -61 731 -11 q 706 -176 731 -125 q 632 -261 682 -226 q 506 -315 582 -296 q 327 -334 431 -334 q 83 -284 163 -334 q 3 -140 3 -235 q 51 -26 3 -66 q 190 20 99 13 q 153 39 171 28 q 120 65 135 49 q 97 100 106 80 q 89 144 89 119 q 98 186 89 167 q 123 224 107 206 q 162 258 139 242 q 212 289 185 274 q 156 320 182 300 q 111 366 130 339 q 81 428 92 393 q 71 504 71 462 q 141 694 71 627 q 361 762 212 762 q 453 749 410 762 q 526 719 495 736 q 552 745 538 731 q 583 770 566 759 q 623 789 601 782 q 671 797 644 797 q 715 790 696 797 q 746 773 733 784 q 765 748 759 762 q 772 717 772 733 m 167 -137 q 208 -223 167 -195 q 330 -250 250 -250 q 508 -215 452 -250 q 564 -111 564 -180 q 536 -49 564 -67 q 452 -32 508 -32 l 290 -32 q 247 -35 269 -32 q 208 -51 226 -39 q 178 -83 190 -62 q 167 -137 167 -104 m 260 504 q 265 438 260 468 q 281 388 270 409 q 311 355 293 367 q 357 344 330 344 q 403 355 384 344 q 432 387 421 366 q 447 439 443 409 q 452 506 452 469 q 447 577 452 545 q 431 631 442 608 q 401 666 420 653 q 355 678 383 678 q 310 665 328 678 q 280 629 292 652 q 264 574 269 606 q 260 504 260 542 m 357 842 q 261 861 302 842 q 192 911 220 880 q 150 981 164 942 q 135 1060 136 1020 l 226 1060 q 272 987 238 1009 q 357 965 305 965 q 442 987 408 965 q 487 1060 476 1009 l 580 1060 q 564 981 578 1020 q 522 911 550 942 q 453 861 494 880 q 357 842 412 842 "},"ª":{"x_min":40,"x_max":553.6875,"ha":583,"o":"m 200 672 q 215 620 200 635 q 252 606 231 606 q 316 632 295 606 q 337 701 337 659 l 337 758 l 305 757 q 224 733 248 755 q 200 672 200 712 m 281 938 q 254 932 264 938 q 238 913 244 925 q 231 886 233 902 q 229 852 229 870 q 117 866 157 852 q 77 912 77 880 q 94 952 77 936 q 138 979 110 969 q 204 994 166 989 q 284 999 241 999 q 441 966 389 999 q 494 854 494 933 l 494 649 q 507 607 494 618 q 553 597 520 597 l 553 536 l 391 536 l 357 604 l 348 604 q 320 575 336 589 q 285 551 304 561 q 242 534 266 540 q 191 528 219 528 q 80 563 121 528 q 40 669 40 599 q 98 771 40 739 q 275 810 156 804 l 337 813 l 337 850 q 335 886 337 869 q 327 914 333 902 q 310 932 321 925 q 281 938 300 938 "},"ї":{"x_min":0,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 0 955 q 6 995 0 978 q 24 1022 13 1011 q 50 1036 35 1032 q 81 1041 65 1041 q 112 1036 98 1041 q 139 1022 127 1032 q 157 995 150 1011 q 165 955 165 978 q 157 915 165 931 q 139 888 150 898 q 112 873 127 878 q 81 869 98 869 q 50 873 65 869 q 24 888 35 878 q 6 915 13 898 q 0 955 0 931 m 285 955 q 291 995 285 978 q 310 1022 298 1011 q 336 1036 321 1032 q 368 1041 351 1041 q 398 1036 383 1041 q 424 1022 412 1032 q 442 995 435 1011 q 450 955 450 978 q 442 915 450 931 q 424 888 435 898 q 398 873 412 878 q 368 869 383 869 q 336 873 351 869 q 310 888 321 878 q 291 915 298 898 q 285 955 285 931 "},"T":{"x_min":13,"x_max":893,"ha":907,"o":"m 563 164 q 568 116 563 134 q 584 89 574 99 q 606 76 593 80 q 634 73 619 73 l 692 73 l 692 0 l 213 0 l 213 73 l 271 73 q 300 76 287 73 q 322 89 313 80 q 337 116 332 99 q 343 164 343 134 l 343 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 886 992 l 893 723 l 800 723 l 789 809 q 780 850 787 832 q 761 881 774 868 q 726 900 747 893 q 674 907 705 907 l 563 907 l 563 164 "},"š":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 m 93 1064 l 189 1064 q 222 1036 203 1052 q 262 1004 242 1021 q 303 970 283 986 q 339 938 323 953 q 374 970 354 953 q 415 1004 394 986 q 456 1036 436 1021 q 490 1064 476 1052 l 586 1064 l 586 1045 q 548 1000 569 1026 q 504 947 526 974 q 463 892 482 919 q 433 842 444 865 l 246 842 q 216 892 235 865 q 175 947 196 919 q 131 1000 153 974 q 93 1045 109 1026 l 93 1064 "},"є":{"x_min":65,"x_max":681.03125,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 411 677 437 677 q 359 664 382 677 q 318 620 335 651 q 291 537 301 589 q 279 407 281 484 l 520 407 l 520 318 l 280 318 q 325 146 286 202 q 444 89 364 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 "},"Þ":{"x_min":38.453125,"x_max":844,"ha":886,"o":"m 387 278 l 420 278 q 508 290 472 278 q 566 331 544 303 q 600 403 589 359 q 610 510 610 447 q 601 606 610 565 q 572 674 592 647 q 520 714 552 701 q 441 727 488 727 l 387 727 l 387 278 m 844 515 q 822 395 844 453 q 751 293 800 337 q 625 223 702 249 q 434 197 547 197 l 387 197 l 387 156 q 394 112 388 129 q 410 87 400 96 q 433 76 420 79 q 460 73 446 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 460 918 q 433 916 446 918 q 409 904 419 913 q 393 879 399 895 q 387 835 387 863 l 387 810 l 465 810 q 632 787 561 808 q 750 729 703 767 q 820 637 797 691 q 844 515 844 584 "},"j":{"x_min":-27.84375,"x_max":358.078125,"ha":480,"o":"m 349 745 l 349 -10 q 323 -166 349 -104 q 251 -265 297 -228 q 140 -318 204 -302 q 0 -334 76 -334 l -27 -334 l -27 -247 l -18 -247 q 49 -235 19 -247 q 98 -194 78 -223 q 128 -118 118 -166 q 139 0 139 -71 l 139 579 q 130 627 139 609 q 106 655 121 645 q 70 668 90 664 q 27 671 50 671 l 23 671 l 23 745 l 349 745 m 120 970 q 129 1015 120 996 q 154 1046 139 1034 q 192 1064 170 1058 q 238 1070 213 1070 q 284 1064 262 1070 q 322 1046 305 1058 q 348 1015 338 1034 q 358 970 358 996 q 348 925 358 944 q 322 894 338 906 q 284 876 305 882 q 238 870 262 870 q 192 876 213 870 q 154 894 170 882 q 129 925 139 906 q 120 970 120 944 "},"Σ":{"x_min":32,"x_max":824,"ha":882,"o":"m 602 169 q 657 179 634 169 q 696 206 680 189 q 720 248 711 224 q 732 301 729 272 l 737 343 l 824 343 l 817 0 l 32 0 l 32 86 l 318 479 l 63 937 l 63 992 l 756 992 l 763 735 l 676 735 l 670 808 q 637 881 665 855 q 547 907 610 907 l 281 907 l 474 558 l 474 537 l 200 169 l 602 169 "},"1":{"x_min":58.234375,"x_max":707.96875,"ha":777,"o":"m 134 0 l 134 73 l 248 73 q 279 78 266 73 q 301 92 292 82 q 313 120 309 103 q 318 164 318 137 l 318 860 q 268 801 291 827 q 223 755 244 774 q 180 726 201 736 q 138 716 159 716 q 107 723 121 716 q 81 743 92 730 q 64 776 71 757 q 58 818 58 795 q 102 831 79 823 q 151 851 125 839 q 207 882 177 864 q 271 925 237 900 l 369 997 l 524 997 l 524 164 q 527 125 524 142 q 538 96 530 108 q 560 79 546 85 q 596 73 574 73 l 707 73 l 707 0 l 134 0 "},"ϒ":{"x_min":0.296875,"x_max":1008.8125,"ha":1009,"o":"m 595 160 q 601 112 595 129 q 617 86 607 95 q 642 75 628 78 q 672 73 656 73 l 740 73 l 740 0 l 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 78 q 367 111 361 94 q 374 158 374 128 l 374 273 q 362 364 374 315 q 332 462 350 412 q 292 562 315 512 q 247 654 269 611 q 205 730 225 696 q 173 785 186 764 q 137 839 156 814 q 99 881 118 863 q 59 908 79 899 q 18 918 39 918 l 0 918 l 0 992 l 158 992 q 247 983 209 992 q 316 952 285 974 q 373 895 347 931 q 425 804 399 859 q 466 714 448 755 q 497 636 483 673 q 522 564 511 599 q 543 496 533 530 q 566 581 553 538 q 594 665 579 624 q 624 745 609 707 q 656 818 640 784 q 707 911 681 875 q 760 967 732 947 q 817 994 787 987 q 884 1002 848 1002 q 939 995 916 1002 q 978 975 963 987 q 1001 945 993 962 q 1008 909 1008 928 q 988 844 1008 869 q 929 812 968 819 q 908 860 924 840 q 863 880 892 880 q 827 873 844 880 q 792 847 810 865 q 755 796 774 828 q 715 717 736 765 q 692 662 705 694 q 666 595 679 631 q 640 519 652 559 q 617 440 627 479 q 601 364 607 401 q 595 295 595 327 l 595 160 "},"ℓ":{"x_min":27,"x_max":666,"ha":695,"o":"m 475 73 q 548 111 522 73 q 583 215 574 150 l 666 215 q 640 115 657 158 q 595 43 623 72 q 525 -1 566 13 q 425 -16 483 -16 q 305 1 354 -16 q 226 52 256 19 q 183 135 196 86 q 170 247 170 183 l 170 349 q 99 326 135 337 q 27 306 63 316 l 27 381 q 100 403 65 392 q 170 426 136 414 l 170 776 q 228 957 170 897 q 410 1018 287 1018 q 508 1003 466 1018 q 575 959 549 988 q 614 888 601 930 q 627 792 627 846 q 608 658 627 718 q 556 552 589 599 q 478 468 523 505 q 380 404 433 432 l 380 227 q 387 154 380 183 q 406 107 393 124 q 435 81 418 89 q 475 73 453 73 m 542 793 q 456 938 542 938 q 416 927 431 938 q 393 895 401 915 q 383 848 385 875 q 380 791 380 821 l 380 488 q 444 532 415 506 q 496 596 474 559 q 530 682 517 634 q 542 793 542 731 "},"ĉ":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 m 154 860 q 192 905 170 879 q 236 958 214 931 q 277 1013 257 986 q 307 1064 296 1040 l 494 1064 q 524 1013 505 1040 q 565 958 543 986 q 609 905 587 931 q 647 860 630 879 l 647 842 l 551 842 q 517 869 537 853 q 476 901 497 884 q 435 935 455 918 q 400 966 415 952 q 364 935 384 952 q 323 901 344 918 q 283 869 303 884 q 250 842 264 853 l 154 842 l 154 860 "},"ī":{"x_min":21,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 424 842 l 21 842 l 21 951 l 424 951 l 424 842 "},"О":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 "},"ξ":{"x_min":65,"x_max":673,"ha":701,"o":"m 279 290 q 292 219 279 245 q 330 175 305 192 q 395 146 356 157 q 485 123 433 135 q 571 96 536 111 q 629 61 607 81 q 662 14 652 41 q 673 -46 673 -11 q 657 -119 673 -82 q 607 -188 641 -156 q 521 -246 574 -220 q 394 -285 468 -271 l 394 -211 q 442 -192 423 -202 q 473 -168 462 -181 q 490 -139 485 -154 q 495 -107 495 -124 q 488 -71 495 -86 q 466 -46 482 -57 q 425 -28 451 -36 q 362 -12 400 -20 q 226 26 282 3 q 134 81 170 48 q 81 157 98 113 q 65 260 65 201 q 85 364 65 315 q 142 455 105 413 q 232 530 179 496 q 348 589 284 564 l 348 598 q 252 618 295 604 q 179 654 209 633 q 133 701 149 675 q 117 758 117 727 q 129 807 117 782 q 165 856 142 832 q 223 903 189 880 q 300 944 257 925 q 185 977 240 954 q 90 1030 129 1000 l 141 1100 q 190 1072 161 1086 q 254 1045 220 1057 q 324 1022 288 1032 q 394 1008 361 1013 q 427 1027 408 1017 q 470 1045 447 1036 q 518 1058 493 1053 q 570 1064 544 1064 q 612 1059 595 1064 q 639 1047 629 1055 q 653 1030 649 1040 q 658 1008 658 1019 q 612 941 658 965 q 467 916 567 916 q 435 917 451 916 q 399 919 418 918 q 364 888 380 905 q 336 852 348 872 q 318 811 325 833 q 311 763 311 789 q 321 722 311 740 q 346 689 330 703 q 382 664 361 674 q 423 646 402 653 q 454 659 436 652 q 492 670 472 665 q 534 678 512 675 q 576 682 555 682 q 629 667 612 682 q 647 629 647 652 q 642 600 647 614 q 623 575 636 587 q 590 557 610 564 q 540 551 569 551 q 507 552 524 551 q 475 554 490 553 q 447 556 459 555 q 429 559 436 557 q 373 520 400 547 q 325 458 346 494 q 291 378 304 422 q 279 290 279 335 "},"Ď":{"x_min":38.453125,"x_max":988,"ha":1065,"o":"m 988 514 q 956 305 988 400 q 863 143 925 211 q 709 37 801 75 q 496 0 617 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 496 992 q 703 961 611 992 q 857 871 794 931 q 954 721 920 811 q 988 514 988 632 m 753 514 q 680 810 753 713 q 466 907 607 907 l 387 907 l 387 86 l 464 86 q 590 115 536 86 q 680 200 644 145 q 735 335 716 256 q 753 514 753 414 m 262 1293 l 358 1293 q 391 1265 372 1281 q 431 1233 411 1250 q 472 1199 452 1215 q 508 1167 492 1182 q 543 1199 523 1182 q 584 1233 563 1215 q 625 1265 605 1250 q 659 1293 645 1281 l 755 1293 l 755 1274 q 717 1229 738 1255 q 673 1176 695 1203 q 632 1121 651 1148 q 602 1071 613 1094 l 415 1071 q 385 1121 404 1094 q 344 1176 365 1148 q 300 1229 322 1203 q 262 1274 278 1255 l 262 1293 "},"&":{"x_min":65,"x_max":1094.828125,"ha":1112,"o":"m 819 0 l 723 101 q 666 54 697 75 q 596 18 634 33 q 514 -5 558 3 q 417 -14 470 -14 q 266 6 332 -14 q 155 64 200 26 q 88 157 111 102 q 65 282 65 212 q 84 386 65 343 q 136 460 103 429 q 211 514 168 492 q 302 555 254 536 q 255 617 275 588 q 222 676 235 647 q 203 736 209 705 q 197 801 197 766 q 214 885 197 847 q 267 949 232 922 q 354 991 302 976 q 475 1006 406 1006 q 593 990 543 1006 q 675 947 642 974 q 725 884 708 920 q 742 808 742 848 q 729 732 742 766 q 690 669 716 698 q 624 615 663 641 q 530 565 584 590 q 540 555 533 560 l 737 348 q 748 443 745 396 q 751 530 751 490 l 751 591 l 1055 591 l 1055 517 l 1033 517 q 988 515 1010 517 q 947 502 966 512 q 913 474 928 492 q 890 423 899 455 q 865 341 879 385 q 829 253 850 297 l 968 108 q 1016 80 987 87 q 1081 73 1044 73 l 1094 73 l 1094 0 l 819 0 m 269 275 q 282 198 269 233 q 319 135 295 162 q 377 94 343 109 q 453 78 411 78 q 577 103 526 78 q 662 168 628 127 l 365 485 q 317 440 336 464 q 288 390 298 417 q 273 335 277 364 q 269 275 269 307 m 573 807 q 569 852 573 831 q 554 889 564 873 q 524 913 543 904 q 475 922 505 922 q 435 913 452 922 q 407 889 418 904 q 390 852 396 873 q 385 805 385 831 q 390 760 385 782 q 406 717 396 738 q 433 674 417 696 q 471 628 450 652 q 520 662 501 644 q 552 702 540 681 q 568 749 563 723 q 573 807 573 775 "},"G":{"x_min":77,"x_max":1029.375,"ha":1068,"o":"m 587 -14 q 362 22 458 -14 q 203 126 266 59 q 108 288 139 193 q 77 497 77 382 q 110 703 77 609 q 208 864 143 796 q 370 968 273 931 q 594 1006 467 1006 q 746 993 681 1006 q 854 959 811 980 q 920 908 898 937 q 941 844 941 878 q 930 798 941 820 q 895 761 918 777 q 839 735 872 744 q 762 726 806 726 q 751 803 762 768 q 720 864 741 839 q 666 903 699 889 q 590 917 634 917 q 461 889 514 917 q 374 807 407 861 q 325 675 340 754 q 310 497 310 597 q 326 318 310 396 q 377 188 342 241 q 469 107 413 135 q 608 80 526 80 q 659 82 634 80 q 709 89 685 84 l 709 293 q 684 371 709 349 q 610 392 659 392 l 592 392 l 592 466 l 1029 466 l 1029 392 l 1011 392 q 974 387 990 392 q 948 370 958 382 q 933 338 938 358 q 929 288 929 318 l 929 60 q 764 4 847 23 q 587 -14 682 -14 "},"ΰ":{"x_min":37.6875,"x_max":815,"ha":879,"o":"m 458 -14 q 315 7 376 -14 q 213 69 253 29 q 153 165 173 109 q 134 291 134 222 l 134 586 q 127 630 134 613 q 109 656 121 647 q 80 668 98 665 q 37 671 62 671 l 37 745 l 343 745 l 343 291 q 355 198 343 237 q 387 136 366 160 q 440 100 409 112 q 511 89 472 89 q 601 111 563 89 q 664 173 639 133 q 701 268 689 213 q 713 390 713 324 q 698 503 713 456 q 658 580 682 549 q 607 627 634 610 q 556 650 579 643 q 562 691 556 671 q 580 724 568 710 q 610 747 592 739 q 652 756 628 756 q 718 732 688 756 q 769 666 747 709 q 802 562 790 623 q 815 425 815 501 q 808 317 815 371 q 786 214 802 263 q 743 124 770 165 q 677 51 717 82 q 584 3 638 20 q 458 -14 530 -14 m 407 973 q 421 1019 413 994 q 437 1073 429 1045 q 451 1127 444 1100 q 461 1177 457 1153 l 623 1177 l 623 1162 q 598 1114 613 1141 q 564 1059 582 1087 q 527 1004 546 1031 q 490 955 508 977 l 407 955 l 407 973 m 219 955 q 225 995 219 978 q 243 1022 232 1011 q 269 1036 254 1032 q 300 1041 284 1041 q 331 1036 317 1041 q 358 1022 346 1032 q 376 995 369 1011 q 384 955 384 978 q 376 915 384 931 q 358 888 369 898 q 331 873 346 878 q 300 869 317 869 q 269 873 284 869 q 243 888 254 878 q 225 915 232 898 q 219 955 219 931 m 559 955 q 565 995 559 978 q 584 1022 572 1011 q 610 1036 595 1032 q 642 1041 625 1041 q 672 1036 658 1041 q 698 1022 687 1032 q 717 995 710 1011 q 724 955 724 978 q 717 915 724 931 q 698 888 710 898 q 672 873 687 878 q 642 869 658 869 q 610 873 625 869 q 584 888 595 878 q 565 915 572 898 q 559 955 559 931 "},"`":{"x_min":225,"x_max":578,"ha":802,"o":"m 483 842 q 411 889 451 860 q 334 946 371 917 q 267 1004 297 976 q 225 1049 237 1031 l 225 1064 l 442 1064 q 470 1013 453 1040 q 506 958 487 986 q 544 905 524 931 q 578 860 563 879 l 578 842 l 483 842 "},"ŏ":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 423 842 q 327 861 368 842 q 258 911 286 880 q 216 981 230 942 q 201 1060 202 1020 l 292 1060 q 338 987 304 1009 q 423 965 371 965 q 508 987 474 965 q 553 1060 542 1009 l 646 1060 q 630 981 644 1020 q 588 911 616 942 q 519 861 560 880 q 423 842 478 842 "},"ý":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 m 314 860 q 347 905 328 879 q 384 958 365 931 q 420 1013 403 986 q 447 1064 436 1040 l 666 1064 l 666 1049 q 623 1004 653 1031 q 556 946 593 976 q 480 889 519 917 q 408 842 440 860 l 314 842 l 314 860 "},"º":{"x_min":49,"x_max":558,"ha":607,"o":"m 211 763 q 231 639 211 681 q 304 597 252 597 q 376 639 355 597 q 397 763 397 681 q 375 886 397 845 q 302 926 353 926 q 231 886 251 926 q 211 763 211 845 m 558 763 q 493 586 558 644 q 302 528 428 528 q 115 586 181 528 q 49 763 49 645 q 114 941 49 883 q 305 999 179 999 q 410 984 364 999 q 490 940 457 969 q 540 867 522 911 q 558 763 558 823 "},"∞":{"x_min":49,"x_max":933,"ha":982,"o":"m 933 401 q 917 299 933 347 q 873 215 901 251 q 805 157 845 178 q 718 136 766 136 q 593 176 653 136 q 482 306 532 216 q 383 182 439 224 q 266 141 328 141 q 179 159 219 141 q 110 212 139 178 q 64 295 80 246 q 49 406 49 345 q 64 510 49 461 q 108 594 80 558 q 177 650 137 629 q 266 671 217 671 q 329 661 298 671 q 391 632 361 652 q 449 581 421 612 q 499 505 476 550 q 596 626 542 586 q 719 666 649 666 q 806 647 766 666 q 873 594 845 628 q 917 511 901 559 q 933 401 933 462 m 712 574 q 623 531 663 574 q 544 401 584 489 q 620 272 580 315 q 714 229 660 229 q 767 243 743 229 q 808 280 791 256 q 835 335 825 304 q 844 403 844 367 q 834 470 844 439 q 807 524 825 501 q 766 560 790 547 q 712 574 742 574 m 269 233 q 357 275 316 233 q 437 405 398 317 q 360 535 401 492 q 266 578 320 578 q 214 564 237 578 q 174 527 190 550 q 148 472 157 503 q 139 404 139 440 q 147 339 139 370 q 171 285 154 308 q 211 247 187 261 q 269 233 236 233 "},"ź":{"x_min":25,"x_max":694,"ha":735,"o":"m 511 94 q 547 100 532 94 q 572 120 562 106 q 590 155 583 133 q 603 207 597 176 l 611 252 l 694 252 l 687 0 l 25 0 l 25 56 l 435 650 l 232 650 q 204 645 216 650 q 184 630 193 641 q 167 600 175 618 q 152 553 160 581 l 144 520 l 61 520 l 77 745 l 678 745 l 678 685 l 266 94 l 511 94 m 283 860 q 316 905 297 879 q 353 958 334 931 q 389 1013 372 986 q 416 1064 405 1040 l 635 1064 l 635 1049 q 592 1004 622 1031 q 525 946 562 976 q 449 889 488 917 q 377 842 409 860 l 283 842 l 283 860 "},"я":{"x_min":0,"x_max":828.296875,"ha":851,"o":"m 409 665 q 358 656 379 665 q 324 631 337 647 q 305 592 311 614 q 299 542 299 569 q 305 487 299 512 q 324 446 311 463 q 358 419 337 428 q 409 410 379 410 l 501 410 l 501 665 l 409 665 m 319 127 q 269 64 298 88 q 202 25 241 39 q 113 5 163 10 q 0 0 63 0 l 0 73 l 4 73 q 37 78 23 73 q 66 93 52 83 q 91 119 79 103 q 118 156 104 135 l 240 353 q 184 374 212 359 q 133 413 156 389 q 96 470 110 437 q 82 547 82 504 q 98 630 82 593 q 151 692 115 667 q 246 731 188 717 q 386 745 303 745 l 828 745 l 828 671 l 823 671 q 738 650 763 671 q 713 586 713 629 l 713 166 q 717 131 713 147 q 732 101 721 114 q 762 81 743 88 q 809 73 781 73 l 828 73 l 828 0 l 382 0 l 382 73 l 387 73 q 431 76 410 73 q 467 89 451 80 q 492 117 483 99 q 501 166 501 136 l 501 327 l 428 327 l 319 127 "},"Ё":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 242 1184 q 248 1224 242 1207 q 266 1251 255 1240 q 292 1265 277 1261 q 323 1270 307 1270 q 354 1265 340 1270 q 381 1251 369 1261 q 399 1224 392 1240 q 407 1184 407 1207 q 399 1144 407 1160 q 381 1117 392 1127 q 354 1102 369 1107 q 323 1098 340 1098 q 292 1102 307 1098 q 266 1117 277 1107 q 248 1144 255 1127 q 242 1184 242 1160 m 527 1184 q 533 1224 527 1207 q 552 1251 540 1240 q 578 1265 563 1261 q 610 1270 593 1270 q 640 1265 625 1270 q 666 1251 654 1261 q 684 1224 677 1240 q 692 1184 692 1207 q 684 1144 692 1160 q 666 1117 677 1127 q 640 1102 654 1107 q 610 1098 625 1098 q 578 1102 593 1098 q 552 1117 563 1107 q 533 1144 540 1127 q 527 1184 527 1160 "},"ń":{"x_min":27.78125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 580 q 131 627 139 610 q 111 655 124 645 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 418 730 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 m 375 860 q 408 905 389 879 q 445 958 426 931 q 481 1013 464 986 q 508 1064 497 1040 l 727 1064 l 727 1049 q 684 1004 714 1031 q 617 946 654 976 q 541 889 580 917 q 469 842 501 860 l 375 842 l 375 860 "}," ":{"x_min":0,"x_max":0,"ha":347},"Г":{"x_min":38.453125,"x_max":807,"ha":821,"o":"m 797 992 l 807 720 l 729 720 l 712 786 q 666 877 697 846 q 579 907 635 907 l 388 907 l 388 158 q 394 114 388 130 q 409 88 399 97 q 432 76 418 79 q 459 73 445 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 797 992 "},"Ь":{"x_min":38.453125,"x_max":844,"ha":886,"o":"m 545 992 l 545 918 l 460 918 q 405 900 423 918 q 387 835 387 881 l 387 558 l 474 558 q 644 537 574 558 q 758 480 714 517 q 823 392 803 444 q 844 280 844 341 q 821 166 844 218 q 752 77 798 114 q 634 20 705 40 q 467 0 563 0 l 38 0 l 38 73 l 96 73 q 131 79 117 73 q 153 94 144 84 q 164 123 161 105 q 168 165 168 141 l 168 828 q 162 874 168 857 q 148 902 157 892 q 126 915 139 911 q 96 918 113 918 l 38 918 l 38 992 l 545 992 m 387 82 l 455 82 q 526 93 497 82 q 574 129 556 105 q 601 189 593 153 q 609 273 609 225 q 599 367 609 328 q 570 431 590 406 q 517 466 549 455 q 439 477 485 477 l 387 477 l 387 82 "},"¤":{"x_min":91.3125,"x_max":681.703125,"ha":777,"o":"m 132 494 q 143 571 132 534 q 176 638 154 608 l 92 722 l 162 791 l 245 707 q 310 738 275 727 q 385 750 346 750 q 459 738 424 750 q 525 706 495 727 l 611 792 l 681 722 l 596 636 q 629 569 617 605 q 641 494 641 534 q 630 419 641 454 q 599 353 619 384 l 681 271 l 611 202 l 529 284 q 462 251 498 263 q 385 240 425 240 q 309 251 346 240 q 242 283 272 262 l 162 202 l 91 273 l 171 353 q 132 494 132 415 m 226 494 q 238 431 226 461 q 272 380 251 402 q 323 346 294 358 q 385 333 352 333 q 449 346 420 333 q 500 380 478 358 q 533 431 521 402 q 545 494 545 461 q 533 558 545 528 q 500 609 521 587 q 449 644 478 632 q 385 657 420 657 q 323 644 352 657 q 272 609 294 632 q 238 558 251 587 q 226 494 226 528 "},"Ĝ":{"x_min":77,"x_max":1029.375,"ha":1068,"o":"m 587 -14 q 362 22 458 -14 q 203 126 266 59 q 108 288 139 193 q 77 497 77 382 q 110 703 77 609 q 208 864 143 796 q 370 968 273 931 q 594 1006 467 1006 q 746 993 681 1006 q 854 959 811 980 q 920 908 898 937 q 941 844 941 878 q 930 798 941 820 q 895 761 918 777 q 839 735 872 744 q 762 726 806 726 q 751 803 762 768 q 720 864 741 839 q 666 903 699 889 q 590 917 634 917 q 461 889 514 917 q 374 807 407 861 q 325 675 340 754 q 310 497 310 597 q 326 318 310 396 q 377 188 342 241 q 469 107 413 135 q 608 80 526 80 q 659 82 634 80 q 709 89 685 84 l 709 293 q 684 371 709 349 q 610 392 659 392 l 592 392 l 592 466 l 1029 466 l 1029 392 l 1011 392 q 974 387 990 392 q 948 370 958 382 q 933 338 938 358 q 929 288 929 318 l 929 60 q 764 4 847 23 q 587 -14 682 -14 m 323 1089 q 361 1134 339 1108 q 405 1187 383 1160 q 446 1242 426 1215 q 476 1293 465 1269 l 663 1293 q 693 1242 674 1269 q 734 1187 712 1215 q 778 1134 756 1160 q 816 1089 799 1108 l 816 1071 l 720 1071 q 686 1098 706 1082 q 645 1130 666 1113 q 604 1164 624 1147 q 569 1195 584 1181 q 533 1164 553 1181 q 492 1130 513 1147 q 452 1098 472 1113 q 419 1071 433 1082 l 323 1071 l 323 1089 "},"p":{"x_min":18.703125,"x_max":831,"ha":896,"o":"m 34 -260 q 67 -257 50 -260 q 99 -244 85 -253 q 124 -217 114 -234 q 134 -169 134 -199 l 134 574 q 126 624 134 605 q 107 654 119 643 q 77 667 94 664 q 40 671 60 671 l 30 671 l 30 745 l 302 745 l 327 635 l 334 635 q 368 685 348 663 q 415 724 388 707 q 473 749 441 740 q 546 758 506 758 q 668 735 615 758 q 757 664 721 712 q 812 543 793 616 q 831 369 831 470 q 812 196 831 269 q 758 75 794 123 q 671 5 723 28 q 551 -17 619 -17 q 422 13 472 -17 q 343 94 373 43 l 334 94 q 339 31 336 62 q 343 -23 341 5 q 344 -74 344 -52 l 344 -169 q 354 -217 344 -199 q 379 -244 364 -234 q 411 -257 393 -253 q 443 -260 428 -260 l 473 -260 l 473 -334 l 18 -334 l 18 -260 l 34 -260 m 486 86 q 586 156 556 86 q 616 368 616 226 q 586 580 616 506 q 487 654 556 654 q 418 635 446 654 q 374 580 391 616 q 351 491 358 544 q 344 369 344 437 q 351 244 344 297 q 374 155 358 191 q 418 103 391 120 q 486 86 445 86 "},"Ю":{"x_min":38.453125,"x_max":1468,"ha":1544,"o":"m 1468 496 q 1438 287 1468 382 q 1353 126 1409 193 q 1214 22 1297 59 q 1025 -14 1132 -14 q 834 20 916 -14 q 697 119 752 55 q 614 274 642 183 q 583 475 585 364 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 560 l 584 560 q 622 744 591 662 q 707 885 652 827 q 842 975 762 944 q 1027 1007 922 1007 q 1215 970 1133 1007 q 1353 867 1297 934 q 1438 706 1409 800 q 1468 496 1468 612 m 816 496 q 827 319 816 397 q 863 187 838 241 q 928 104 888 133 q 1025 76 968 76 q 1123 104 1083 76 q 1187 187 1162 133 q 1223 319 1212 241 q 1234 496 1234 397 q 1223 674 1234 596 q 1187 806 1212 752 q 1124 888 1163 860 q 1027 916 1084 916 q 929 888 970 916 q 864 806 889 860 q 827 674 838 752 q 816 496 816 596 "},"ο":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 "},"S":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 "},"/":{"x_min":0,"x_max":400,"ha":400,"o":"m 99 -170 l 0 -168 l 302 1055 l 400 1055 l 99 -170 "},"Ŧ":{"x_min":13,"x_max":893,"ha":907,"o":"m 563 531 l 763 531 l 763 457 l 563 457 l 563 164 q 568 116 563 134 q 584 89 574 99 q 606 76 593 80 q 634 73 619 73 l 692 73 l 692 0 l 213 0 l 213 73 l 271 73 q 300 76 287 73 q 322 89 313 80 q 337 116 332 99 q 343 164 343 134 l 343 457 l 142 457 l 142 531 l 343 531 l 343 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 886 992 l 893 723 l 800 723 l 789 809 q 780 850 787 832 q 761 881 774 868 q 726 900 747 893 q 674 907 705 907 l 563 907 l 563 531 "},"ђ":{"x_min":18.28125,"x_max":793,"ha":904,"o":"m 470 602 q 413 585 436 602 q 376 537 389 567 q 356 469 362 508 q 349 387 349 430 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 53 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 802 l 18 802 l 18 876 l 139 876 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 876 l 565 876 l 565 802 l 349 802 l 349 784 q 348 726 349 757 q 344 669 346 695 q 339 608 341 638 l 351 608 q 395 670 372 647 q 445 703 419 692 q 501 717 472 714 q 563 721 531 721 q 660 705 617 721 q 732 657 702 689 q 777 573 761 624 q 793 453 793 522 l 793 -11 q 768 -166 793 -104 q 700 -265 744 -228 q 596 -318 656 -302 q 464 -334 535 -334 l 437 -334 l 437 -247 l 445 -247 q 503 -235 478 -247 q 546 -194 529 -223 q 572 -118 563 -166 q 582 0 582 -71 l 582 415 q 576 494 582 459 q 557 553 570 529 q 522 590 544 577 q 470 602 501 602 "},"y":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 "},"Π":{"x_min":38.453125,"x_max":1084.875,"ha":1124,"o":"m 606 0 l 606 73 l 665 73 q 692 76 679 73 q 715 89 705 80 q 730 116 725 99 q 736 164 736 134 l 736 907 l 387 907 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 1084 992 l 1084 918 l 1026 918 q 999 915 1012 918 q 976 903 986 912 q 961 876 966 893 q 956 828 956 858 l 956 156 q 961 112 956 129 q 977 87 967 96 q 999 76 987 79 q 1026 73 1012 73 l 1084 73 l 1084 0 l 606 0 "},"‗":{"x_min":-7,"x_max":578,"ha":571,"o":"m 578 -115 l -7 -115 l -7 -33 l 578 -33 l 578 -115 m 578 -279 l -7 -279 l -7 -196 l 578 -196 l 578 -279 "},"–":{"x_min":-7,"x_max":701,"ha":695,"o":"m 701 323 l -7 323 l -7 423 l 701 423 l 701 323 "},"ë":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 191 955 q 197 995 191 978 q 215 1022 204 1011 q 241 1036 226 1032 q 272 1041 256 1041 q 303 1036 289 1041 q 330 1022 318 1032 q 348 995 341 1011 q 356 955 356 978 q 348 915 356 931 q 330 888 341 898 q 303 873 318 878 q 272 869 289 869 q 241 873 256 869 q 215 888 226 878 q 197 915 204 898 q 191 955 191 931 m 476 955 q 482 995 476 978 q 501 1022 489 1011 q 527 1036 512 1032 q 559 1041 542 1041 q 589 1036 574 1041 q 615 1022 603 1032 q 633 995 626 1011 q 641 955 641 978 q 633 915 641 931 q 615 888 626 898 q 589 873 603 878 q 559 869 574 869 q 527 873 542 869 q 501 888 512 878 q 482 915 489 898 q 476 955 476 931 "},"б":{"x_min":66,"x_max":786,"ha":851,"o":"m 66 442 q 72 592 66 521 q 93 725 78 663 q 135 837 108 786 q 203 925 162 887 q 302 986 245 963 q 438 1018 360 1010 q 534 1027 490 1023 q 612 1036 578 1031 q 669 1049 646 1041 q 701 1071 692 1057 l 766 1071 q 741 960 764 1001 q 677 896 719 919 q 573 862 635 873 q 431 840 512 851 q 333 828 374 835 q 263 807 291 820 q 215 774 234 794 q 186 726 196 755 q 170 658 175 697 q 162 567 165 618 l 167 567 q 203 627 179 599 q 259 675 226 654 q 335 708 292 696 q 431 720 378 720 q 697 627 608 720 q 786 354 786 535 q 763 196 786 265 q 697 81 741 127 q 583 10 652 34 q 422 -14 515 -14 q 155 97 245 -14 q 66 442 66 209 m 571 352 q 563 474 571 421 q 538 562 555 527 q 492 614 520 597 q 422 632 463 632 q 352 614 380 632 q 309 562 325 597 q 286 474 293 527 q 280 352 280 421 q 313 144 280 215 q 422 73 347 73 q 492 91 463 73 q 538 144 520 109 q 563 232 555 180 q 571 352 571 284 "},"ƒ":{"x_min":-118,"x_max":791,"ha":777,"o":"m 626 527 l 448 527 q 422 393 435 459 q 396 259 408 326 q 370 126 383 193 q 344 -9 357 58 q 295 -165 326 -103 q 222 -265 265 -228 q 126 -318 180 -302 q 8 -334 72 -334 q -59 -328 -25 -334 q -118 -315 -94 -323 l -96 -228 q -75 -234 -87 -231 q -49 -241 -63 -238 q -21 -245 -35 -243 q 5 -247 -7 -247 q 50 -235 31 -247 q 84 -194 69 -222 q 112 -120 99 -166 q 137 -8 124 -74 l 239 527 l 102 527 l 120 624 l 256 624 q 270 689 262 656 q 283 754 277 721 q 317 861 294 814 q 377 940 340 908 q 464 989 413 972 q 581 1006 515 1006 q 674 997 635 1006 q 739 973 713 989 q 778 938 765 958 q 791 894 791 918 q 783 850 791 871 q 757 814 776 829 q 708 790 739 799 q 631 782 677 782 q 617 887 631 849 q 574 926 603 926 q 545 916 557 926 q 525 886 534 906 q 508 835 515 866 q 492 763 500 805 l 466 624 l 643 624 l 626 527 "},"у":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 "},"J":{"x_min":-54.078125,"x_max":495.96875,"ha":511,"o":"m 495 918 l 437 918 q 409 915 422 918 q 386 903 396 912 q 371 876 377 893 q 365 828 365 858 l 365 -2 q 351 -114 365 -65 q 312 -200 337 -163 q 252 -263 287 -237 q 176 -304 217 -288 q 89 -326 135 -319 q -3 -334 43 -334 l -54 -334 l -54 -253 l -28 -253 q 35 -240 4 -253 q 91 -199 67 -228 q 131 -121 116 -169 q 146 -4 146 -74 l 146 833 q 140 878 146 861 q 125 903 135 895 q 102 915 115 912 q 75 918 89 918 l 17 918 l 17 992 l 495 992 l 495 918 "},"ŷ":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 m 163 860 q 201 905 179 879 q 245 958 223 931 q 286 1013 266 986 q 316 1064 305 1040 l 503 1064 q 533 1013 514 1040 q 574 958 552 986 q 618 905 596 931 q 656 860 639 879 l 656 842 l 560 842 q 526 869 546 853 q 485 901 506 884 q 444 935 464 918 q 409 966 424 952 q 373 935 393 952 q 332 901 353 918 q 292 869 312 884 q 259 842 273 853 l 163 842 l 163 860 "},"ŕ":{"x_min":27.78125,"x_max":705,"ha":726,"o":"m 491 0 l 27 0 l 27 73 l 31 73 q 75 77 55 73 q 109 91 94 80 q 131 121 123 101 q 139 173 139 141 l 139 576 q 131 625 139 607 q 111 654 124 644 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 315 745 l 343 636 l 349 636 q 379 690 363 667 q 418 729 396 714 q 472 753 441 745 q 545 761 503 761 q 666 732 627 761 q 705 648 705 703 q 658 549 705 584 q 528 514 612 514 q 525 564 528 542 q 514 600 522 586 q 493 621 507 614 q 460 629 480 629 q 418 617 436 629 q 389 585 401 605 q 369 541 377 566 q 357 492 361 517 q 351 445 352 468 q 349 406 349 423 l 349 166 q 357 117 349 136 q 377 89 364 99 q 408 76 390 80 q 446 73 426 73 l 491 73 l 491 0 m 250 860 q 283 905 264 879 q 320 958 301 931 q 356 1013 339 986 q 383 1064 372 1040 l 602 1064 l 602 1049 q 559 1004 589 1031 q 492 946 529 976 q 416 889 455 917 q 344 842 376 860 l 250 842 l 250 860 "},"ώ":{"x_min":65,"x_max":1046,"ha":1111,"o":"m 761 -14 q 686 -3 718 -14 q 630 25 654 6 q 587 71 605 44 q 554 133 569 99 q 521 71 539 99 q 479 25 503 44 q 423 -3 455 6 q 349 -14 392 -14 q 139 74 213 -14 q 65 341 65 163 q 78 465 65 407 q 118 577 92 524 q 180 678 144 630 q 262 770 216 725 l 360 706 q 323 630 339 669 q 297 548 307 592 q 283 453 288 504 q 279 338 279 402 q 289 223 279 271 q 317 146 300 175 q 356 103 334 116 q 398 89 377 89 q 466 120 439 89 q 503 220 493 151 q 486 278 493 253 q 474 326 478 304 q 467 369 469 348 q 465 412 465 390 q 488 499 465 473 q 555 526 511 526 q 622 499 599 526 q 645 412 645 473 q 643 369 645 390 q 636 327 640 349 q 624 280 631 306 q 607 222 617 254 q 644 121 617 152 q 712 89 672 89 q 755 103 734 89 q 794 146 776 116 q 821 223 811 175 q 832 338 832 271 q 827 453 832 402 q 813 548 822 504 q 787 630 803 592 q 750 706 772 669 l 848 770 q 930 678 894 725 q 992 577 967 630 q 1032 465 1018 524 q 1046 341 1046 407 q 972 74 1046 163 q 761 -14 898 -14 m 486 860 q 500 907 492 881 q 515 960 507 932 q 529 1014 522 987 q 539 1064 535 1041 l 729 1064 l 729 1050 q 702 1001 719 1028 q 666 947 686 974 q 624 892 646 919 q 582 842 602 865 l 486 842 l 486 860 "},"˘":{"x_min":178,"x_max":623,"ha":802,"o":"m 400 842 q 304 861 345 842 q 235 911 263 880 q 193 981 207 942 q 178 1060 179 1020 l 269 1060 q 315 987 281 1009 q 400 965 348 965 q 485 987 451 965 q 530 1060 519 1009 l 623 1060 q 607 981 621 1020 q 565 911 593 942 q 496 861 537 880 q 400 842 455 842 "},"D":{"x_min":38.453125,"x_max":988,"ha":1065,"o":"m 988 514 q 956 305 988 400 q 863 143 925 211 q 709 37 801 75 q 496 0 617 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 496 992 q 703 961 611 992 q 857 871 794 931 q 954 721 920 811 q 988 514 988 632 m 753 514 q 680 810 753 713 q 466 907 607 907 l 387 907 l 387 86 l 464 86 q 590 115 536 86 q 680 200 644 145 q 735 335 716 256 q 753 514 753 414 "},"ł":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 366 l 37 310 l 37 404 l 139 462 l 139 896 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 582 l 461 645 l 461 548 l 349 485 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 "},"ĺ":{"x_min":23.703125,"x_max":506,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 154 1128 q 187 1173 168 1147 q 224 1226 205 1199 q 260 1281 243 1254 q 287 1332 276 1308 l 506 1332 l 506 1317 q 463 1272 493 1299 q 396 1214 433 1244 q 320 1157 359 1185 q 248 1110 280 1128 l 154 1110 l 154 1128 "},"ц":{"x_min":23.703125,"x_max":925,"ha":953,"o":"m 908 745 l 908 671 l 892 671 q 859 668 877 671 q 827 655 841 664 q 802 628 812 645 q 793 580 793 610 l 793 152 q 801 112 793 128 q 823 89 809 97 q 855 77 837 80 q 893 73 873 74 l 925 73 l 925 -292 l 829 -292 l 821 -190 q 805 -102 818 -138 q 775 -43 793 -65 q 735 -10 757 -20 q 691 0 714 0 l 23 0 l 23 73 l 39 73 q 72 76 54 73 q 104 88 89 79 q 129 114 119 97 q 139 158 139 130 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 437 745 l 437 671 l 434 671 q 404 668 420 671 q 375 655 388 664 q 352 628 361 645 q 343 580 343 610 l 343 79 l 588 79 l 588 586 q 579 630 588 614 q 556 656 570 647 q 526 668 542 665 q 497 671 510 671 l 494 671 l 494 745 l 908 745 "},"Л":{"x_min":0,"x_max":971.546875,"ha":1010,"o":"m 492 0 l 492 73 l 551 73 q 579 76 565 73 q 601 89 592 80 q 617 116 611 99 q 622 164 622 134 l 622 918 l 441 918 q 429 736 437 831 q 408 546 420 640 q 379 364 395 451 q 343 209 363 277 q 299 103 324 145 q 247 36 275 61 q 184 0 218 11 q 111 -10 149 -10 q 30 16 61 -10 q 0 93 0 43 q 5 132 0 114 q 21 161 11 149 q 42 180 30 173 q 67 186 54 186 q 84 140 67 159 q 128 121 101 121 q 171 130 151 121 q 207 158 190 138 q 238 214 224 179 q 267 302 253 249 q 290 402 279 347 q 308 514 300 457 q 323 627 317 571 q 334 730 330 683 q 340 812 338 777 q 343 863 343 847 q 334 893 343 882 q 310 910 325 904 q 274 917 294 916 q 231 918 254 918 l 210 918 l 210 992 l 971 992 l 971 918 l 913 918 q 885 915 898 918 q 862 903 872 912 q 847 875 852 893 q 842 828 842 857 l 842 156 q 847 112 842 128 q 863 87 853 96 q 886 76 873 79 q 913 73 898 73 l 971 73 l 971 0 l 492 0 "},"$":{"x_min":67,"x_max":707,"ha":777,"o":"m 433 1055 l 433 950 q 539 936 494 948 q 613 906 584 925 q 657 863 643 887 q 671 811 671 839 q 633 738 671 767 q 518 710 595 710 q 513 754 518 730 q 498 800 508 778 q 472 840 488 822 q 433 868 456 858 l 433 597 q 448 591 437 595 q 467 583 460 586 q 577 531 531 558 q 651 474 622 505 q 693 406 680 443 q 707 326 707 370 q 688 228 707 273 q 634 148 669 183 q 548 92 599 114 q 433 62 497 70 l 433 -110 l 355 -110 l 355 60 q 220 80 275 62 q 131 126 165 98 q 81 188 96 154 q 67 254 67 222 q 78 306 67 285 q 107 340 89 327 q 149 359 126 353 q 197 365 172 365 q 209 272 197 313 q 241 203 220 232 q 290 156 261 174 q 355 133 319 139 l 355 433 l 331 443 q 220 498 264 470 q 148 557 175 525 q 109 625 121 588 q 98 706 98 662 q 116 798 98 757 q 169 871 135 840 q 250 922 203 902 q 355 949 298 942 l 355 1055 l 433 1055 m 542 264 q 514 339 542 308 q 433 398 487 370 l 433 136 q 513 182 485 148 q 542 264 542 217 m 260 765 q 264 729 260 746 q 279 697 268 712 q 308 665 290 681 q 355 635 327 650 l 355 875 q 287 840 314 867 q 260 765 260 812 "},"w":{"x_min":-4.40625,"x_max":1190.078125,"ha":1189,"o":"m 686 737 l 821 327 q 846 242 838 277 q 858 181 853 207 l 862 181 q 868 215 865 199 q 876 247 871 230 q 886 284 880 264 q 899 330 891 304 l 960 533 q 970 571 966 550 q 973 603 973 591 q 951 654 973 638 q 881 671 928 671 l 871 671 l 871 745 l 1190 745 l 1190 671 l 1172 671 q 1137 667 1152 671 q 1110 651 1122 662 q 1089 617 1099 639 q 1068 562 1078 596 l 888 0 l 739 0 l 587 461 l 427 0 l 276 0 l 98 597 q 81 633 90 619 q 61 656 72 648 q 34 667 49 664 q 0 671 20 671 l -4 671 l -4 745 l 402 745 l 402 671 l 384 671 q 321 659 342 671 q 300 612 300 647 q 304 584 300 601 q 312 553 308 568 l 363 372 q 376 320 370 347 q 388 269 382 294 q 398 221 393 244 q 405 181 402 199 l 409 181 q 425 253 415 216 q 454 341 436 290 l 595 737 l 686 737 "},"о":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 "},"Д":{"x_min":11,"x_max":949,"ha":983,"o":"m 455 907 q 444 766 455 838 q 414 621 433 694 q 370 476 395 548 q 317 335 345 404 q 260 203 289 266 q 204 84 231 139 l 587 84 l 587 907 l 455 907 m 96 84 q 193 288 146 184 q 275 491 240 391 q 333 686 311 592 q 355 861 355 781 q 344 892 355 880 q 317 909 334 903 q 279 917 300 915 q 234 918 257 918 l 230 918 l 230 992 l 922 992 l 922 918 l 904 918 q 867 915 884 918 q 836 902 849 912 q 814 874 822 892 q 807 825 807 856 l 807 184 q 816 132 807 151 q 840 102 825 112 q 876 88 855 91 q 921 84 897 84 l 949 84 l 949 -292 l 857 -292 q 847 -159 857 -214 q 816 -68 837 -104 q 761 -16 795 -33 q 679 0 727 0 l 280 0 q 199 -16 232 0 q 144 -68 165 -33 q 113 -159 122 -104 q 103 -292 103 -214 l 11 -292 l 11 84 l 96 84 "},"Ç":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 m 653 -175 q 638 -241 653 -211 q 598 -291 624 -270 q 536 -323 572 -312 q 456 -334 500 -334 q 429 -332 445 -334 q 397 -329 414 -331 q 364 -324 380 -327 q 335 -318 347 -321 l 335 -233 q 385 -241 360 -239 q 429 -244 410 -244 q 491 -230 469 -244 q 514 -180 514 -216 q 506 -147 514 -160 q 484 -126 499 -134 q 451 -115 470 -118 q 410 -110 432 -111 l 439 12 l 518 12 l 504 -47 q 565 -60 538 -50 q 612 -86 593 -70 q 642 -125 631 -102 q 653 -175 653 -148 "},"Ŝ":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 m 167 1089 q 205 1134 183 1108 q 249 1187 227 1160 q 290 1242 270 1215 q 320 1293 309 1269 l 507 1293 q 537 1242 518 1269 q 578 1187 556 1215 q 622 1134 600 1160 q 660 1089 643 1108 l 660 1071 l 564 1071 q 530 1098 550 1082 q 489 1130 510 1113 q 448 1164 468 1147 q 413 1195 428 1181 q 377 1164 397 1181 q 336 1130 357 1147 q 296 1098 316 1113 q 263 1071 277 1082 l 167 1071 l 167 1089 "},"C":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 "},"Ḁ":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 670 -236 q 657 -301 670 -273 q 621 -348 644 -329 q 568 -377 598 -367 q 503 -387 537 -387 q 437 -377 468 -387 q 384 -348 407 -367 q 348 -301 361 -329 q 336 -236 336 -273 q 348 -171 336 -199 q 384 -123 361 -142 q 437 -94 407 -104 q 503 -85 468 -85 q 568 -94 537 -85 q 621 -123 598 -104 q 657 -171 644 -142 q 670 -236 670 -199 m 585 -236 q 578 -201 585 -215 q 561 -178 572 -187 q 534 -165 549 -169 q 503 -161 519 -161 q 471 -165 486 -161 q 444 -178 456 -169 q 427 -201 433 -187 q 420 -236 420 -215 q 427 -270 420 -256 q 444 -293 433 -284 q 471 -306 456 -302 q 503 -311 486 -311 q 534 -306 519 -311 q 561 -293 549 -302 q 578 -270 572 -284 q 585 -236 585 -256 "},"Ĵ":{"x_min":-54.078125,"x_max":501,"ha":511,"o":"m 495 918 l 437 918 q 409 915 422 918 q 386 903 396 912 q 371 876 377 893 q 365 828 365 858 l 365 -2 q 351 -114 365 -65 q 312 -200 337 -163 q 252 -263 287 -237 q 176 -304 217 -288 q 89 -326 135 -319 q -3 -334 43 -334 l -54 -334 l -54 -253 l -28 -253 q 35 -240 4 -253 q 91 -199 67 -228 q 131 -121 116 -169 q 146 -4 146 -74 l 146 833 q 140 878 146 861 q 125 903 135 895 q 102 915 115 912 q 75 918 89 918 l 17 918 l 17 992 l 495 992 l 495 918 m 8 1089 q 46 1134 24 1108 q 90 1187 68 1160 q 131 1242 111 1215 q 161 1293 150 1269 l 348 1293 q 378 1242 359 1269 q 419 1187 397 1215 q 463 1134 441 1160 q 501 1089 484 1108 l 501 1071 l 405 1071 q 371 1098 391 1082 q 330 1130 351 1113 q 289 1164 309 1147 q 254 1195 269 1181 q 218 1164 238 1181 q 177 1130 198 1147 q 137 1098 157 1113 q 104 1071 118 1082 l 8 1071 l 8 1089 "},"È":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 467 1071 q 395 1118 435 1089 q 318 1175 355 1146 q 251 1233 281 1205 q 209 1278 221 1260 l 209 1293 l 426 1293 q 454 1242 437 1269 q 490 1187 471 1215 q 528 1134 508 1160 q 562 1089 547 1108 l 562 1071 l 467 1071 "},"ﬁ":{"x_min":26.140625,"x_max":975.296875,"ha":999,"o":"m 550 73 q 582 76 564 73 q 614 89 599 80 q 638 116 628 99 q 648 164 648 134 l 648 650 l 366 650 l 366 164 q 376 116 366 134 q 400 89 386 99 q 432 76 415 80 q 464 73 450 73 l 502 73 l 502 0 l 26 0 l 26 73 l 56 73 q 88 76 71 73 q 120 89 106 80 q 145 116 135 99 q 155 164 155 134 l 155 650 l 31 650 l 31 745 l 155 745 l 155 753 q 177 886 155 828 q 245 985 199 945 q 362 1047 291 1026 q 530 1068 432 1068 q 676 1059 617 1068 q 770 1036 734 1051 q 822 997 806 1020 q 838 945 838 975 q 826 898 838 919 q 790 861 814 876 q 726 837 765 846 q 632 829 687 829 q 627 875 632 848 q 607 928 621 903 q 567 971 593 953 q 502 988 542 988 q 400 946 435 988 q 366 811 366 903 l 366 745 l 860 745 l 860 164 q 869 116 860 134 q 894 89 879 99 q 926 76 908 80 q 958 73 943 73 l 975 73 l 975 0 l 533 0 l 533 73 l 550 73 "},"X":{"x_min":13.71875,"x_max":1003.546875,"ha":1017,"o":"m 727 878 q 720 898 727 890 q 704 910 714 906 q 679 917 693 915 q 649 918 665 918 l 645 918 l 645 992 l 970 992 l 970 918 l 957 918 q 921 913 937 918 q 888 896 904 908 q 856 865 872 884 q 820 818 840 846 l 618 543 l 874 147 q 930 89 901 104 q 985 73 959 73 l 1003 73 l 1003 0 l 545 0 l 545 73 l 551 73 q 635 119 635 73 q 633 134 635 127 q 627 152 632 142 q 613 177 622 162 q 588 215 604 192 l 461 408 l 311 205 q 287 165 298 187 q 275 120 275 142 q 294 85 275 97 q 359 73 313 73 l 364 73 l 364 0 l 13 0 l 13 73 l 22 73 q 66 80 47 73 q 102 100 85 87 q 134 130 118 112 q 167 170 150 148 l 410 487 l 181 844 q 158 877 169 863 q 133 900 147 890 q 102 914 119 909 q 61 918 85 918 l 43 918 l 43 992 l 503 992 l 503 918 l 499 918 q 459 915 475 918 q 433 906 443 912 q 420 893 424 901 q 417 878 417 886 q 427 842 417 863 q 453 796 437 820 l 568 624 l 689 793 q 714 835 701 812 q 727 878 727 859 "},"ô":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 178 860 q 216 905 194 879 q 260 958 238 931 q 301 1013 281 986 q 331 1064 320 1040 l 518 1064 q 548 1013 529 1040 q 589 958 567 986 q 633 905 611 931 q 671 860 654 879 l 671 842 l 575 842 q 541 869 561 853 q 500 901 521 884 q 459 935 479 918 q 424 966 439 952 q 388 935 408 952 q 347 901 368 918 q 307 869 327 884 q 274 842 288 853 l 178 842 l 178 860 "},"Ė":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 342 1179 q 351 1224 342 1205 q 376 1255 360 1243 q 413 1273 392 1267 q 460 1279 434 1279 q 505 1273 483 1279 q 543 1255 527 1267 q 569 1224 559 1243 q 579 1179 579 1205 q 569 1134 579 1153 q 543 1103 559 1115 q 505 1085 527 1091 q 460 1079 483 1079 q 413 1085 434 1079 q 376 1103 392 1091 q 351 1134 360 1115 q 342 1179 342 1153 "},"г":{"x_min":23.703125,"x_max":677,"ha":705,"o":"m 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 472 73 l 472 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 677 745 l 677 509 l 581 509 l 574 568 q 564 620 571 601 q 546 650 557 639 q 518 662 535 660 q 477 665 501 665 l 349 665 l 349 164 "},"Ŀ":{"x_min":38.453125,"x_max":863,"ha":908,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 432 915 445 918 q 409 903 418 912 q 394 878 399 895 q 388 833 388 861 l 388 84 l 647 84 q 723 115 696 84 q 762 205 750 146 l 785 310 l 863 310 l 852 0 l 38 0 m 513 515 q 522 560 513 541 q 547 591 531 579 q 584 609 563 603 q 631 615 605 615 q 676 609 654 615 q 714 591 698 603 q 740 560 730 579 q 750 515 750 541 q 740 470 750 489 q 714 439 730 451 q 676 421 698 427 q 631 415 654 415 q 584 421 605 415 q 547 439 563 427 q 522 470 531 451 q 513 515 513 489 "},"х":{"x_min":15.59375,"x_max":887.515625,"ha":897,"o":"m 604 629 q 584 662 604 654 q 532 671 565 671 l 528 671 l 528 745 l 849 745 l 849 671 l 837 671 q 801 667 816 671 q 769 653 785 663 q 736 626 753 643 q 696 582 719 609 l 553 407 l 757 147 q 816 90 789 107 q 869 73 843 73 l 887 73 l 887 0 l 445 0 l 445 73 l 452 73 q 536 119 536 73 q 534 135 536 127 q 526 154 532 143 q 510 180 521 165 q 483 215 500 194 l 404 311 l 307 190 q 286 156 294 173 q 278 120 278 138 q 297 85 278 97 q 364 73 317 73 l 368 73 l 368 0 l 15 0 l 15 73 l 27 73 q 71 78 52 73 q 107 92 90 82 q 141 120 124 103 q 179 162 158 137 l 353 373 l 179 597 q 120 652 149 634 q 59 671 91 671 l 41 671 l 41 745 l 478 745 l 478 671 l 473 671 q 434 668 449 671 q 410 659 419 664 q 398 646 401 654 q 394 631 394 639 q 402 602 394 616 q 426 567 409 588 l 503 472 l 569 551 q 594 591 585 572 q 604 629 604 610 "},"ŋ":{"x_min":27.78125,"x_max":792,"ha":922,"o":"m 436 -247 l 444 -247 q 502 -235 477 -247 q 545 -194 528 -223 q 571 -118 562 -166 q 581 0 581 -71 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 580 q 131 627 139 610 q 111 655 124 645 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 418 730 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 -10 q 767 -166 792 -104 q 699 -265 743 -228 q 595 -318 655 -302 q 463 -334 534 -334 l 436 -334 l 436 -247 "},"Ч":{"x_min":26.703125,"x_max":1043.875,"ha":1083,"o":"m 915 164 q 920 116 915 134 q 935 89 925 99 q 957 76 944 80 q 985 73 970 73 l 1043 73 l 1043 0 l 565 0 l 565 73 l 623 73 q 651 76 638 73 q 673 89 664 80 q 688 116 683 99 q 693 164 693 134 l 693 402 q 652 386 676 395 q 597 370 628 378 q 529 358 566 363 q 446 354 491 354 q 320 368 376 354 q 224 417 263 383 q 163 510 184 452 q 142 654 142 568 l 142 828 q 136 875 142 858 q 121 903 131 893 q 99 915 112 912 q 70 918 86 918 l 26 918 l 26 992 l 491 992 l 491 918 l 433 918 q 405 915 418 918 q 383 903 392 912 q 368 875 373 893 q 363 828 363 858 l 363 658 q 372 566 363 603 q 401 506 382 529 q 452 474 421 484 q 526 465 482 465 q 577 468 552 465 q 624 476 602 472 q 663 487 645 481 q 693 498 681 493 l 693 828 q 688 875 693 858 q 673 903 683 893 q 651 915 664 912 q 623 918 638 918 l 565 918 l 565 992 l 1043 992 l 1043 918 l 985 918 q 957 915 970 918 q 935 903 944 912 q 920 876 925 893 q 915 828 915 858 l 915 164 "},"ü":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 226 955 q 232 995 226 978 q 250 1022 239 1011 q 276 1036 261 1032 q 307 1041 291 1041 q 338 1036 324 1041 q 365 1022 353 1032 q 383 995 376 1011 q 391 955 391 978 q 383 915 391 931 q 365 888 376 898 q 338 873 353 878 q 307 869 324 869 q 276 873 291 869 q 250 888 261 878 q 232 915 239 898 q 226 955 226 931 m 511 955 q 517 995 511 978 q 536 1022 524 1011 q 562 1036 547 1032 q 594 1041 577 1041 q 624 1036 609 1041 q 650 1022 638 1032 q 668 995 661 1011 q 676 955 676 978 q 668 915 676 931 q 650 888 661 898 q 624 873 638 878 q 594 869 609 869 q 562 873 577 869 q 536 888 547 878 q 517 915 524 898 q 511 955 511 931 "},"ь":{"x_min":23.703125,"x_max":803,"ha":838,"o":"m 482 745 l 482 665 l 463 665 q 420 661 440 665 q 383 647 399 657 q 359 621 368 637 q 349 580 349 605 l 349 424 l 483 424 q 605 416 547 424 q 707 386 663 408 q 777 323 751 364 q 803 218 803 283 q 783 131 803 171 q 725 62 764 91 q 628 16 687 33 q 490 0 569 0 l 23 0 l 23 73 l 38 73 q 114 96 90 73 q 139 162 139 118 l 139 580 q 113 650 139 629 q 38 671 88 671 l 23 671 l 23 745 l 482 745 m 454 80 q 513 88 488 80 q 552 112 537 96 q 574 156 567 129 q 581 222 581 183 q 546 315 581 288 q 448 343 512 343 l 349 343 l 349 80 l 454 80 "},"Ÿ":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 m 272 1184 q 278 1224 272 1207 q 296 1251 285 1240 q 322 1265 307 1261 q 353 1270 337 1270 q 384 1265 370 1270 q 411 1251 399 1261 q 429 1224 422 1240 q 437 1184 437 1207 q 429 1144 437 1160 q 411 1117 422 1127 q 384 1102 399 1107 q 353 1098 370 1098 q 322 1102 337 1098 q 296 1117 307 1107 q 278 1144 285 1127 q 272 1184 272 1160 m 557 1184 q 563 1224 557 1207 q 582 1251 570 1240 q 608 1265 593 1261 q 640 1270 623 1270 q 670 1265 655 1270 q 696 1251 684 1261 q 714 1224 707 1240 q 722 1184 722 1207 q 714 1144 722 1160 q 696 1117 707 1127 q 670 1102 684 1107 q 640 1098 655 1098 q 608 1102 623 1098 q 582 1117 593 1107 q 563 1144 570 1127 q 557 1184 557 1160 "},"€":{"x_min":37.0625,"x_max":753,"ha":777,"o":"m 500 -14 q 365 6 428 -14 q 252 72 302 27 q 167 190 202 118 q 119 368 133 263 l 37 368 l 37 454 l 111 454 l 111 496 l 111 539 l 37 539 l 37 626 l 117 626 q 163 806 130 734 q 247 922 197 878 q 359 984 296 966 q 490 1003 421 1003 q 600 990 552 1003 q 683 956 649 978 q 735 906 717 935 q 753 842 753 876 q 741 797 753 819 q 708 760 730 776 q 654 734 686 743 q 580 724 622 724 q 575 791 580 757 q 558 852 570 825 q 526 897 546 880 q 476 915 506 915 q 420 903 446 915 q 373 858 394 891 q 339 770 353 826 q 319 626 325 714 l 575 626 l 575 539 l 315 539 l 315 493 l 315 454 l 519 454 l 519 368 l 321 368 q 383 158 333 228 q 527 89 433 89 q 590 98 561 89 q 642 121 619 106 q 684 157 666 137 q 714 202 702 178 q 736 174 729 190 q 744 138 744 157 q 731 85 744 112 q 689 35 718 57 q 613 0 660 13 q 500 -14 567 -14 "},"в":{"x_min":23.703125,"x_max":803,"ha":863,"o":"m 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 461 745 q 690 699 616 745 q 765 567 765 654 q 752 494 765 525 q 719 441 740 463 q 668 407 697 419 q 602 390 638 394 l 602 383 q 679 368 642 379 q 742 335 715 356 q 786 282 770 314 q 803 206 803 251 q 785 123 803 161 q 730 57 767 84 q 637 15 693 30 q 502 0 580 0 l 23 0 l 23 73 m 448 79 q 509 85 484 79 q 550 106 534 91 q 574 148 566 122 q 581 216 581 175 q 572 277 581 253 q 545 316 563 301 q 501 337 527 331 q 441 343 475 343 l 349 343 l 349 79 l 448 79 m 556 551 q 551 600 556 578 q 531 636 545 621 q 496 658 518 650 q 442 665 474 665 l 349 665 l 349 424 l 442 424 q 531 457 505 424 q 556 551 556 491 "},"Η":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 475 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 877 168 861 q 146 903 156 894 q 123 915 136 911 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 902 417 911 q 392 875 398 892 q 387 827 387 857 l 387 560 l 749 560 l 749 827 q 743 875 749 857 q 728 902 738 892 q 705 915 718 911 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 902 999 911 q 974 875 979 892 q 969 827 969 857 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 "},"С":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 "},"ß":{"x_min":8.109375,"x_max":925,"ha":981,"o":"m 139 758 q 166 905 139 845 q 243 1001 194 964 q 357 1054 291 1038 q 499 1070 423 1070 q 663 1044 596 1070 q 772 970 730 1019 q 834 849 815 921 q 854 682 853 776 l 776 682 q 713 678 742 682 q 661 663 683 674 q 626 634 639 652 q 613 588 613 616 q 622 546 613 564 q 649 511 630 527 q 696 479 667 495 q 768 444 726 463 q 841 398 811 423 q 890 343 871 372 q 916 283 908 314 q 925 219 925 252 q 906 116 925 160 q 852 43 887 72 q 767 0 817 14 q 651 -14 716 -14 q 532 -1 588 -14 q 430 36 475 11 l 430 205 l 505 205 q 521 152 509 177 q 551 108 533 127 q 593 78 569 89 q 645 67 617 67 q 719 91 692 67 q 747 161 747 116 q 740 206 747 185 q 718 246 734 227 q 675 283 702 265 q 606 320 648 301 q 522 371 556 344 q 468 430 488 399 q 440 495 448 461 q 432 565 432 529 q 448 648 432 614 q 495 707 465 683 q 566 743 525 730 q 657 758 608 755 q 645 866 656 822 q 615 939 635 911 q 567 979 596 966 q 503 992 539 992 q 439 980 468 992 q 390 944 410 968 q 359 883 370 920 q 348 796 348 846 l 348 0 l 8 0 l 8 73 l 67 73 q 95 76 82 73 q 118 89 108 80 q 133 116 128 99 q 139 164 139 134 l 139 648 l 27 648 l 27 745 l 139 745 l 139 758 "},"њ":{"x_min":23.703125,"x_max":1245,"ha":1280,"o":"m 952 745 l 952 665 l 934 665 q 890 661 911 665 q 854 647 869 657 q 829 621 838 637 q 820 580 820 605 l 820 424 l 925 424 q 1047 416 990 424 q 1149 386 1105 408 q 1219 324 1193 364 q 1245 218 1245 283 q 1226 131 1245 171 q 1168 62 1207 91 q 1070 16 1129 33 q 932 0 1011 0 l 514 0 l 514 73 l 517 73 q 616 158 616 73 l 616 343 l 343 343 l 343 164 q 352 116 343 134 q 375 89 361 99 q 404 76 388 80 q 434 73 420 73 l 437 73 l 437 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 437 745 l 437 671 l 434 671 q 404 668 420 671 q 375 655 388 664 q 352 628 361 646 q 343 580 343 610 l 343 423 l 616 423 l 616 586 q 589 651 616 631 q 516 671 563 671 l 514 671 l 514 745 l 952 745 m 896 80 q 955 88 931 80 q 994 112 979 96 q 1016 156 1009 129 q 1023 222 1023 183 q 989 316 1023 288 q 891 343 954 343 l 820 343 l 820 80 l 896 80 "},"Ű":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 338 1071 l 338 1089 q 368 1137 352 1111 q 400 1190 384 1163 q 430 1243 416 1217 q 455 1293 445 1269 l 633 1293 l 633 1278 q 612 1250 625 1266 q 582 1214 599 1233 q 545 1175 565 1195 q 506 1136 526 1155 q 468 1100 487 1117 q 434 1071 449 1083 l 338 1071 m 602 1071 l 602 1089 q 632 1137 616 1111 q 664 1190 648 1163 q 694 1243 680 1217 q 719 1293 708 1269 l 896 1293 l 896 1278 q 875 1250 888 1266 q 845 1214 862 1233 q 809 1175 828 1195 q 770 1136 789 1155 q 731 1100 750 1117 q 697 1071 713 1083 l 602 1071 "},"c":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 "},"¶":{"x_min":56,"x_max":815.5625,"ha":871,"o":"m 583 969 l 466 969 l 466 -154 l 234 -154 l 234 -80 l 253 -80 q 297 -77 276 -80 q 333 -64 318 -74 q 357 -33 348 -53 q 367 18 367 -14 l 367 536 l 268 536 q 166 558 207 536 q 101 617 125 580 q 66 704 77 655 q 56 808 56 753 q 67 909 56 863 q 104 987 79 954 q 171 1037 130 1019 q 270 1055 211 1055 l 815 1055 l 815 981 l 797 981 q 753 978 774 981 q 717 964 732 974 q 692 934 701 953 q 684 881 684 914 l 684 18 q 692 -33 684 -14 q 717 -64 701 -53 q 753 -77 732 -74 q 797 -80 774 -80 l 815 -80 l 815 -154 l 583 -154 l 583 969 "},"Ή":{"x_min":-52,"x_max":1267.859375,"ha":1307,"o":"m 788 0 l 788 73 l 848 73 q 875 76 862 73 q 898 89 888 80 q 913 116 908 99 q 919 164 919 134 l 919 475 l 557 475 l 557 164 q 562 116 557 134 q 578 89 568 99 q 600 76 587 80 q 628 73 613 73 l 687 73 l 687 0 l 208 0 l 208 73 l 266 73 q 294 76 281 73 q 317 89 307 80 q 332 116 327 99 q 338 164 338 134 l 338 833 q 332 877 338 861 q 316 903 326 894 q 293 915 306 911 q 266 918 281 918 l 208 918 l 208 992 l 687 992 l 687 918 l 628 918 q 600 915 613 918 q 578 902 587 911 q 562 875 568 892 q 557 827 557 857 l 557 560 l 919 560 l 919 827 q 913 875 919 857 q 898 902 908 892 q 875 915 888 911 q 848 918 862 918 l 788 918 l 788 992 l 1267 992 l 1267 918 l 1209 918 q 1182 915 1195 918 q 1159 902 1169 911 q 1144 875 1149 892 q 1139 827 1139 857 l 1139 156 q 1144 112 1139 129 q 1160 87 1150 96 q 1182 76 1170 79 q 1209 73 1195 73 l 1267 73 l 1267 0 l 788 0 m -52 788 q -37 835 -45 809 q -22 888 -30 861 q -8 943 -15 916 q 1 993 -2 969 l 191 993 l 191 978 q 164 930 181 957 q 128 875 148 903 q 86 820 108 847 q 44 770 64 793 l -52 770 l -52 788 "},"Ὅ":{"x_min":-289.125,"x_max":1040,"ha":1117,"o":"m 1040 496 q 1009 287 1040 382 q 918 126 978 193 q 771 22 858 59 q 571 -14 684 -14 q 364 22 452 -14 q 217 126 275 59 q 130 288 159 193 q 101 498 101 382 q 130 707 101 613 q 217 867 159 801 q 364 970 276 934 q 572 1007 453 1007 q 772 970 685 1007 q 918 867 859 934 q 1009 706 978 800 q 1040 496 1040 612 m 334 496 q 347 319 334 397 q 388 187 360 241 q 461 104 416 133 q 571 76 506 76 q 681 104 636 76 q 753 187 726 133 q 794 319 781 241 q 806 496 806 397 q 794 674 806 596 q 753 806 781 752 q 681 888 726 860 q 572 916 636 916 q 462 888 507 916 q 388 806 416 860 q 347 674 360 752 q 334 496 334 596 m -289 858 q -278 904 -289 881 q -243 947 -267 927 q -182 980 -219 966 q -90 1003 -144 995 l -90 952 q -163 925 -139 937 q -186 893 -186 912 q -174 874 -186 880 q -146 862 -161 868 q -118 848 -131 857 q -106 820 -106 839 q -127 780 -106 795 q -193 765 -148 765 q -230 770 -213 765 q -261 787 -248 775 q -281 816 -274 798 q -289 858 -289 834 m -41 787 q -26 834 -34 808 q -11 887 -18 859 q 2 941 -3 914 q 13 991 9 968 l 174 991 l 174 977 q 149 928 165 955 q 116 874 134 901 q 78 819 98 846 q 42 770 59 792 l -41 770 l -41 787 "},"γ":{"x_min":-42.34375,"x_max":735,"ha":798,"o":"m 150 758 q 242 721 203 758 q 315 608 281 684 q 381 414 348 532 q 453 133 413 296 q 519 231 489 176 q 569 343 548 286 q 601 455 590 400 q 612 553 612 510 q 594 624 612 596 q 539 661 576 651 q 564 732 539 707 q 629 758 589 758 q 682 746 661 758 q 714 715 702 734 q 730 672 726 696 q 735 623 735 648 q 723 518 735 573 q 692 406 711 462 q 646 295 672 350 q 591 192 620 241 q 530 103 561 143 q 470 35 499 63 q 471 15 471 26 q 472 -8 472 3 q 473 -31 472 -19 q 473 -50 473 -42 q 460 -168 473 -116 q 425 -258 448 -221 q 373 -314 403 -294 q 307 -334 342 -334 q 237 -306 259 -334 q 215 -234 215 -279 q 222 -171 215 -204 q 240 -107 229 -139 q 266 -44 251 -74 q 295 10 280 -14 q 229 261 261 144 q 165 463 196 377 q 103 599 134 550 q 40 649 72 649 q 11 644 26 649 q -15 631 -2 639 l -42 688 q -2 713 -24 701 q 44 735 19 725 q 96 751 69 745 q 150 758 123 758 "},"­":{"x_min":35,"x_max":396,"ha":431,"o":"m 35 306 l 35 452 l 396 452 l 396 306 l 35 306 "},":":{"x_min":97,"x_max":325,"ha":423,"o":"m 97 99 q 105 152 97 131 q 129 187 114 174 q 166 205 145 200 q 211 211 187 211 q 254 205 234 211 q 291 187 275 200 q 315 152 306 174 q 325 99 325 131 q 315 47 325 68 q 291 13 306 26 q 254 -5 275 0 q 211 -11 234 -11 q 166 -5 187 -11 q 129 13 145 0 q 105 47 114 26 q 97 99 97 68 m 97 646 q 105 699 97 677 q 129 733 114 720 q 166 751 145 746 q 211 757 187 757 q 254 751 234 757 q 291 733 275 746 q 315 699 306 720 q 325 646 325 677 q 315 593 325 614 q 291 559 306 572 q 254 540 275 546 q 211 535 234 535 q 166 540 187 535 q 129 559 145 546 q 105 593 114 572 q 97 646 97 614 "},"ś":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 m 262 860 q 295 905 276 879 q 332 958 313 931 q 368 1013 351 986 q 395 1064 384 1040 l 614 1064 l 614 1049 q 571 1004 601 1031 q 504 946 541 976 q 428 889 467 917 q 356 842 388 860 l 262 842 l 262 860 "}," ":{"x_min":0,"x_max":0,"ha":361},"У":{"x_min":0,"x_max":964,"ha":964,"o":"m 964 918 l 937 918 q 903 914 917 918 q 877 897 889 909 q 855 863 866 884 q 832 810 845 842 l 629 287 q 585 184 606 228 q 542 107 565 139 q 491 54 518 75 q 428 21 464 33 q 347 4 393 9 q 241 0 301 0 l 155 0 l 155 80 l 216 80 q 287 87 251 80 q 354 106 322 93 q 409 138 385 119 q 444 183 432 157 l 116 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 38 918 l 0 918 l 0 992 l 476 992 l 476 918 l 426 918 q 370 905 390 918 q 351 861 351 892 q 357 823 351 842 q 375 782 364 804 l 480 558 q 505 506 492 533 q 528 452 517 479 q 548 398 540 424 q 562 348 557 371 q 581 407 571 377 q 607 476 592 437 l 708 754 q 727 813 721 788 q 734 850 734 838 q 712 902 734 886 q 643 918 689 918 l 614 918 l 614 992 l 964 992 l 964 918 "},"¾":{"x_min":54,"x_max":1139.84375,"ha":1167,"o":"m 324 854 q 309 920 324 897 q 259 943 295 943 q 223 933 237 943 q 200 906 208 923 q 187 868 191 890 q 184 822 184 846 q 134 824 156 822 q 96 834 111 827 q 71 852 80 840 q 63 881 63 863 q 76 930 63 907 q 114 969 89 953 q 176 996 139 986 q 262 1006 214 1006 q 348 996 310 1006 q 415 969 387 987 q 458 926 443 951 q 473 868 473 900 q 435 768 473 807 q 331 714 397 730 l 331 706 q 392 694 362 702 q 445 672 422 687 q 482 633 468 657 q 497 571 497 609 q 471 485 497 520 q 405 429 445 450 q 318 398 366 407 q 229 389 271 389 q 126 399 172 389 q 54 422 81 409 l 54 494 q 87 482 68 488 q 127 471 106 476 q 170 463 148 466 q 212 460 191 460 q 315 486 278 460 q 352 574 352 513 q 314 645 352 620 q 201 670 277 670 l 155 670 l 155 736 l 201 736 q 249 744 226 736 q 288 768 272 752 q 314 806 305 784 q 324 854 324 828 m 420 0 l 312 0 l 807 992 l 915 992 l 420 0 m 1032 163 l 1032 114 q 1036 86 1032 97 q 1049 70 1041 76 q 1068 63 1057 65 q 1090 62 1078 62 l 1118 62 l 1118 1 l 798 1 l 798 62 l 837 62 q 859 63 848 62 q 877 70 869 65 q 889 86 884 76 q 894 114 894 97 l 894 163 l 630 163 l 630 218 l 906 601 l 1032 601 l 1032 237 l 1139 237 l 1139 163 l 1032 163 m 894 403 q 896 446 894 425 q 901 493 897 468 q 889 471 895 482 q 880 454 883 459 l 721 237 l 894 237 l 894 403 "},"Ί":{"x_min":-52,"x_max":687.953125,"ha":726,"o":"m 208 0 l 208 73 l 266 73 q 295 76 282 73 q 317 89 308 80 q 332 116 327 99 q 338 164 338 134 l 338 827 q 332 875 338 857 q 317 902 327 892 q 295 915 308 911 q 266 918 282 918 l 208 918 l 208 992 l 687 992 l 687 918 l 629 918 q 601 915 614 918 q 578 902 588 911 q 563 875 569 892 q 558 827 558 857 l 558 164 q 563 116 558 134 q 578 89 569 99 q 601 76 588 80 q 629 73 614 73 l 687 73 l 687 0 l 208 0 m -52 788 q -37 835 -45 809 q -22 888 -30 861 q -8 943 -15 916 q 1 993 -2 969 l 191 993 l 191 978 q 164 930 181 957 q 128 875 148 903 q 86 820 108 847 q 44 770 64 793 l -52 770 l -52 788 "},"ŉ":{"x_min":21.96875,"x_max":1150.65625,"ha":1188,"o":"m 842 0 l 842 456 q 836 536 842 501 q 817 595 830 571 q 782 631 804 618 q 731 643 761 643 q 673 626 696 643 q 636 579 650 608 q 617 510 623 549 q 610 429 610 471 l 610 164 q 618 117 610 134 q 638 89 625 99 q 669 76 650 80 q 711 73 688 73 l 715 73 l 715 0 l 288 0 l 288 73 l 291 73 q 334 76 315 73 q 369 90 354 80 q 391 119 383 100 q 400 169 400 138 l 400 580 q 392 627 400 610 q 372 655 385 645 q 341 668 359 664 q 299 671 322 671 l 295 671 l 295 745 l 587 745 l 605 645 l 612 645 q 656 707 633 684 q 706 743 679 730 q 762 758 732 755 q 824 762 791 762 q 920 746 877 762 q 992 698 962 730 q 1037 615 1021 665 q 1053 494 1053 564 l 1053 172 q 1058 120 1053 139 q 1076 90 1064 101 q 1105 77 1087 80 q 1146 73 1122 73 l 1150 73 l 1150 0 l 842 0 m 271 839 q 257 753 271 795 q 214 676 243 712 q 136 613 184 641 q 21 567 89 585 l 21 638 q 75 660 52 649 q 113 684 98 671 q 136 711 128 696 q 144 747 144 727 q 136 769 144 761 q 118 784 129 777 q 93 800 106 792 q 69 820 80 807 q 50 850 57 832 q 43 896 43 868 q 71 967 43 943 q 142 992 100 992 q 236 951 201 992 q 271 839 271 910 "},"Ģ":{"x_min":77,"x_max":1029.375,"ha":1068,"o":"m 587 -14 q 362 22 458 -14 q 203 126 266 59 q 108 288 139 193 q 77 497 77 382 q 110 703 77 609 q 208 864 143 796 q 370 968 273 931 q 594 1006 467 1006 q 746 993 681 1006 q 854 959 811 980 q 920 908 898 937 q 941 844 941 878 q 930 798 941 820 q 895 761 918 777 q 839 735 872 744 q 762 726 806 726 q 751 803 762 768 q 720 864 741 839 q 666 903 699 889 q 590 917 634 917 q 461 889 514 917 q 374 807 407 861 q 325 675 340 754 q 310 497 310 597 q 326 318 310 396 q 377 188 342 241 q 469 107 413 135 q 608 80 526 80 q 659 82 634 80 q 709 89 685 84 l 709 293 q 684 371 709 349 q 610 392 659 392 l 592 392 l 592 466 l 1029 466 l 1029 392 l 1011 392 q 974 387 990 392 q 948 370 958 382 q 933 338 938 358 q 929 288 929 318 l 929 60 q 764 4 847 23 q 587 -14 682 -14 m 430 -289 q 444 -242 436 -268 q 460 -189 452 -216 q 474 -134 467 -161 q 484 -85 480 -108 l 646 -85 l 646 -98 q 621 -147 636 -120 q 587 -202 605 -174 q 550 -257 569 -230 q 513 -307 531 -285 l 430 -307 l 430 -289 "},"m":{"x_min":27.78125,"x_max":1332.984375,"ha":1369,"o":"m 582 0 l 582 456 q 576 536 582 501 q 557 595 570 571 q 522 631 544 618 q 470 643 501 643 q 413 626 436 643 q 376 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 584 q 131 631 139 614 q 111 659 124 649 q 80 672 98 669 q 38 675 61 675 l 34 675 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 419 730 q 501 758 472 755 q 563 762 531 762 q 694 734 640 762 q 773 645 748 707 l 786 645 q 831 707 807 684 q 884 743 856 730 q 943 758 912 755 q 1007 762 974 762 q 1103 746 1060 762 q 1175 698 1145 730 q 1220 615 1204 665 q 1236 494 1236 564 l 1236 172 q 1241 120 1236 139 q 1259 90 1247 101 q 1288 77 1270 80 q 1328 73 1305 73 l 1332 73 l 1332 0 l 1024 0 l 1024 456 q 999 595 1024 546 q 914 643 974 643 q 858 628 881 643 q 821 585 835 612 q 799 521 806 557 q 792 445 792 485 l 792 172 q 798 120 792 139 q 815 90 804 101 q 845 77 827 80 q 886 73 862 73 l 890 73 l 890 0 l 582 0 "},"Е":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 "},"ž":{"x_min":25,"x_max":694,"ha":735,"o":"m 511 94 q 547 100 532 94 q 572 120 562 106 q 590 155 583 133 q 603 207 597 176 l 611 252 l 694 252 l 687 0 l 25 0 l 25 56 l 435 650 l 232 650 q 204 645 216 650 q 184 630 193 641 q 167 600 175 618 q 152 553 160 581 l 144 520 l 61 520 l 77 745 l 678 745 l 678 685 l 266 94 l 511 94 m 142 1064 l 238 1064 q 271 1036 252 1052 q 311 1004 291 1021 q 352 970 332 986 q 388 938 372 953 q 423 970 403 953 q 464 1004 443 986 q 505 1036 485 1021 q 539 1064 525 1052 l 635 1064 l 635 1045 q 597 1000 618 1026 q 553 947 575 974 q 512 892 531 919 q 482 842 493 865 l 295 842 q 265 892 284 865 q 224 947 245 919 q 180 1000 202 974 q 142 1045 158 1026 l 142 1064 "},"á":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 316 860 q 349 905 330 879 q 386 958 367 931 q 422 1013 405 986 q 449 1064 438 1040 l 668 1064 l 668 1049 q 625 1004 655 1031 q 558 946 595 976 q 482 889 521 917 q 410 842 442 860 l 316 842 l 316 860 "},"×":{"x_min":112.8125,"x_max":662.859375,"ha":777,"o":"m 387 427 l 183 222 l 112 293 l 316 498 l 112 702 l 183 772 l 387 568 l 591 773 l 662 702 l 457 497 l 662 291 l 593 222 l 387 427 "},"п":{"x_min":23.703125,"x_max":908.296875,"ha":932,"o":"m 908 73 l 908 0 l 487 0 l 487 73 l 490 73 q 520 76 504 73 q 550 89 536 80 q 572 116 563 99 q 582 164 582 134 l 582 665 l 349 665 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 444 73 l 444 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 908 745 l 908 671 l 892 671 q 859 668 877 671 q 827 656 842 665 q 802 630 812 647 q 793 586 793 614 l 793 164 q 802 116 793 134 q 827 89 812 99 q 859 76 841 80 q 892 73 877 73 l 908 73 "},"Ǻ":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 695 966 q 680 898 695 927 q 641 849 665 868 l 916 164 q 937 120 926 137 q 962 92 949 103 q 990 78 975 82 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 102 690 92 q 701 124 701 111 q 698 154 701 140 q 690 179 694 168 l 646 293 l 303 293 l 265 197 q 252 161 259 181 q 245 124 245 140 q 251 103 245 112 q 265 87 256 94 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 91 71 81 q 109 119 98 101 q 134 165 121 137 l 416 847 q 375 896 390 866 q 361 966 361 926 q 373 1032 361 1004 q 409 1079 386 1060 q 462 1109 432 1099 q 528 1119 493 1119 q 593 1109 562 1119 q 646 1079 623 1099 q 682 1032 669 1060 q 695 966 695 1004 m 539 575 q 524 620 532 596 q 508 670 516 645 q 493 722 500 696 q 481 769 486 747 q 467 726 475 750 q 449 677 458 702 q 431 627 440 652 q 414 580 422 602 l 336 378 l 610 378 l 539 575 m 434 1166 q 467 1203 448 1182 q 505 1246 486 1224 q 541 1290 524 1268 q 569 1331 558 1311 l 787 1331 l 787 1320 q 744 1283 774 1305 q 677 1236 714 1261 q 600 1190 640 1212 q 528 1153 560 1167 l 434 1153 l 434 1166 m 610 966 q 603 1001 610 987 q 586 1025 597 1015 q 559 1038 574 1034 q 528 1042 544 1042 q 496 1038 511 1042 q 470 1025 481 1034 q 452 1001 459 1015 q 445 966 445 987 q 467 911 445 928 q 521 892 489 893 l 534 892 q 588 911 566 893 q 610 966 610 928 "},"K":{"x_min":38.453125,"x_max":1019,"ha":1019,"o":"m 602 739 q 640 782 625 763 q 664 818 655 802 q 677 850 673 835 q 681 879 681 865 q 664 911 681 902 q 603 920 646 920 l 603 992 l 980 992 l 980 920 q 926 911 951 920 q 876 886 901 902 q 828 847 852 869 q 780 797 804 825 l 597 596 l 855 185 q 894 131 875 153 q 932 97 913 110 q 970 79 951 84 q 1013 73 990 73 l 1019 73 l 1019 0 l 944 0 q 851 3 891 0 q 781 13 811 6 q 729 30 751 20 q 691 55 707 41 q 661 87 675 69 q 635 127 648 105 l 448 447 l 387 398 l 387 164 q 392 116 387 134 q 408 89 398 99 q 431 76 417 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 504 l 602 739 "},"7":{"x_min":61,"x_max":731,"ha":777,"o":"m 228 0 l 599 840 l 233 840 q 176 822 195 840 q 152 770 156 804 l 144 700 l 61 700 l 67 992 l 731 992 l 731 924 l 346 0 l 228 0 "},"¨":{"x_min":175,"x_max":625,"ha":802,"o":"m 175 955 q 181 995 175 978 q 199 1022 188 1011 q 225 1036 210 1032 q 256 1041 240 1041 q 287 1036 273 1041 q 314 1022 302 1032 q 332 995 325 1011 q 340 955 340 978 q 332 915 340 931 q 314 888 325 898 q 287 873 302 878 q 256 869 273 869 q 225 873 240 869 q 199 888 210 878 q 181 915 188 898 q 175 955 175 931 m 460 955 q 466 995 460 978 q 485 1022 473 1011 q 511 1036 496 1032 q 543 1041 526 1041 q 573 1036 558 1041 q 599 1022 587 1032 q 617 995 610 1011 q 625 955 625 978 q 617 915 625 931 q 599 888 610 898 q 573 873 587 878 q 543 869 558 869 q 511 873 526 869 q 485 888 496 878 q 466 915 473 898 q 460 955 460 931 "},"Y":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 "},"E":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 "},"Ô":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 299 1089 q 337 1134 315 1108 q 381 1187 359 1160 q 422 1242 402 1215 q 452 1293 441 1269 l 639 1293 q 669 1242 650 1269 q 710 1187 688 1215 q 754 1134 732 1160 q 792 1089 775 1108 l 792 1071 l 696 1071 q 662 1098 682 1082 q 621 1130 642 1113 q 580 1164 600 1147 q 545 1195 560 1181 q 509 1164 529 1181 q 468 1130 489 1147 q 428 1098 448 1113 q 395 1071 409 1082 l 299 1071 l 299 1089 "},"Є":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 440 892 483 917 q 368 818 396 866 q 326 700 340 770 q 310 539 313 629 l 636 539 l 636 455 l 310 455 q 330 297 313 365 q 380 185 346 230 q 465 118 413 140 q 590 96 517 96 "},"Ï":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 53 1184 q 59 1224 53 1207 q 77 1251 66 1240 q 103 1265 88 1261 q 134 1270 118 1270 q 165 1265 151 1270 q 192 1251 180 1261 q 210 1224 203 1240 q 218 1184 218 1207 q 210 1144 218 1160 q 192 1117 203 1127 q 165 1102 180 1107 q 134 1098 151 1098 q 103 1102 118 1098 q 77 1117 88 1107 q 59 1144 66 1127 q 53 1184 53 1160 m 338 1184 q 344 1224 338 1207 q 363 1251 351 1240 q 389 1265 374 1261 q 421 1270 404 1270 q 451 1265 436 1270 q 477 1251 465 1261 q 495 1224 488 1240 q 503 1184 503 1207 q 495 1144 503 1160 q 477 1117 488 1127 q 451 1102 465 1107 q 421 1098 436 1098 q 389 1102 404 1098 q 363 1117 374 1107 q 344 1144 351 1127 q 338 1184 338 1160 "},"ġ":{"x_min":3,"x_max":772,"ha":778,"o":"m 772 717 q 767 687 772 702 q 751 662 762 672 q 720 644 740 651 q 672 638 701 638 q 668 663 672 652 q 656 681 664 674 q 639 693 649 689 q 619 696 630 696 q 594 692 608 696 q 574 681 581 687 q 600 646 588 666 q 622 603 612 626 q 636 555 631 580 q 642 504 642 530 q 625 408 642 452 q 574 331 608 363 q 486 280 539 298 q 361 262 433 262 q 342 262 353 262 q 319 263 330 262 q 297 264 307 263 q 281 266 286 265 q 263 254 272 261 q 246 238 253 247 q 235 218 239 229 q 230 195 230 207 q 248 161 230 172 q 295 151 266 151 l 464 151 q 583 136 533 151 q 666 94 633 121 q 715 27 699 67 q 731 -61 731 -11 q 706 -176 731 -125 q 632 -261 682 -226 q 506 -315 582 -296 q 327 -334 431 -334 q 83 -284 163 -334 q 3 -140 3 -235 q 51 -26 3 -66 q 190 20 99 13 q 153 39 171 28 q 120 65 135 49 q 97 100 106 80 q 89 144 89 119 q 98 186 89 167 q 123 224 107 206 q 162 258 139 242 q 212 289 185 274 q 156 320 182 300 q 111 366 130 339 q 81 428 92 393 q 71 504 71 462 q 141 694 71 627 q 361 762 212 762 q 453 749 410 762 q 526 719 495 736 q 552 745 538 731 q 583 770 566 759 q 623 789 601 782 q 671 797 644 797 q 715 790 696 797 q 746 773 733 784 q 765 748 759 762 q 772 717 772 733 m 167 -137 q 208 -223 167 -195 q 330 -250 250 -250 q 508 -215 452 -250 q 564 -111 564 -180 q 536 -49 564 -67 q 452 -32 508 -32 l 290 -32 q 247 -35 269 -32 q 208 -51 226 -39 q 178 -83 190 -62 q 167 -137 167 -104 m 260 504 q 265 438 260 468 q 281 388 270 409 q 311 355 293 367 q 357 344 330 344 q 403 355 384 344 q 432 387 421 366 q 447 439 443 409 q 452 506 452 469 q 447 577 452 545 q 431 631 442 608 q 401 666 420 653 q 355 678 383 678 q 310 665 328 678 q 280 629 292 652 q 264 574 269 606 q 260 504 260 542 m 239 969 q 248 1014 239 995 q 273 1045 257 1033 q 310 1063 289 1057 q 357 1069 331 1069 q 402 1063 380 1069 q 440 1045 424 1057 q 466 1014 456 1033 q 476 969 476 995 q 466 924 476 943 q 440 893 456 905 q 402 875 424 881 q 357 869 380 869 q 310 875 331 869 q 273 893 289 881 q 248 924 257 905 q 239 969 239 943 "},"έ":{"x_min":52,"x_max":691,"ha":743,"o":"m 285 560 q 290 512 285 535 q 306 470 296 488 q 333 440 317 452 q 369 426 348 428 q 433 442 398 434 q 500 450 468 450 q 549 437 531 450 q 567 397 567 425 q 542 346 567 366 q 474 327 517 327 q 445 329 463 327 q 407 335 427 331 q 370 344 387 339 q 340 353 352 348 q 285 308 306 343 q 265 219 265 273 q 309 122 265 155 q 436 89 353 89 q 512 98 478 89 q 574 121 546 107 q 622 155 601 136 q 659 192 643 173 q 681 169 671 186 q 691 135 691 153 q 674 79 691 106 q 619 31 657 52 q 521 -1 582 11 q 374 -14 461 -14 q 232 3 292 -14 q 131 51 171 21 q 71 122 91 81 q 52 209 52 163 q 65 280 52 251 q 100 328 78 308 q 149 362 121 348 q 208 385 178 375 l 208 393 q 152 419 177 402 q 109 459 127 437 q 81 509 91 482 q 72 563 72 535 q 94 648 72 611 q 156 710 116 685 q 254 748 196 735 q 383 761 311 761 q 509 747 456 761 q 597 713 563 734 q 648 667 632 693 q 664 615 664 640 q 617 551 664 571 q 474 531 571 531 q 450 642 474 602 q 378 682 426 682 q 334 672 352 682 q 305 645 316 662 q 290 607 294 629 q 285 560 285 585 m 311 860 q 325 907 317 881 q 340 960 332 932 q 354 1014 347 987 q 364 1064 360 1041 l 554 1064 l 554 1050 q 527 1001 544 1028 q 491 947 511 974 q 449 892 471 919 q 407 842 427 865 l 311 842 l 311 860 "}," ":{"x_min":0,"x_max":0,"ha":463},"ϋ":{"x_min":37.6875,"x_max":815,"ha":879,"o":"m 458 -14 q 315 7 376 -14 q 213 69 253 29 q 153 165 173 109 q 134 291 134 222 l 134 586 q 127 630 134 613 q 109 656 121 647 q 80 668 98 665 q 37 671 62 671 l 37 745 l 343 745 l 343 291 q 355 198 343 237 q 387 136 366 160 q 440 100 409 112 q 511 89 472 89 q 601 111 563 89 q 664 173 639 133 q 701 268 689 213 q 713 390 713 324 q 698 503 713 456 q 658 580 682 549 q 607 627 634 610 q 556 650 579 643 q 562 691 556 671 q 580 724 568 710 q 610 747 592 739 q 652 756 628 756 q 718 732 688 756 q 769 666 747 709 q 802 562 790 623 q 815 425 815 501 q 808 317 815 371 q 786 214 802 263 q 743 124 770 165 q 677 51 717 82 q 584 3 638 20 q 458 -14 530 -14 m 240 955 q 246 995 240 978 q 264 1022 253 1011 q 290 1036 275 1032 q 321 1041 305 1041 q 352 1036 338 1041 q 379 1022 367 1032 q 397 995 390 1011 q 405 955 405 978 q 397 915 405 931 q 379 888 390 898 q 352 873 367 878 q 321 869 338 869 q 290 873 305 869 q 264 888 275 878 q 246 915 253 898 q 240 955 240 931 m 525 955 q 531 995 525 978 q 550 1022 538 1011 q 576 1036 561 1032 q 608 1041 591 1041 q 638 1036 623 1041 q 664 1022 652 1032 q 682 995 675 1011 q 690 955 690 978 q 682 915 690 931 q 664 888 675 898 q 638 873 652 878 q 608 869 623 869 q 576 873 591 869 q 550 888 561 878 q 531 915 538 898 q 525 955 525 931 "},"й":{"x_min":23.703125,"x_max":936.296875,"ha":960,"o":"m 821 164 q 830 116 821 134 q 855 89 840 99 q 887 76 869 80 q 920 73 905 73 l 936 73 l 936 0 l 515 0 l 515 73 l 518 73 q 548 76 532 73 q 578 89 564 80 q 600 116 591 99 q 610 164 610 134 l 610 462 l 349 177 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 444 73 l 444 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 444 745 l 444 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 645 q 349 580 349 610 l 349 284 l 610 569 l 610 580 q 600 628 610 610 q 578 655 591 645 q 548 668 564 664 q 518 671 532 671 l 515 671 l 515 745 l 936 745 l 936 671 l 920 671 q 887 668 905 671 q 855 655 869 664 q 830 628 840 645 q 821 580 821 610 l 821 164 m 479 918 q 571 952 539 918 q 611 1059 603 986 l 785 1059 q 767 977 780 1016 q 721 908 754 938 q 631 859 689 877 q 479 842 573 842 q 328 859 386 842 q 237 908 270 877 q 191 977 204 938 q 174 1059 178 1016 l 347 1059 q 387 952 355 986 q 479 918 420 918 "},"b":{"x_min":23.703125,"x_max":836,"ha":901,"o":"m 836 374 q 817 200 836 273 q 762 79 798 127 q 673 8 726 31 q 551 -14 620 -14 q 478 -5 511 -14 q 420 19 446 3 q 373 58 393 36 q 339 108 353 80 l 326 108 l 287 0 l 23 0 l 23 73 l 33 73 q 71 77 52 73 q 105 90 90 80 q 129 120 120 101 q 139 170 139 139 l 139 888 q 130 936 139 918 q 106 964 121 954 q 71 978 91 974 q 29 981 51 981 l 23 981 l 23 1055 l 349 1055 l 349 817 q 348 767 349 796 q 344 712 346 737 q 339 649 341 681 l 348 649 q 428 731 378 701 q 556 761 478 761 q 676 738 624 761 q 763 668 728 715 q 817 548 799 621 q 836 374 836 475 m 491 658 q 423 641 450 658 q 379 588 396 623 q 356 500 363 553 q 349 374 349 446 q 356 253 349 306 q 379 163 363 199 q 423 108 396 127 q 492 89 451 89 q 591 163 561 89 q 622 376 622 237 q 591 588 622 518 q 491 658 561 658 "},"ύ":{"x_min":37.6875,"x_max":815,"ha":879,"o":"m 458 -14 q 315 7 376 -14 q 213 69 253 29 q 153 165 173 109 q 134 291 134 222 l 134 586 q 127 630 134 613 q 109 656 121 647 q 80 668 98 665 q 37 671 62 671 l 37 745 l 343 745 l 343 291 q 355 198 343 237 q 387 136 366 160 q 440 100 409 112 q 511 89 472 89 q 601 111 563 89 q 664 173 639 133 q 701 268 689 213 q 713 390 713 324 q 698 503 713 456 q 658 580 682 549 q 607 627 634 610 q 556 650 579 643 q 562 691 556 671 q 580 724 568 710 q 610 747 592 739 q 652 756 628 756 q 718 732 688 756 q 769 666 747 709 q 802 562 790 623 q 815 425 815 501 q 808 317 815 371 q 786 214 802 263 q 743 124 770 165 q 677 51 717 82 q 584 3 638 20 q 458 -14 530 -14 m 397 860 q 411 907 403 881 q 426 960 418 932 q 440 1014 433 987 q 450 1064 446 1041 l 640 1064 l 640 1050 q 613 1001 630 1028 q 577 947 597 974 q 535 892 557 919 q 493 842 513 865 l 397 842 l 397 860 "},"ﬂ":{"x_min":26.140625,"x_max":975.296875,"ha":999,"o":"m 550 73 q 582 76 564 73 q 614 89 599 80 q 638 116 628 99 q 648 164 648 134 l 648 817 q 638 867 647 838 q 611 923 629 897 q 567 969 594 950 q 502 988 540 988 q 400 946 435 988 q 366 811 366 903 l 366 745 l 540 745 l 540 650 l 366 650 l 366 164 q 376 116 366 134 q 400 89 386 99 q 432 76 415 80 q 464 73 450 73 l 488 73 l 488 0 l 26 0 l 26 73 l 56 73 q 88 76 71 73 q 120 89 106 80 q 145 116 135 99 q 155 164 155 134 l 155 650 l 31 650 l 31 745 l 155 745 l 155 753 q 177 886 155 828 q 245 985 199 945 q 361 1047 291 1026 q 530 1068 432 1068 q 611 1064 572 1068 q 682 1055 649 1061 l 860 1055 l 860 164 q 869 116 860 134 q 894 89 879 99 q 926 76 908 80 q 958 73 943 73 l 975 73 l 975 0 l 547 0 l 547 73 l 550 73 "},"ф":{"x_min":65,"x_max":1075,"ha":1140,"o":"m 373 -260 q 405 -257 388 -260 q 437 -245 423 -254 q 462 -218 452 -236 q 472 -171 472 -201 l 472 -7 q 303 25 379 -2 q 175 102 228 54 q 93 219 122 151 q 65 373 65 287 q 92 525 65 458 q 171 641 119 593 q 298 717 223 689 q 472 751 374 745 l 472 896 q 462 941 472 924 q 437 967 452 958 q 405 979 422 976 q 373 981 387 981 l 356 981 l 356 1055 l 672 1055 l 672 749 q 838 715 764 743 q 965 639 913 687 q 1046 524 1018 591 q 1075 373 1075 457 q 1047 219 1075 287 q 969 102 1020 151 q 842 25 917 54 q 672 -7 767 -2 l 672 -171 q 681 -218 672 -201 q 706 -245 691 -236 q 738 -257 720 -254 q 771 -260 756 -260 l 787 -260 l 787 -334 l 356 -334 l 356 -260 l 373 -260 m 273 373 q 321 169 273 245 q 472 80 370 94 l 472 660 q 321 575 369 647 q 273 373 273 502 m 866 373 q 818 573 866 499 q 672 660 770 647 l 672 81 q 819 170 771 95 q 866 373 866 245 "},"Ŋ":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 328 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 -10 q 925 -166 942 -104 q 879 -265 909 -228 q 806 -318 849 -302 q 711 -334 763 -334 l 665 -334 l 665 -253 l 698 -253 q 750 -239 725 -253 q 795 -196 775 -226 q 826 -122 814 -167 q 837 -12 837 -76 l 837 0 l 271 765 "},"Ũ":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 671 1203 q 698 1209 686 1203 q 719 1225 710 1215 q 732 1249 727 1235 q 739 1276 737 1262 l 830 1276 q 814 1197 827 1234 q 778 1131 800 1159 q 724 1087 755 1103 q 656 1071 693 1071 q 588 1084 619 1071 q 532 1114 558 1098 q 483 1145 506 1131 q 438 1158 461 1158 q 411 1152 423 1158 q 390 1136 399 1146 q 377 1112 382 1126 q 370 1085 372 1099 l 280 1085 q 295 1164 282 1127 q 332 1230 309 1202 q 386 1274 355 1258 q 454 1291 417 1291 q 522 1277 492 1291 q 578 1247 552 1263 q 627 1216 604 1230 q 671 1203 650 1203 "},"Щ":{"x_min":38.453125,"x_max":1545.9375,"ha":1589,"o":"m 1413 84 l 1545 84 l 1545 -292 l 1454 -292 q 1445 -161 1454 -216 q 1415 -70 1436 -105 q 1363 -17 1395 -34 q 1286 0 1331 0 l 38 0 l 38 73 l 96 73 q 123 76 111 73 q 146 88 136 79 q 162 114 156 97 q 168 158 168 130 l 168 828 q 162 876 168 858 q 147 903 157 893 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 495 992 l 495 918 l 450 918 q 422 915 435 918 q 399 903 409 912 q 384 876 390 893 q 378 828 378 858 l 378 84 l 685 84 l 685 828 q 679 876 685 858 q 664 903 674 893 q 641 915 654 912 q 613 918 628 918 l 568 918 l 568 992 l 1011 992 l 1011 918 l 966 918 q 939 916 952 918 q 917 904 927 913 q 901 879 907 895 q 895 835 895 863 l 895 84 l 1202 84 l 1202 828 q 1196 876 1202 858 q 1181 903 1190 893 q 1158 915 1171 912 q 1130 918 1145 918 l 1084 918 l 1084 992 l 1541 992 l 1541 918 l 1483 918 q 1456 915 1469 918 q 1433 903 1443 912 q 1418 876 1423 893 q 1413 828 1413 858 l 1413 84 "},"L":{"x_min":38.453125,"x_max":863,"ha":908,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 432 915 445 918 q 409 903 418 912 q 394 878 399 895 q 388 833 388 861 l 388 84 l 647 84 q 723 115 696 84 q 762 205 750 146 l 785 310 l 863 310 l 852 0 l 38 0 "},"ď":{"x_min":64,"x_max":1053,"ha":901,"o":"m 761 170 q 770 120 761 139 q 795 90 779 101 q 832 77 811 80 q 876 73 853 73 l 881 73 l 881 0 l 612 0 l 573 108 l 560 108 q 525 57 545 79 q 479 18 505 34 q 420 -5 453 2 q 347 -14 388 -14 q 226 8 279 -14 q 137 78 173 31 q 82 198 101 125 q 64 370 64 271 q 82 544 64 471 q 137 666 101 618 q 225 737 173 714 q 344 761 277 761 q 415 752 383 761 q 472 729 447 744 q 517 694 497 714 q 551 649 537 674 l 560 649 q 555 722 558 688 q 553 751 554 736 q 551 779 552 766 q 550 802 550 792 q 550 819 550 813 l 550 895 q 540 941 550 924 q 516 967 531 958 q 480 979 501 976 q 437 981 460 981 l 426 981 l 426 1055 l 761 1055 l 761 170 m 407 89 q 475 107 448 89 q 519 159 503 124 q 543 248 536 194 q 550 373 550 301 q 543 495 550 442 q 519 584 536 548 q 475 639 503 621 q 407 658 448 658 q 347 639 372 658 q 307 584 323 621 q 285 494 292 547 q 278 372 278 441 q 307 160 278 230 q 407 89 337 89 m 838 850 q 852 897 844 871 q 867 950 859 923 q 881 1005 874 978 q 891 1055 887 1031 l 1053 1055 l 1053 1041 q 1028 992 1043 1019 q 994 938 1012 966 q 957 882 976 909 q 920 833 938 855 l 838 833 l 838 850 "},"Ο":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 "},"Ĭ":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 277 1071 q 181 1090 222 1071 q 112 1140 140 1109 q 70 1210 84 1171 q 55 1289 56 1249 l 146 1289 q 192 1216 158 1238 q 277 1194 225 1194 q 362 1216 328 1194 q 407 1289 396 1238 l 500 1289 q 484 1210 498 1249 q 442 1140 470 1171 q 373 1090 414 1109 q 277 1071 332 1071 "},"ŧ":{"x_min":29.546875,"x_max":534,"ha":562,"o":"m 436 97 q 487 101 463 97 q 534 110 512 105 l 534 20 q 504 9 523 15 q 461 -2 485 2 q 405 -10 436 -7 q 337 -14 374 -14 q 253 -2 291 -14 q 188 34 215 8 q 148 102 162 60 q 134 205 134 144 l 134 390 l 37 390 l 37 464 l 134 464 l 134 650 l 29 650 l 29 721 q 109 738 74 721 q 165 779 144 756 q 229 917 208 824 l 343 917 l 343 745 l 521 745 l 521 650 l 343 650 l 343 464 l 499 464 l 499 390 l 343 390 l 343 219 q 365 127 343 156 q 436 97 387 97 "},"À":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 514 1071 q 442 1118 482 1089 q 365 1175 402 1146 q 298 1233 328 1205 q 256 1278 268 1260 l 256 1293 l 473 1293 q 501 1242 484 1269 q 537 1187 518 1215 q 575 1134 555 1160 q 609 1089 594 1108 l 609 1071 l 514 1071 "},"Ϊ":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 53 1184 q 59 1224 53 1207 q 77 1251 66 1240 q 103 1265 88 1261 q 134 1270 118 1270 q 165 1265 151 1270 q 192 1251 180 1261 q 210 1224 203 1240 q 218 1184 218 1207 q 210 1144 218 1160 q 192 1117 203 1127 q 165 1102 180 1107 q 134 1098 151 1098 q 103 1102 118 1098 q 77 1117 88 1107 q 59 1144 66 1127 q 53 1184 53 1160 m 338 1184 q 344 1224 338 1207 q 363 1251 351 1240 q 389 1265 374 1261 q 421 1270 404 1270 q 451 1265 436 1270 q 477 1251 465 1261 q 495 1224 488 1240 q 503 1184 503 1207 q 495 1144 503 1160 q 477 1117 488 1127 q 451 1102 465 1107 q 421 1098 436 1098 q 389 1102 404 1098 q 363 1117 374 1107 q 344 1144 351 1127 q 338 1184 338 1160 "},"ḁ":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 571 -236 q 558 -301 571 -273 q 522 -348 545 -329 q 469 -377 499 -367 q 404 -387 438 -387 q 338 -377 369 -387 q 285 -348 308 -367 q 249 -301 262 -329 q 237 -236 237 -273 q 249 -171 237 -199 q 285 -123 262 -142 q 338 -94 308 -104 q 404 -85 369 -85 q 469 -94 438 -85 q 522 -123 499 -104 q 558 -171 545 -142 q 571 -236 571 -199 m 486 -236 q 479 -201 486 -215 q 462 -178 473 -187 q 435 -165 450 -169 q 404 -161 420 -161 q 372 -165 387 -161 q 345 -178 357 -169 q 328 -201 334 -187 q 321 -236 321 -215 q 328 -270 321 -256 q 345 -293 334 -284 q 372 -306 357 -302 q 404 -311 387 -311 q 435 -306 420 -311 q 462 -293 450 -302 q 479 -270 473 -284 q 486 -236 486 -256 "},"½":{"x_min":7.015625,"x_max":1129,"ha":1167,"o":"m 300 999 l 300 512 q 305 484 300 495 q 319 468 310 474 q 339 461 327 463 q 364 460 351 460 l 421 460 l 421 399 l 29 399 l 29 460 l 99 460 q 124 461 113 460 q 144 468 135 463 q 158 484 153 474 q 163 512 163 495 l 163 906 q 105 844 130 868 q 54 821 79 821 q 20 840 34 821 q 7 889 7 860 q 62 909 32 895 q 135 952 93 923 l 197 999 l 300 999 m 364 0 l 256 0 l 751 992 l 859 992 l 364 0 m 1104 460 q 1095 402 1104 429 q 1064 345 1087 375 q 1003 280 1042 315 q 904 197 964 245 l 791 107 l 1012 107 q 1054 121 1042 107 q 1070 153 1066 134 l 1077 191 l 1129 191 l 1123 0 l 683 0 l 683 99 l 835 228 q 894 286 870 257 q 931 341 917 314 q 950 395 944 368 q 955 451 955 423 q 940 521 955 496 q 890 546 926 546 q 853 534 867 546 q 831 501 838 521 q 821 457 823 482 q 818 408 818 432 q 773 413 795 408 q 733 428 750 418 q 704 454 715 438 q 693 492 693 469 q 706 538 693 517 q 744 575 719 560 q 806 600 769 591 q 890 609 843 609 q 987 598 946 609 q 1053 568 1027 587 q 1091 521 1079 549 q 1104 460 1104 494 "},"'":{"x_min":93,"x_max":310.03125,"ha":403,"o":"m 93 992 l 310 992 l 247 610 l 155 610 l 93 992 "},"ĳ":{"x_min":23.703125,"x_max":847.078125,"ha":968,"o":"m 119 970 q 128 1015 119 996 q 153 1046 137 1034 q 190 1064 169 1058 q 237 1070 212 1070 q 282 1064 261 1070 q 320 1046 304 1058 q 346 1015 337 1034 q 356 970 356 996 q 346 925 356 944 q 320 894 337 906 q 282 876 304 882 q 237 870 261 870 q 190 876 212 870 q 153 894 169 882 q 128 925 137 906 q 119 970 119 944 m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 838 745 l 838 -10 q 812 -166 838 -104 q 740 -265 786 -228 q 629 -318 693 -302 q 488 -334 565 -334 l 461 -334 l 461 -247 l 470 -247 q 538 -235 508 -247 q 587 -194 567 -223 q 617 -118 607 -166 q 628 0 628 -71 l 628 579 q 619 627 628 609 q 595 655 610 645 q 559 668 579 664 q 516 671 539 671 l 512 671 l 512 745 l 838 745 m 609 970 q 618 1015 609 996 q 643 1046 628 1034 q 681 1064 659 1058 q 727 1070 702 1070 q 773 1064 751 1070 q 811 1046 794 1058 q 837 1015 827 1034 q 847 970 847 996 q 837 925 847 944 q 811 894 827 906 q 773 876 794 882 q 727 870 751 870 q 681 876 702 870 q 643 894 659 882 q 618 925 628 906 q 609 970 609 944 "},"Р":{"x_min":38.453125,"x_max":844,"ha":886,"o":"m 844 697 q 822 577 844 635 q 751 475 800 519 q 625 405 702 431 q 434 379 547 379 l 387 379 l 387 156 q 393 112 387 129 q 409 87 399 96 q 433 76 419 79 q 460 73 446 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 464 992 q 632 971 561 992 q 750 912 703 951 q 820 820 797 874 q 844 697 844 766 m 387 460 l 420 460 q 508 472 472 460 q 566 513 544 485 q 600 585 589 541 q 610 692 610 629 q 601 788 610 747 q 572 856 592 829 q 520 896 552 883 q 441 909 488 909 l 387 909 l 387 460 "},"˛":{"x_min":211,"x_max":536,"ha":695,"o":"m 211 -180 q 224 -118 211 -147 q 261 -65 238 -89 q 313 -24 284 -41 q 375 0 343 -7 l 482 0 q 437 -20 460 -6 q 395 -53 414 -33 q 364 -100 377 -74 q 352 -160 352 -127 q 359 -193 352 -179 q 379 -215 366 -207 q 410 -229 392 -224 q 448 -233 427 -233 q 488 -230 467 -233 q 536 -222 510 -228 l 536 -311 q 509 -321 525 -317 q 476 -327 493 -325 q 444 -332 460 -330 q 417 -334 428 -334 q 263 -297 316 -334 q 211 -180 211 -260 "},"Ć":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 m 455 1089 q 488 1134 469 1108 q 525 1187 506 1160 q 561 1242 544 1215 q 588 1293 577 1269 l 807 1293 l 807 1278 q 764 1233 794 1260 q 697 1175 734 1205 q 621 1118 660 1146 q 549 1071 581 1089 l 455 1071 l 455 1089 "},"Т":{"x_min":13,"x_max":893,"ha":907,"o":"m 563 164 q 568 116 563 134 q 584 89 574 99 q 606 76 593 80 q 634 73 619 73 l 692 73 l 692 0 l 213 0 l 213 73 l 271 73 q 300 76 287 73 q 322 89 313 80 q 337 116 332 99 q 343 164 343 134 l 343 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 886 992 l 893 723 l 800 723 l 789 809 q 780 850 787 832 q 761 881 774 868 q 726 900 747 893 q 674 907 705 907 l 563 907 l 563 164 "},"£":{"x_min":33.328125,"x_max":737,"ha":777,"o":"m 375 482 q 384 453 380 466 q 390 427 387 440 q 395 399 393 413 q 396 368 396 386 q 271 177 396 258 l 276 170 q 288 173 280 171 q 308 177 297 175 q 332 181 319 179 q 357 182 345 182 q 384 180 371 182 q 411 175 397 179 q 442 166 425 171 q 480 154 458 161 q 535 139 510 145 q 591 134 560 134 q 674 162 638 134 q 737 236 709 190 l 737 81 q 670 9 709 33 q 576 -14 631 -14 q 532 -11 554 -14 q 487 -4 509 -8 q 445 4 465 0 q 410 16 425 10 q 338 37 376 28 q 272 47 300 47 q 227 43 248 47 q 188 35 207 40 q 151 22 169 30 q 114 4 133 14 l 53 -26 l 53 98 l 97 125 q 141 158 119 139 q 182 203 164 177 q 212 263 200 229 q 224 339 224 297 q 216 412 224 379 q 194 481 207 445 l 33 481 l 33 566 l 163 566 q 147 604 155 582 q 133 650 140 626 q 122 701 126 675 q 118 754 118 728 q 197 941 118 876 q 426 1006 276 1006 q 553 993 501 1006 q 639 959 606 980 q 687 908 672 937 q 702 844 702 878 q 657 763 702 795 q 528 732 613 732 q 523 797 528 763 q 506 858 518 831 q 472 903 494 885 q 416 921 450 921 q 333 881 364 921 q 302 759 302 841 q 306 703 302 731 q 317 651 311 676 q 332 604 324 626 q 349 566 341 582 l 595 566 l 595 481 l 375 482 "},"ů":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 610 979 q 597 913 610 941 q 561 866 584 885 q 508 837 538 847 q 443 828 477 828 q 377 837 408 828 q 324 866 347 847 q 288 913 301 885 q 276 979 276 941 q 288 1044 276 1015 q 324 1091 301 1072 q 377 1120 347 1110 q 443 1130 408 1130 q 508 1120 477 1130 q 561 1091 538 1110 q 597 1044 584 1072 q 610 979 610 1015 m 525 979 q 518 1013 525 999 q 501 1036 512 1027 q 474 1049 489 1045 q 443 1053 459 1053 q 411 1049 426 1053 q 384 1036 396 1045 q 367 1013 373 1027 q 360 979 360 999 q 367 944 360 958 q 384 921 373 930 q 411 908 396 912 q 443 903 426 903 q 474 908 459 903 q 501 921 489 912 q 518 944 512 930 q 525 979 525 958 "},"Ō":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 746 1071 l 343 1071 l 343 1180 l 746 1180 l 746 1071 "},"а":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 "},"Ğ":{"x_min":77,"x_max":1029.375,"ha":1068,"o":"m 587 -14 q 362 22 458 -14 q 203 126 266 59 q 108 288 139 193 q 77 497 77 382 q 110 703 77 609 q 208 864 143 796 q 370 968 273 931 q 594 1006 467 1006 q 746 993 681 1006 q 854 959 811 980 q 920 908 898 937 q 941 844 941 878 q 930 798 941 820 q 895 761 918 777 q 839 735 872 744 q 762 726 806 726 q 751 803 762 768 q 720 864 741 839 q 666 903 699 889 q 590 917 634 917 q 461 889 514 917 q 374 807 407 861 q 325 675 340 754 q 310 497 310 597 q 326 318 310 396 q 377 188 342 241 q 469 107 413 135 q 608 80 526 80 q 659 82 634 80 q 709 89 685 84 l 709 293 q 684 371 709 349 q 610 392 659 392 l 592 392 l 592 466 l 1029 466 l 1029 392 l 1011 392 q 974 387 990 392 q 948 370 958 382 q 933 338 938 358 q 929 288 929 318 l 929 60 q 764 4 847 23 q 587 -14 682 -14 m 568 1071 q 472 1090 513 1071 q 403 1140 431 1109 q 361 1210 375 1171 q 346 1289 347 1249 l 437 1289 q 483 1216 449 1238 q 568 1194 516 1194 q 653 1216 619 1194 q 698 1289 687 1238 l 791 1289 q 775 1210 789 1249 q 733 1140 761 1171 q 664 1090 705 1109 q 568 1071 623 1071 "},"v":{"x_min":-0.234375,"x_max":842.015625,"ha":842,"o":"m 842 671 l 814 671 q 788 667 799 671 q 767 653 777 664 q 746 623 756 643 q 724 569 736 603 l 522 0 l 339 0 l 111 604 q 93 637 103 624 q 70 657 83 650 q 40 668 57 664 q 0 671 22 671 l 0 745 l 430 745 l 430 671 l 372 671 q 338 659 351 671 q 325 626 325 648 q 330 593 325 610 q 338 565 334 577 l 432 302 q 461 213 449 258 q 480 133 474 168 q 490 171 484 149 q 502 214 496 193 q 513 251 508 234 q 521 275 519 268 l 615 554 q 626 592 622 573 q 631 631 631 612 q 615 662 631 654 q 576 671 600 671 l 536 671 l 536 745 l 842 745 l 842 671 "},"Ї":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 53 1184 q 59 1224 53 1207 q 77 1251 66 1240 q 103 1265 88 1261 q 134 1270 118 1270 q 165 1265 151 1270 q 192 1251 180 1261 q 210 1224 203 1240 q 218 1184 218 1207 q 210 1144 218 1160 q 192 1117 203 1127 q 165 1102 180 1107 q 134 1098 151 1098 q 103 1102 118 1098 q 77 1117 88 1107 q 59 1144 66 1127 q 53 1184 53 1160 m 338 1184 q 344 1224 338 1207 q 363 1251 351 1240 q 389 1265 374 1261 q 421 1270 404 1270 q 451 1265 436 1270 q 477 1251 465 1261 q 495 1224 488 1240 q 503 1184 503 1207 q 495 1144 503 1160 q 477 1117 488 1127 q 451 1102 465 1107 q 421 1098 436 1098 q 389 1102 404 1098 q 363 1117 374 1107 q 344 1144 351 1127 q 338 1184 338 1160 "},"û":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 201 860 q 239 905 217 879 q 283 958 261 931 q 324 1013 304 986 q 354 1064 343 1040 l 541 1064 q 571 1013 552 1040 q 612 958 590 986 q 656 905 634 931 q 694 860 677 879 l 694 842 l 598 842 q 564 869 584 853 q 523 901 544 884 q 482 935 502 918 q 447 966 462 952 q 411 935 431 952 q 370 901 391 918 q 330 869 350 884 q 297 842 311 853 l 201 842 l 201 860 "},"Ź":{"x_min":58,"x_max":864,"ha":925,"o":"m 833 921 l 310 84 l 610 84 q 680 96 653 84 q 723 128 707 108 q 746 172 739 147 q 756 223 754 197 l 763 286 l 864 286 l 857 0 l 58 0 l 58 69 l 578 907 l 305 907 q 251 898 272 907 q 217 873 230 889 q 199 833 205 856 q 191 781 193 809 l 183 706 l 84 706 l 90 992 l 833 992 l 833 921 m 365 1089 q 398 1134 379 1108 q 435 1187 416 1160 q 471 1242 454 1215 q 498 1293 487 1269 l 717 1293 l 717 1278 q 674 1233 704 1260 q 607 1175 644 1205 q 531 1118 570 1146 q 459 1071 491 1089 l 365 1071 l 365 1089 "},"ˉ":{"x_min":146,"x_max":549,"ha":695,"o":"m 549 842 l 146 842 l 146 951 l 549 951 l 549 842 "},"Ĺ":{"x_min":38.453125,"x_max":863,"ha":908,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 432 915 445 918 q 409 903 418 912 q 394 878 399 895 q 388 833 388 861 l 388 84 l 647 84 q 723 115 696 84 q 762 205 750 146 l 785 310 l 863 310 l 852 0 l 38 0 m 234 1089 q 267 1134 248 1108 q 304 1187 285 1160 q 340 1242 323 1215 q 367 1293 356 1269 l 586 1293 l 586 1278 q 543 1233 573 1260 q 476 1175 513 1205 q 400 1118 439 1146 q 328 1071 360 1089 l 234 1071 l 234 1089 "},"₤":{"x_min":33.328125,"x_max":737,"ha":777,"o":"m 375 481 q 382 457 379 468 q 388 437 385 447 q 392 417 390 427 q 395 395 394 407 l 595 395 l 595 311 l 386 311 q 271 177 362 234 l 275 170 q 288 173 280 171 q 308 177 297 175 q 332 181 319 179 q 357 182 345 182 q 384 180 371 182 q 411 175 397 179 q 441 166 425 171 q 480 154 458 161 q 535 139 510 145 q 591 134 560 134 q 674 162 638 134 q 737 236 709 190 l 737 81 q 670 9 709 33 q 576 -14 631 -14 q 532 -11 554 -14 q 487 -4 509 -8 q 445 4 465 0 q 410 16 425 10 q 338 37 376 28 q 272 47 300 47 q 227 43 248 47 q 188 35 207 40 q 151 22 169 30 q 114 4 133 14 l 53 -26 l 53 97 l 97 125 q 137 154 116 137 q 175 193 157 171 q 206 245 193 216 q 223 311 218 275 l 33 311 l 33 395 l 219 395 q 193 481 209 438 l 33 481 l 33 566 l 163 566 q 147 604 155 582 q 133 650 140 626 q 122 701 126 675 q 118 754 118 728 q 197 941 118 876 q 426 1006 276 1006 q 553 993 501 1006 q 639 959 606 980 q 687 908 672 937 q 702 844 702 878 q 657 763 702 795 q 528 732 613 732 q 523 797 528 763 q 506 858 518 831 q 472 903 494 885 q 416 921 450 921 q 333 881 364 921 q 302 759 302 841 q 306 703 302 731 q 317 651 311 676 q 332 604 324 626 q 349 566 340 582 l 595 566 l 595 481 l 375 481 "},"Č":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 m 280 1293 l 376 1293 q 409 1265 390 1281 q 449 1233 429 1250 q 490 1199 470 1215 q 526 1167 510 1182 q 561 1199 541 1182 q 602 1233 581 1215 q 643 1265 623 1250 q 677 1293 663 1281 l 773 1293 l 773 1274 q 735 1229 756 1255 q 691 1176 713 1203 q 650 1121 669 1148 q 620 1071 631 1094 l 433 1071 q 403 1121 422 1094 q 362 1176 383 1148 q 318 1229 340 1203 q 280 1274 296 1255 l 280 1293 "},"x":{"x_min":15.59375,"x_max":887.515625,"ha":897,"o":"m 604 629 q 584 662 604 654 q 532 671 565 671 l 528 671 l 528 745 l 849 745 l 849 671 l 837 671 q 801 667 816 671 q 769 653 785 663 q 736 626 753 643 q 696 582 719 609 l 553 407 l 757 147 q 816 90 789 107 q 869 73 843 73 l 887 73 l 887 0 l 445 0 l 445 73 l 452 73 q 536 119 536 73 q 534 135 536 127 q 526 154 532 143 q 510 180 521 165 q 483 215 500 194 l 404 311 l 307 190 q 286 156 294 173 q 278 120 278 138 q 297 85 278 97 q 364 73 317 73 l 368 73 l 368 0 l 15 0 l 15 73 l 27 73 q 71 78 52 73 q 107 92 90 82 q 141 120 124 103 q 179 162 158 137 l 353 373 l 179 597 q 120 652 149 634 q 59 671 91 671 l 41 671 l 41 745 l 478 745 l 478 671 l 473 671 q 434 668 449 671 q 410 659 419 664 q 398 646 401 654 q 394 631 394 639 q 402 602 394 616 q 426 567 409 588 l 503 472 l 569 551 q 594 591 585 572 q 604 629 604 610 "},"è":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 436 842 q 364 889 404 860 q 287 946 324 917 q 220 1004 250 976 q 178 1049 190 1031 l 178 1064 l 395 1064 q 423 1013 406 1040 q 459 958 440 986 q 497 905 477 931 q 531 860 516 879 l 531 842 l 436 842 "},"Ń":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 813 0 l 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 298 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 0 l 813 0 m 484 1089 q 517 1134 498 1108 q 554 1187 535 1160 q 590 1242 573 1215 q 617 1293 606 1269 l 836 1293 l 836 1278 q 793 1233 823 1260 q 726 1175 763 1205 q 650 1118 689 1146 q 578 1071 610 1089 l 484 1071 l 484 1089 "},"ḿ":{"x_min":27.78125,"x_max":1332.984375,"ha":1369,"o":"m 582 0 l 582 456 q 576 536 582 501 q 557 595 570 571 q 522 631 544 618 q 470 643 501 643 q 413 626 436 643 q 376 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 584 q 131 631 139 614 q 111 659 124 649 q 80 672 98 669 q 38 675 61 675 l 34 675 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 419 730 q 501 758 472 755 q 563 762 531 762 q 694 734 640 762 q 773 645 748 707 l 786 645 q 831 707 807 684 q 884 743 856 730 q 943 758 912 755 q 1007 762 974 762 q 1103 746 1060 762 q 1175 698 1145 730 q 1220 615 1204 665 q 1236 494 1236 564 l 1236 172 q 1241 120 1236 139 q 1259 90 1247 101 q 1288 77 1270 80 q 1328 73 1305 73 l 1332 73 l 1332 0 l 1024 0 l 1024 456 q 999 595 1024 546 q 914 643 974 643 q 858 628 881 643 q 821 585 835 612 q 799 521 806 557 q 792 445 792 485 l 792 172 q 798 120 792 139 q 815 90 804 101 q 845 77 827 80 q 886 73 862 73 l 890 73 l 890 0 l 582 0 m 591 860 q 624 905 605 879 q 661 958 642 931 q 697 1013 680 986 q 724 1064 713 1040 l 943 1064 l 943 1049 q 900 1004 930 1031 q 833 946 870 976 q 757 889 796 917 q 685 842 717 860 l 591 842 l 591 860 "},"μ":{"x_min":112.71875,"x_max":888.453125,"ha":924,"o":"m 389 -14 q 290 7 331 -14 q 222 67 249 28 q 227 -39 222 9 q 247 -124 232 -87 q 292 -183 263 -161 q 371 -212 322 -206 q 362 -261 371 -239 q 336 -299 353 -283 q 296 -324 320 -315 q 242 -334 272 -334 q 193 -324 217 -334 q 151 -293 169 -315 q 123 -237 133 -272 q 112 -151 112 -202 q 114 -64 112 -110 q 119 35 116 -19 q 125 158 122 90 q 129 312 128 225 l 129 745 l 340 745 l 340 285 q 345 215 340 248 q 362 157 350 182 q 394 118 374 132 q 445 104 415 104 q 498 119 475 104 q 538 163 522 135 q 564 231 555 191 q 573 319 573 271 l 573 745 l 784 745 l 784 191 q 807 101 784 128 q 878 73 830 73 l 888 73 l 888 0 l 767 0 q 650 33 695 0 q 586 120 604 66 l 579 120 q 545 64 563 89 q 505 22 527 39 q 454 -4 482 4 q 389 -14 425 -14 "},".":{"x_min":97,"x_max":325,"ha":423,"o":"m 97 99 q 105 152 97 131 q 129 187 114 174 q 166 205 145 200 q 211 211 187 211 q 254 205 234 211 q 291 187 275 200 q 315 152 306 174 q 325 99 325 131 q 315 47 325 68 q 291 13 306 26 q 254 -5 275 0 q 211 -11 234 -11 q 166 -5 187 -11 q 129 13 145 0 q 105 47 114 26 q 97 99 97 68 "},"‘":{"x_min":78,"x_max":326.34375,"ha":389,"o":"m 78 719 q 91 805 78 763 q 134 882 105 846 q 211 945 164 917 q 326 992 258 973 l 326 920 q 273 898 295 909 q 235 874 250 887 q 211 847 219 862 q 204 811 204 831 q 211 789 204 797 q 230 774 219 781 q 255 758 242 766 q 279 739 267 751 q 298 708 291 727 q 306 662 306 690 q 277 591 306 615 q 205 567 248 567 q 112 607 146 567 q 78 719 78 648 "},"π":{"x_min":45,"x_max":889.71875,"ha":928,"o":"m 889 565 l 705 565 q 699 462 701 516 q 694 359 696 409 q 691 267 692 309 q 691 198 691 225 q 696 151 691 170 q 712 120 702 132 q 735 103 722 108 q 765 98 749 98 q 804 102 785 98 q 836 112 823 107 l 836 26 q 788 0 819 10 q 718 -11 757 -11 q 651 -2 680 -11 q 601 25 621 6 q 569 76 580 45 q 558 152 558 107 q 562 237 558 187 q 572 342 566 286 q 587 455 579 398 q 604 565 596 513 l 372 565 l 355 213 q 341 118 352 158 q 308 52 330 78 q 250 12 286 25 q 162 0 214 0 l 70 0 l 70 71 q 118 80 92 71 q 167 110 143 88 q 209 167 190 131 q 235 257 227 202 l 278 565 l 213 565 q 152 541 173 565 q 126 478 131 516 l 45 478 q 57 580 45 532 q 97 665 70 629 q 167 723 125 702 q 269 745 210 745 l 889 745 l 889 565 "},"9":{"x_min":49,"x_max":715,"ha":777,"o":"m 316 -14 q 209 0 252 -14 q 138 34 166 12 q 99 84 111 56 q 88 142 88 112 q 104 193 88 173 q 155 222 120 214 q 180 163 166 190 q 214 116 194 136 q 261 85 234 96 q 322 73 288 73 q 467 174 416 73 q 524 476 517 275 q 488 438 508 455 q 442 409 468 422 q 387 389 417 396 q 321 382 357 382 q 211 400 261 382 q 125 455 161 419 q 69 545 89 491 q 49 669 49 599 q 70 806 49 744 q 133 912 92 868 q 233 981 174 957 q 367 1006 292 1006 q 506 978 442 1006 q 616 894 570 951 q 689 749 663 837 q 715 539 715 661 q 692 323 715 424 q 622 147 670 222 q 498 29 574 72 q 316 -14 423 -14 m 380 482 q 467 507 431 482 q 524 575 503 533 q 512 727 523 664 q 481 832 501 791 q 435 893 462 873 q 375 913 408 913 q 283 854 315 913 q 250 677 250 795 q 283 531 250 581 q 380 482 315 482 "},"l":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 "},"Ъ":{"x_min":13,"x_max":992,"ha":1034,"o":"m 692 992 l 692 918 l 607 918 q 552 900 570 918 q 534 835 534 881 l 534 558 l 622 558 q 792 537 722 558 q 906 480 862 517 q 971 392 951 444 q 992 280 992 341 q 969 166 992 218 q 899 77 946 114 q 782 20 853 40 q 615 0 711 0 l 185 0 l 185 73 l 243 73 q 278 79 264 73 q 300 94 291 84 q 311 123 308 105 q 315 165 315 141 l 315 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 692 992 m 534 82 l 602 82 q 674 93 645 82 q 722 129 704 105 q 749 189 740 153 q 757 273 757 225 q 747 367 757 328 q 717 431 738 406 q 665 466 697 455 q 587 477 632 477 l 534 477 l 534 82 "}," ":{"x_min":0,"x_max":0,"ha":139},"Ś":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 m 341 1089 q 374 1134 355 1108 q 411 1187 392 1160 q 447 1242 430 1215 q 474 1293 463 1269 l 693 1293 l 693 1278 q 650 1233 680 1260 q 583 1175 620 1205 q 507 1118 546 1146 q 435 1071 467 1089 l 341 1071 l 341 1089 "},"Ü":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 336 1184 q 342 1224 336 1207 q 360 1251 349 1240 q 386 1265 371 1261 q 417 1270 401 1270 q 448 1265 434 1270 q 475 1251 463 1261 q 493 1224 486 1240 q 501 1184 501 1207 q 493 1144 501 1160 q 475 1117 486 1127 q 448 1102 463 1107 q 417 1098 434 1098 q 386 1102 401 1098 q 360 1117 371 1107 q 342 1144 349 1127 q 336 1184 336 1160 m 621 1184 q 627 1224 621 1207 q 646 1251 634 1240 q 672 1265 657 1261 q 704 1270 687 1270 q 734 1265 719 1270 q 760 1251 748 1261 q 778 1224 771 1240 q 786 1184 786 1207 q 778 1144 786 1160 q 760 1117 771 1127 q 734 1102 748 1107 q 704 1098 719 1098 q 672 1102 687 1098 q 646 1117 657 1107 q 627 1144 634 1127 q 621 1184 621 1160 "},"à":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 419 842 q 347 889 387 860 q 270 946 307 917 q 203 1004 233 976 q 161 1049 173 1031 l 161 1064 l 378 1064 q 406 1013 389 1040 q 442 958 423 986 q 480 905 460 931 q 514 860 499 879 l 514 842 l 419 842 "},"η":{"x_min":93.0625,"x_max":809.453125,"ha":913,"o":"m 129 470 q 125 543 129 504 q 117 620 122 582 q 105 691 112 658 q 93 745 99 724 l 276 745 q 300 685 291 716 q 318 617 310 654 l 323 617 q 358 671 339 645 q 404 717 378 697 q 464 749 430 737 q 541 762 497 762 q 648 746 602 762 q 723 697 693 730 q 768 612 753 664 q 783 488 783 560 l 783 -95 q 785 -157 783 -122 q 790 -227 787 -192 q 798 -291 793 -262 q 809 -334 803 -320 l 609 -334 q 592 -292 599 -321 q 580 -228 585 -264 q 574 -155 576 -193 q 572 -87 572 -118 l 572 471 q 543 600 572 557 q 467 643 514 643 q 407 626 431 643 q 368 575 383 608 q 347 495 353 542 q 340 388 340 448 l 340 0 l 129 0 l 129 470 "},"ó":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 342 860 q 375 905 356 879 q 412 958 393 931 q 448 1013 431 986 q 475 1064 464 1040 l 694 1064 l 694 1049 q 651 1004 681 1031 q 584 946 621 976 q 508 889 547 917 q 436 842 468 860 l 342 842 l 342 860 "},"¦":{"x_min":338,"x_max":437.703125,"ha":777,"o":"m 437 499 l 338 499 l 338 1055 l 437 1055 l 437 499 m 437 -334 l 338 -334 l 338 222 l 437 222 l 437 -334 "},"Ő":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 321 1071 l 321 1089 q 351 1137 335 1111 q 383 1190 367 1163 q 413 1243 399 1217 q 438 1293 428 1269 l 616 1293 l 616 1278 q 595 1250 608 1266 q 565 1214 582 1233 q 528 1175 548 1195 q 489 1136 509 1155 q 451 1100 470 1117 q 417 1071 432 1083 l 321 1071 m 585 1071 l 585 1089 q 615 1137 599 1111 q 647 1190 631 1163 q 677 1243 663 1217 q 702 1293 691 1269 l 879 1293 l 879 1278 q 858 1250 871 1266 q 828 1214 845 1233 q 792 1175 811 1195 q 753 1136 772 1155 q 714 1100 733 1117 q 680 1071 696 1083 l 585 1071 "},"Ž":{"x_min":58,"x_max":864,"ha":925,"o":"m 833 921 l 310 84 l 610 84 q 680 96 653 84 q 723 128 707 108 q 746 172 739 147 q 756 223 754 197 l 763 286 l 864 286 l 857 0 l 58 0 l 58 69 l 578 907 l 305 907 q 251 898 272 907 q 217 873 230 889 q 199 833 205 856 q 191 781 193 809 l 183 706 l 84 706 l 90 992 l 833 992 l 833 921 m 229 1293 l 325 1293 q 358 1265 339 1281 q 398 1233 378 1250 q 439 1199 419 1215 q 475 1167 459 1182 q 510 1199 490 1182 q 551 1233 530 1215 q 592 1265 572 1250 q 626 1293 612 1281 l 722 1293 l 722 1274 q 684 1229 705 1255 q 640 1176 662 1203 q 599 1121 618 1148 q 569 1071 580 1094 l 382 1071 q 352 1121 371 1094 q 311 1176 332 1148 q 267 1229 289 1203 q 229 1274 245 1255 l 229 1293 "},"е":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 "},"Î":{"x_min":33,"x_max":526,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 33 1089 q 71 1134 49 1108 q 115 1187 93 1160 q 156 1242 136 1215 q 186 1293 175 1269 l 373 1293 q 403 1242 384 1269 q 444 1187 422 1215 q 488 1134 466 1160 q 526 1089 509 1108 l 526 1071 l 430 1071 q 396 1098 416 1082 q 355 1130 376 1113 q 314 1164 334 1147 q 279 1195 294 1181 q 243 1164 263 1181 q 202 1130 223 1147 q 162 1098 182 1113 q 129 1071 143 1082 l 33 1071 l 33 1089 "},"e":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 "},"ό":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 342 860 q 356 907 348 881 q 371 960 363 932 q 385 1014 378 987 q 395 1064 391 1041 l 585 1064 l 585 1050 q 558 1001 575 1028 q 522 947 542 974 q 480 892 502 919 q 438 842 458 865 l 342 842 l 342 860 "},"Ĕ":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 463 1071 q 367 1090 408 1071 q 298 1140 326 1109 q 256 1210 270 1171 q 241 1289 242 1249 l 332 1289 q 378 1216 344 1238 q 463 1194 411 1194 q 548 1216 514 1194 q 593 1289 582 1238 l 686 1289 q 670 1210 684 1249 q 628 1140 656 1171 q 559 1090 600 1109 q 463 1071 518 1071 "},"ļ":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 114 -289 q 128 -242 120 -268 q 144 -189 136 -216 q 158 -134 151 -161 q 168 -85 164 -108 l 330 -85 l 330 -98 q 305 -147 320 -120 q 271 -202 289 -174 q 234 -257 253 -230 q 197 -307 215 -285 l 114 -307 l 114 -289 "}," ":{"x_min":0,"x_max":0,"ha":695},"Ѓ":{"x_min":38.453125,"x_max":807,"ha":821,"o":"m 797 992 l 807 720 l 729 720 l 712 786 q 666 877 697 846 q 579 907 635 907 l 388 907 l 388 158 q 394 114 388 130 q 409 88 399 97 q 432 76 418 79 q 459 73 445 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 797 992 m 328 1089 q 361 1134 342 1108 q 398 1187 379 1160 q 434 1242 417 1215 q 461 1293 450 1269 l 680 1293 l 680 1278 q 637 1233 667 1260 q 570 1175 607 1205 q 494 1118 533 1146 q 422 1071 454 1089 l 328 1071 l 328 1089 "},"ò":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 419 842 q 347 889 387 860 q 270 946 307 917 q 203 1004 233 976 q 161 1049 173 1031 l 161 1064 l 378 1064 q 406 1013 389 1040 q 442 958 423 986 q 480 905 460 931 q 514 860 499 879 l 514 842 l 419 842 "},"ﬄ":{"x_min":26.140625,"x_max":1467.90625,"ha":1492,"o":"m 1042 73 q 1074 76 1057 73 q 1106 89 1092 80 q 1131 116 1121 99 q 1141 164 1141 134 l 1141 817 q 1130 867 1139 838 q 1104 923 1122 897 q 1059 969 1086 950 q 995 988 1032 988 q 893 946 928 988 q 859 811 859 903 l 859 745 l 1033 745 l 1033 650 l 859 650 l 859 164 q 869 116 859 134 q 893 89 879 99 q 925 76 908 80 q 957 73 943 73 l 981 73 l 981 0 l 532 0 l 532 73 l 549 73 q 581 76 564 73 q 613 89 599 80 q 638 116 628 99 q 648 164 648 134 l 648 650 l 366 650 l 366 164 q 376 116 366 134 q 400 89 386 99 q 432 76 415 80 q 464 73 450 73 l 488 73 l 488 0 l 26 0 l 26 73 l 56 73 q 88 76 71 73 q 120 89 106 80 q 145 116 135 99 q 155 164 155 134 l 155 650 l 31 650 l 31 745 l 155 745 l 155 755 q 224 979 155 904 q 438 1054 293 1054 q 544 1043 503 1054 q 607 1018 585 1033 q 638 984 630 1002 q 647 950 647 966 q 609 883 647 903 q 499 862 571 862 q 497 898 499 879 q 487 935 494 918 q 468 963 480 952 q 437 975 456 975 q 408 966 420 975 q 385 934 395 957 q 371 869 376 910 q 366 765 366 829 l 366 745 l 648 745 l 648 753 q 670 886 648 828 q 738 985 692 945 q 854 1047 784 1026 q 1023 1068 925 1068 q 1104 1064 1065 1068 q 1174 1055 1142 1061 l 1352 1055 l 1352 164 q 1362 116 1352 134 q 1386 89 1372 99 q 1418 76 1401 80 q 1450 73 1436 73 l 1467 73 l 1467 0 l 1039 0 l 1039 73 l 1042 73 "},"^":{"x_min":64,"x_max":711,"ha":777,"o":"m 356 992 l 416 992 l 711 365 l 602 365 l 385 840 l 172 365 l 64 365 l 356 992 "},"ⁿ":{"x_min":35.71875,"x_max":636.828125,"ha":667,"o":"m 338 597 l 338 536 l 35 536 l 35 597 l 42 597 q 69 599 56 597 q 90 606 81 601 q 105 622 100 612 q 111 649 111 633 l 111 881 q 105 907 111 897 q 90 921 100 916 q 68 928 81 926 q 42 930 56 930 l 39 930 l 39 992 l 245 992 l 260 923 l 266 923 q 297 961 281 947 q 331 985 313 976 q 370 996 349 993 q 412 1000 390 1000 q 528 963 487 1000 q 569 845 569 926 l 569 655 q 573 624 569 636 q 587 607 578 613 q 607 599 596 601 q 632 597 619 597 l 636 597 l 636 536 l 411 536 l 411 810 q 396 888 411 860 q 343 916 382 916 q 307 907 322 916 q 284 882 292 898 q 271 846 275 867 q 267 802 267 825 l 267 645 q 273 620 267 629 q 288 605 278 610 q 310 598 298 600 q 337 597 323 597 l 338 597 "},"к":{"x_min":23.703125,"x_max":892,"ha":892,"o":"m 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 444 745 l 444 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 645 q 349 580 349 610 l 349 428 q 404 435 383 428 q 441 458 425 442 q 480 508 458 475 q 536 594 501 541 q 580 660 559 631 q 625 710 601 689 q 680 741 649 730 q 751 753 710 753 q 808 745 786 753 q 845 726 831 738 q 865 699 859 715 q 870 668 870 684 q 864 633 870 649 q 846 606 858 618 q 820 588 835 595 q 788 580 805 582 q 766 632 783 612 q 719 651 750 651 q 695 645 707 651 q 669 626 683 639 q 641 593 656 613 q 607 546 626 573 q 575 499 589 519 q 548 464 560 479 q 525 438 536 449 q 502 417 514 427 q 547 407 524 415 q 592 385 570 400 q 634 350 614 371 q 673 297 655 328 l 750 166 q 781 120 766 138 q 812 91 796 101 q 846 77 828 81 q 887 73 864 73 l 892 73 l 892 0 l 833 0 q 730 4 776 0 q 648 22 685 8 q 583 62 611 36 q 530 132 554 88 l 459 263 q 432 309 444 292 q 408 335 420 326 q 382 348 396 345 q 349 351 368 351 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 444 73 l 444 0 l 23 0 l 23 73 "},"￼":{"x_min":57,"x_max":1346,"ha":1389,"o":"m 57 823 l 57 1030 l 262 1030 l 262 954 l 132 954 l 132 823 l 57 823 m 1139 954 l 1139 1030 l 1346 1030 l 1346 823 l 1272 823 l 1272 954 l 1139 954 m 57 -260 l 57 -54 l 132 -54 l 132 -186 l 262 -186 l 262 -260 l 57 -260 m 1139 -260 l 1139 -186 l 1272 -186 l 1272 -54 l 1346 -54 l 1346 -260 l 1139 -260 m 875 -260 l 875 -186 l 1060 -186 l 1060 -260 l 875 -260 m 345 -260 l 345 -186 l 528 -186 l 528 -260 l 345 -260 m 345 954 l 345 1030 l 528 1030 l 528 954 l 345 954 m 1346 26 l 1272 26 l 1272 210 l 1346 210 l 1346 26 m 1346 558 l 1272 558 l 1272 742 l 1346 742 l 1346 558 m 610 -260 l 610 -186 l 794 -186 l 794 -260 l 610 -260 m 132 26 l 57 26 l 57 210 l 132 210 l 132 26 m 610 954 l 610 1030 l 794 1030 l 794 954 l 610 954 m 875 954 l 875 1030 l 1060 1030 l 1060 954 l 875 954 m 132 291 l 57 291 l 57 476 l 132 476 l 132 291 m 132 558 l 57 558 l 57 742 l 132 742 l 132 558 m 1346 291 l 1272 291 l 1272 476 l 1346 476 l 1346 291 m 584 429 q 571 345 584 382 q 535 281 559 308 q 477 239 512 254 q 397 225 442 225 q 314 239 349 225 q 255 281 278 254 q 219 345 231 308 q 208 429 208 382 q 219 512 208 475 q 255 577 231 550 q 314 618 278 603 q 397 633 349 633 q 477 618 442 633 q 535 577 512 603 q 571 512 559 550 q 584 429 584 475 m 302 429 q 323 305 302 349 q 397 260 344 260 q 469 305 448 260 q 491 429 491 349 q 486 499 491 468 q 469 552 480 530 q 440 585 458 574 q 397 597 422 597 q 352 585 370 597 q 323 552 334 574 q 307 499 312 530 q 302 429 302 468 m 938 524 q 918 469 938 487 q 867 439 898 450 l 867 437 q 930 402 906 427 q 955 338 955 378 q 795 229 955 229 l 616 229 l 616 258 l 639 258 q 660 264 651 258 q 669 294 669 271 l 669 560 q 660 589 669 581 q 639 596 651 596 l 616 596 l 616 626 l 778 626 q 898 601 858 626 q 938 524 938 576 m 756 263 l 792 263 q 845 280 830 263 q 860 340 860 297 q 846 399 860 380 q 793 418 832 418 l 756 418 l 756 263 m 751 454 l 772 454 q 824 470 809 454 q 838 524 838 486 q 823 576 838 562 q 770 590 807 590 l 751 590 l 751 454 m 1194 596 l 1170 596 q 1151 590 1159 596 q 1143 560 1143 583 l 1143 356 q 1130 293 1143 319 q 1097 253 1118 268 q 1049 231 1077 237 q 994 224 1022 224 l 975 224 l 975 256 l 984 256 q 1010 261 998 256 q 1032 278 1023 266 q 1048 309 1042 289 q 1054 356 1054 328 l 1054 561 q 1045 590 1054 583 q 1026 596 1037 596 l 1003 596 l 1003 626 l 1194 626 l 1194 596 "},"ū":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 647 842 l 244 842 l 244 951 l 647 951 l 647 842 "},"ˆ":{"x_min":154,"x_max":647,"ha":802,"o":"m 154 860 q 192 905 170 879 q 236 958 214 931 q 277 1013 257 986 q 307 1064 296 1040 l 494 1064 q 524 1013 505 1040 q 565 958 543 986 q 609 905 587 931 q 647 860 630 879 l 647 842 l 551 842 q 517 869 537 853 q 476 901 497 884 q 435 935 455 918 q 400 966 415 952 q 364 935 384 952 q 323 901 344 918 q 283 869 303 884 q 250 842 264 853 l 154 842 l 154 860 "},"Ẅ":{"x_min":0.34375,"x_max":1481.578125,"ha":1482,"o":"m 838 982 l 1030 451 q 1053 385 1042 419 q 1072 321 1063 352 q 1088 265 1081 290 q 1098 221 1095 239 q 1110 276 1103 246 q 1123 340 1116 307 q 1138 409 1130 374 q 1154 478 1145 445 l 1227 778 q 1231 797 1229 786 q 1236 818 1234 808 q 1239 838 1238 829 q 1240 852 1240 847 q 1218 903 1240 888 q 1151 918 1197 918 l 1119 918 l 1119 992 l 1481 992 l 1481 918 l 1455 918 q 1419 914 1434 918 q 1391 898 1403 910 q 1369 865 1379 886 q 1350 810 1359 844 l 1134 0 l 976 0 l 743 652 l 543 0 l 371 0 l 117 844 q 102 880 110 866 q 81 903 93 895 q 54 915 69 911 q 18 918 39 918 l 0 918 l 0 992 l 464 992 l 464 918 l 432 918 q 369 902 390 918 q 348 851 348 886 q 353 817 348 840 q 363 776 357 795 l 455 455 q 471 398 463 429 q 487 336 480 367 q 501 275 495 304 q 510 223 507 246 q 530 307 519 268 q 554 387 542 346 l 737 982 l 838 982 m 551 1184 q 557 1224 551 1207 q 575 1251 564 1240 q 601 1265 586 1261 q 632 1270 616 1270 q 663 1265 649 1270 q 690 1251 678 1261 q 708 1224 701 1240 q 716 1184 716 1207 q 708 1144 716 1160 q 690 1117 701 1127 q 663 1102 678 1107 q 632 1098 649 1098 q 601 1102 616 1098 q 575 1117 586 1107 q 557 1144 564 1127 q 551 1184 551 1160 m 836 1184 q 842 1224 836 1207 q 861 1251 849 1240 q 887 1265 872 1261 q 919 1270 902 1270 q 949 1265 934 1270 q 975 1251 963 1261 q 993 1224 986 1240 q 1001 1184 1001 1207 q 993 1144 1001 1160 q 975 1117 986 1127 q 949 1102 963 1107 q 919 1098 934 1098 q 887 1102 902 1098 q 861 1117 872 1107 q 842 1144 849 1127 q 836 1184 836 1160 "},"č":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 m 155 1064 l 251 1064 q 284 1036 265 1052 q 324 1004 304 1021 q 365 970 345 986 q 401 938 385 953 q 436 970 416 953 q 477 1004 456 986 q 518 1036 498 1021 q 552 1064 538 1052 l 648 1064 l 648 1045 q 610 1000 631 1026 q 566 947 588 974 q 525 892 544 919 q 495 842 506 865 l 308 842 q 278 892 297 865 q 237 947 258 919 q 193 1000 215 974 q 155 1045 171 1026 l 155 1064 "},"’":{"x_min":61.96875,"x_max":311,"ha":389,"o":"m 311 839 q 297 753 311 795 q 254 676 283 712 q 176 613 224 641 q 61 567 129 585 l 61 638 q 115 660 92 649 q 153 684 138 671 q 176 711 168 696 q 184 747 184 727 q 176 769 184 761 q 158 784 169 777 q 133 800 146 792 q 109 820 120 807 q 90 850 97 832 q 83 896 83 868 q 111 967 83 943 q 182 992 140 992 q 276 951 241 992 q 311 839 311 910 "},"Ν":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 813 0 l 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 298 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 0 l 813 0 "},"-":{"x_min":35,"x_max":396,"ha":431,"o":"m 35 306 l 35 452 l 396 452 l 396 306 l 35 306 "},"Q":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 497 q 993 317 1016 399 q 929 171 971 234 q 823 63 886 107 q 678 0 760 20 q 703 -125 684 -76 q 750 -203 722 -175 q 810 -242 777 -231 q 878 -253 843 -253 l 900 -253 l 900 -334 l 801 -334 q 678 -315 738 -334 q 568 -257 617 -297 q 486 -155 519 -217 q 446 -5 453 -93 q 283 51 353 9 q 168 159 214 93 q 99 310 122 224 q 77 498 77 396 q 106 707 77 613 q 193 868 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 707 954 800 q 1016 497 1016 613 m 310 497 q 323 319 310 397 q 364 187 336 241 q 437 105 392 134 q 547 77 482 77 q 657 105 612 77 q 729 187 702 134 q 770 319 757 241 q 782 497 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 497 310 596 "},"ј":{"x_min":-27.84375,"x_max":358.078125,"ha":480,"o":"m 349 745 l 349 -10 q 323 -166 349 -104 q 251 -265 297 -228 q 140 -318 204 -302 q 0 -334 76 -334 l -27 -334 l -27 -247 l -18 -247 q 49 -235 19 -247 q 98 -194 78 -223 q 128 -118 118 -166 q 139 0 139 -71 l 139 579 q 130 627 139 609 q 106 655 121 645 q 70 668 90 664 q 27 671 50 671 l 23 671 l 23 745 l 349 745 m 120 970 q 129 1015 120 996 q 154 1046 139 1034 q 192 1064 170 1058 q 238 1070 213 1070 q 284 1064 262 1070 q 322 1046 305 1058 q 348 1015 338 1034 q 358 970 358 996 q 348 925 358 944 q 322 894 338 906 q 284 876 305 882 q 238 870 262 870 q 192 876 213 870 q 154 894 170 882 q 129 925 139 906 q 120 970 120 944 "},"ě":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 159 1064 l 255 1064 q 288 1036 269 1052 q 328 1004 308 1021 q 369 970 349 986 q 405 938 389 953 q 440 970 420 953 q 481 1004 460 986 q 522 1036 502 1021 q 556 1064 542 1052 l 652 1064 l 652 1045 q 614 1000 635 1026 q 570 947 592 974 q 529 892 548 919 q 499 842 510 865 l 312 842 q 282 892 301 865 q 241 947 262 919 q 197 1000 219 974 q 159 1045 175 1026 l 159 1064 "},"œ":{"x_min":65,"x_max":1241,"ha":1299,"o":"m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 491 91 464 73 q 535 143 518 108 q 561 229 552 177 q 571 349 569 281 l 571 386 q 536 601 570 530 q 425 673 503 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 918 671 q 825 614 860 671 q 787 445 790 556 l 1028 445 q 1002 612 1028 553 q 918 671 975 671 m 933 -14 q 790 13 853 -14 q 680 92 727 40 q 570 11 635 37 q 423 -14 505 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 567 735 505 762 q 676 655 630 708 q 779 735 718 708 q 915 762 839 762 q 1051 740 991 762 q 1154 677 1112 719 q 1218 572 1196 635 q 1241 427 1241 510 l 1241 356 l 786 356 q 785 348 786 352 q 784 339 784 343 q 801 227 788 274 q 839 149 815 179 q 896 104 862 118 q 971 89 929 89 q 1037 98 1007 89 q 1093 121 1068 106 q 1136 157 1118 137 q 1167 202 1154 178 q 1205 134 1205 182 q 1189 77 1205 104 q 1139 30 1173 51 q 1055 -1 1106 10 q 933 -14 1004 -14 "},"#":{"x_min":39,"x_max":738,"ha":777,"o":"m 694 373 l 694 278 l 519 278 l 467 0 l 369 0 l 421 278 l 276 278 l 223 0 l 124 0 l 177 278 l 39 278 l 39 373 l 195 373 l 244 626 l 83 626 l 83 723 l 262 723 l 311 992 l 410 992 l 360 723 l 505 723 l 557 992 l 656 992 l 604 723 l 738 723 l 738 626 l 586 626 l 539 373 l 694 373 m 294 373 l 440 373 l 489 626 l 343 626 l 294 373 "},"Џ":{"x_min":38.453125,"x_max":1084.875,"ha":1124,"o":"m 1084 992 l 1084 918 l 1026 918 q 999 916 1012 918 q 977 904 987 913 q 961 879 967 895 q 956 835 956 863 l 956 164 q 961 116 956 134 q 976 89 966 99 q 999 76 986 80 q 1026 73 1012 73 l 1084 73 l 1084 0 l 757 0 q 691 -16 719 0 q 645 -68 664 -33 q 617 -159 626 -104 q 608 -292 608 -214 l 516 -292 q 506 -161 516 -216 q 474 -70 495 -105 q 425 -17 454 -34 q 360 0 396 0 l 38 0 l 38 73 l 96 73 q 123 76 111 73 q 146 88 136 79 q 162 114 156 97 q 168 158 168 130 l 168 828 q 162 876 168 858 q 147 903 157 893 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 84 l 736 84 l 736 828 q 730 876 736 858 q 715 903 725 893 q 692 915 705 912 q 665 918 679 918 l 606 918 l 606 992 l 1084 992 "},"Å":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 696 1066 q 683 1000 696 1028 q 647 953 670 972 q 594 924 624 934 q 529 915 563 915 q 463 924 494 915 q 410 953 433 934 q 374 1000 387 972 q 362 1066 362 1028 q 374 1131 362 1102 q 410 1178 387 1159 q 463 1207 433 1197 q 529 1217 494 1217 q 594 1207 563 1217 q 647 1178 624 1197 q 683 1131 670 1159 q 696 1066 696 1102 m 611 1066 q 604 1100 611 1086 q 587 1123 598 1114 q 560 1136 575 1132 q 529 1140 545 1140 q 497 1136 512 1140 q 470 1123 482 1132 q 453 1100 459 1114 q 446 1066 446 1086 q 453 1031 446 1045 q 470 1008 459 1017 q 497 995 482 999 q 529 990 512 990 q 560 995 545 990 q 587 1008 575 999 q 604 1031 598 1017 q 611 1066 611 1045 "},"ș":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 m 214 -289 q 228 -242 220 -268 q 244 -189 236 -216 q 258 -134 251 -161 q 268 -85 264 -108 l 430 -85 l 430 -98 q 405 -147 420 -120 q 371 -202 389 -174 q 334 -257 353 -230 q 297 -307 315 -285 l 214 -307 l 214 -289 "},"¸":{"x_min":69,"x_max":387,"ha":463,"o":"m 387 -175 q 372 -241 387 -211 q 332 -291 358 -270 q 270 -323 306 -312 q 190 -334 234 -334 q 163 -332 179 -334 q 131 -329 148 -331 q 98 -324 114 -327 q 69 -318 81 -321 l 69 -233 q 119 -241 94 -239 q 163 -244 144 -244 q 225 -230 203 -244 q 248 -180 248 -216 q 240 -147 248 -160 q 218 -126 233 -134 q 185 -115 204 -118 q 144 -110 166 -111 l 173 12 l 252 12 l 238 -47 q 299 -60 272 -50 q 346 -86 327 -70 q 376 -125 365 -102 q 387 -175 387 -148 "},"=":{"x_min":87,"x_max":690,"ha":777,"o":"m 690 409 l 690 313 l 87 313 l 87 409 l 690 409 m 690 679 l 690 582 l 87 582 l 87 679 l 690 679 "},"ρ":{"x_min":115,"x_max":835,"ha":900,"o":"m 835 357 q 814 189 835 260 q 754 73 793 118 q 660 7 716 28 q 532 -14 604 -14 q 419 0 472 -14 q 321 49 365 15 q 323 0 323 30 q 324 -68 324 -30 l 324 -334 l 115 -334 l 115 406 q 135 557 115 491 q 198 669 155 623 q 305 738 240 714 q 459 762 370 762 q 612 735 543 762 q 730 657 681 708 q 807 530 780 605 q 835 357 835 455 m 620 360 q 611 493 620 435 q 581 591 601 551 q 532 652 562 631 q 462 673 502 673 q 395 654 422 673 q 353 600 369 635 q 331 516 337 565 q 324 406 324 466 l 324 152 q 397 95 358 116 q 487 73 437 73 q 541 88 517 73 q 584 137 566 104 q 611 226 601 171 q 620 360 620 281 "},"Ћ":{"x_min":13,"x_max":1204.3125,"ha":1229,"o":"m 739 0 l 739 73 l 797 73 q 825 76 812 73 q 847 89 838 80 q 862 116 857 99 q 867 164 867 134 l 867 298 q 858 390 867 352 q 829 451 849 427 q 779 486 810 476 q 703 497 747 497 q 652 494 677 497 q 605 486 627 491 q 566 475 584 481 q 536 464 548 469 l 536 164 q 541 116 536 134 q 556 89 546 99 q 578 76 565 80 q 606 73 591 73 l 664 73 l 664 0 l 185 0 l 185 73 l 243 73 q 272 76 259 73 q 294 89 285 80 q 309 116 304 99 q 315 164 315 134 l 315 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 830 992 l 837 723 l 744 723 l 733 809 q 724 850 731 832 q 705 881 718 868 q 670 900 691 893 q 618 907 649 907 l 536 907 l 536 566 q 577 579 553 572 q 633 593 602 587 q 701 604 664 600 q 780 609 738 609 q 908 594 851 609 q 1006 545 966 580 q 1067 453 1046 511 q 1089 308 1089 395 l 1089 164 q 1094 116 1089 134 q 1109 89 1099 99 q 1131 76 1118 80 q 1159 73 1144 73 l 1204 73 l 1204 0 l 739 0 "},"ú":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 358 860 q 391 905 372 879 q 428 958 409 931 q 464 1013 447 986 q 491 1064 480 1040 l 710 1064 l 710 1049 q 667 1004 697 1031 q 600 946 637 976 q 524 889 563 917 q 452 842 484 860 l 358 842 l 358 860 "},"˚":{"x_min":64,"x_max":398,"ha":463,"o":"m 398 979 q 385 913 398 941 q 349 866 372 885 q 296 837 326 847 q 231 828 265 828 q 165 837 196 828 q 112 866 135 847 q 76 913 89 885 q 64 979 64 941 q 76 1044 64 1015 q 112 1091 89 1072 q 165 1120 135 1110 q 231 1130 196 1130 q 296 1120 265 1130 q 349 1091 326 1110 q 385 1044 372 1072 q 398 979 398 1015 m 313 979 q 306 1013 313 999 q 289 1036 300 1027 q 262 1049 277 1045 q 231 1053 247 1053 q 199 1049 214 1053 q 172 1036 184 1045 q 155 1013 161 1027 q 148 979 148 999 q 155 944 148 958 q 172 921 161 930 q 199 908 184 912 q 231 903 214 903 q 262 908 247 903 q 289 921 277 912 q 306 944 300 930 q 313 979 313 958 "},"д":{"x_min":18,"x_max":833,"ha":868,"o":"m 816 745 l 816 671 l 800 671 q 767 668 785 671 q 735 655 749 664 q 710 628 720 645 q 701 580 701 610 l 701 152 q 709 112 701 128 q 731 89 717 97 q 763 77 745 80 q 801 73 781 74 l 833 73 l 833 -292 l 736 -292 l 729 -190 q 714 -102 726 -138 q 683 -43 701 -65 q 643 -10 665 -20 q 599 0 622 0 l 255 0 q 198 -10 222 0 q 158 -43 174 -20 q 132 -102 142 -65 q 120 -190 123 -138 l 113 -292 l 18 -292 l 18 79 l 113 79 q 155 163 133 111 q 198 287 177 214 q 219 367 209 326 q 237 449 229 409 q 249 526 244 489 q 254 590 254 562 q 244 632 254 616 q 220 656 235 648 q 183 668 204 664 q 140 671 163 671 l 134 671 l 134 745 l 816 745 m 496 665 l 348 665 q 316 426 336 531 q 275 249 296 322 q 257 193 265 217 q 241 148 249 168 q 226 111 234 128 q 210 79 218 94 l 496 79 l 496 665 "},"¯":{"x_min":-7,"x_max":644,"ha":638,"o":"m 644 1055 l -7 1055 l -7 1137 l 644 1137 l 644 1055 "},"u":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 "},"З":{"x_min":50,"x_max":807,"ha":857,"o":"m 397 -16 q 240 1 305 -16 q 132 47 174 18 q 70 113 90 76 q 50 191 50 151 q 86 279 50 246 q 197 312 123 312 q 218 213 203 258 q 257 138 233 169 q 318 90 282 107 q 401 73 353 73 q 541 122 490 73 q 592 274 592 170 q 579 357 592 321 q 536 418 565 393 q 460 455 506 443 q 351 468 414 468 l 223 468 l 223 555 l 348 555 q 506 605 453 555 q 559 758 559 655 q 550 827 559 796 q 524 878 542 857 q 478 910 506 899 q 410 921 450 921 q 337 903 366 921 q 291 856 308 885 q 266 787 273 826 q 259 705 259 748 q 188 710 221 705 q 130 727 155 715 q 92 763 106 740 q 78 820 78 785 q 101 891 78 858 q 167 950 124 925 q 272 991 210 976 q 412 1006 334 1006 q 557 992 491 1006 q 671 950 623 978 q 745 877 719 921 q 772 773 772 834 q 754 676 772 719 q 705 602 736 634 q 634 550 675 571 q 546 519 593 529 q 630 501 585 514 q 715 461 675 488 q 780 390 754 434 q 807 283 807 347 q 774 145 807 202 q 685 53 741 89 q 555 0 629 17 q 397 -16 480 -16 "},"Α":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 "},"⅝":{"x_min":33,"x_max":1136,"ha":1167,"o":"m 241 460 q 284 466 265 460 q 317 489 304 473 q 338 528 331 504 q 345 587 345 553 q 312 667 345 640 q 219 694 280 694 q 153 687 179 694 q 106 669 127 679 l 59 679 l 91 992 l 445 992 l 450 821 l 395 821 l 390 846 q 385 861 388 855 q 377 872 382 867 q 362 878 372 876 q 337 880 353 880 l 151 880 l 136 745 q 185 757 153 751 q 262 764 218 764 q 430 719 370 764 q 490 584 490 674 q 473 504 490 540 q 425 442 457 468 q 348 402 394 416 q 244 389 303 389 q 149 397 189 389 q 83 420 109 405 q 45 457 57 435 q 33 505 33 478 q 38 535 33 521 q 55 559 43 549 q 86 575 66 569 q 134 580 106 580 q 142 535 134 557 q 163 497 149 513 q 197 470 177 480 q 241 460 217 460 m 386 0 l 278 0 l 773 992 l 881 992 l 386 0 m 653 152 q 664 202 653 181 q 694 240 675 223 q 740 270 714 257 q 795 294 766 283 q 749 322 771 306 q 711 357 727 337 q 684 402 694 377 q 675 457 675 427 q 687 511 675 484 q 726 559 699 537 q 796 593 753 580 q 902 607 840 607 q 989 597 950 607 q 1055 569 1028 588 q 1097 525 1082 551 q 1112 466 1112 499 q 1102 420 1112 441 q 1076 382 1093 399 q 1038 351 1060 364 q 992 327 1017 337 q 1053 296 1026 312 q 1098 260 1079 280 q 1126 215 1116 240 q 1136 158 1136 190 q 1120 92 1136 122 q 1074 38 1105 61 q 997 2 1043 15 q 889 -10 951 -10 q 786 2 830 -10 q 712 37 741 15 q 667 89 682 59 q 653 152 653 118 m 897 51 q 968 72 942 51 q 994 137 994 93 q 986 176 994 159 q 961 208 977 194 q 921 235 945 222 q 864 261 896 248 q 814 215 834 243 q 794 147 794 187 q 820 78 794 105 q 897 51 846 51 m 963 463 q 959 495 963 480 q 945 521 954 510 q 923 539 937 532 q 893 545 910 545 q 841 525 858 545 q 823 470 823 505 q 831 431 823 447 q 851 401 839 414 q 880 379 864 388 q 912 362 896 370 q 949 400 935 377 q 963 463 963 423 "},"é":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 321 860 q 354 905 335 879 q 391 958 372 931 q 427 1013 410 986 q 454 1064 443 1040 l 673 1064 l 673 1049 q 630 1004 660 1031 q 563 946 600 976 q 487 889 526 917 q 415 842 447 860 l 321 842 l 321 860 "},"Ş":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 m 554 -175 q 539 -241 554 -211 q 499 -291 525 -270 q 437 -323 473 -312 q 357 -334 401 -334 q 330 -332 346 -334 q 298 -329 315 -331 q 265 -324 281 -327 q 236 -318 248 -321 l 236 -233 q 286 -241 261 -239 q 330 -244 311 -244 q 392 -230 370 -244 q 415 -180 415 -216 q 407 -147 415 -160 q 385 -126 400 -134 q 352 -115 371 -118 q 311 -110 333 -111 l 340 12 l 419 12 l 405 -47 q 466 -60 439 -50 q 513 -86 494 -70 q 543 -125 532 -102 q 554 -175 554 -148 "},"B":{"x_min":38.453125,"x_max":884,"ha":933,"o":"m 842 739 q 829 659 842 693 q 793 600 816 624 q 738 557 770 575 q 666 527 706 539 l 666 520 q 754 487 715 508 q 823 435 794 466 q 868 363 852 404 q 884 272 884 322 q 784 67 884 135 q 486 0 684 0 l 38 0 l 38 73 l 95 73 q 124 76 111 73 q 146 89 137 80 q 162 116 156 99 q 168 164 168 134 l 168 829 q 162 874 168 857 q 146 901 156 892 q 123 915 136 911 q 95 918 110 918 l 38 918 l 38 992 l 444 992 q 742 930 642 992 q 842 739 842 869 m 387 84 l 479 84 q 558 94 525 84 q 611 127 590 105 q 640 187 631 150 q 650 276 650 223 q 641 365 650 327 q 614 427 633 402 q 562 464 594 451 q 482 476 530 476 l 387 476 l 387 84 m 387 561 l 440 561 q 521 571 489 561 q 573 602 553 581 q 600 657 592 624 q 608 739 608 691 q 599 818 608 786 q 569 870 590 850 q 516 898 549 889 q 437 906 484 906 l 387 906 l 387 561 "},"…":{"x_min":97,"x_max":1169,"ha":1267,"o":"m 97 99 q 105 152 97 131 q 129 187 114 174 q 166 205 145 200 q 211 211 187 211 q 254 205 234 211 q 291 187 275 200 q 315 152 306 174 q 325 99 325 131 q 315 47 325 68 q 291 13 306 26 q 254 -5 275 0 q 211 -11 234 -11 q 166 -5 187 -11 q 129 13 145 0 q 105 47 114 26 q 97 99 97 68 m 520 99 q 528 152 520 131 q 552 187 537 174 q 589 205 568 200 q 634 211 610 211 q 677 205 657 211 q 714 187 698 200 q 738 152 729 174 q 748 99 748 131 q 738 47 748 68 q 714 13 729 26 q 677 -5 698 0 q 634 -11 657 -11 q 589 -5 610 -11 q 552 13 568 0 q 528 47 537 26 q 520 99 520 68 m 942 99 q 950 152 942 131 q 974 187 959 174 q 1010 205 990 200 q 1055 211 1031 211 q 1098 205 1078 211 q 1135 187 1119 200 q 1159 152 1150 174 q 1169 99 1169 131 q 1159 47 1169 68 q 1135 13 1150 26 q 1098 -5 1119 0 q 1055 -11 1078 -11 q 1010 -5 1031 -11 q 974 13 990 0 q 950 47 959 26 q 942 99 942 68 "},"H":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 475 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 877 168 861 q 146 903 156 894 q 123 915 136 911 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 902 417 911 q 392 875 398 892 q 387 827 387 857 l 387 560 l 749 560 l 749 827 q 743 875 749 857 q 728 902 738 892 q 705 915 718 911 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 902 999 911 q 974 875 979 892 q 969 827 969 857 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 "},"î":{"x_min":-20,"x_max":473,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m -20 860 q 18 905 -3 879 q 62 958 40 931 q 103 1013 83 986 q 133 1064 122 1040 l 320 1064 q 350 1013 331 1040 q 391 958 369 986 q 435 905 413 931 q 473 860 456 879 l 473 842 l 377 842 q 343 869 363 853 q 302 901 323 884 q 261 935 281 918 q 226 966 241 952 q 190 935 210 952 q 149 901 170 918 q 109 869 129 884 q 76 842 90 853 l -20 842 l -20 860 "},"ν":{"x_min":-45.21875,"x_max":737,"ha":804,"o":"m 737 623 q 725 517 737 573 q 694 402 714 461 q 645 286 673 344 q 583 175 617 228 q 511 78 549 123 q 433 0 473 33 l 299 0 q 254 171 276 89 q 210 325 232 254 q 168 455 189 397 q 125 555 146 513 q 81 619 104 597 q 36 642 59 642 q 10 637 25 642 q -17 625 -4 632 l -45 683 q -1 707 -25 695 q 47 729 21 720 q 97 745 72 739 q 148 751 123 751 q 207 739 180 751 q 259 700 234 728 q 305 626 283 672 q 350 512 327 581 q 398 349 374 443 q 452 133 423 256 q 524 234 494 179 q 575 345 555 290 q 605 453 595 401 q 614 544 614 505 q 608 591 614 571 q 590 626 601 612 q 566 649 580 640 q 538 661 553 657 q 546 705 538 686 q 566 734 553 723 q 596 752 579 746 q 631 758 612 758 q 679 746 659 758 q 712 715 699 734 q 731 672 725 696 q 737 623 737 648 "},"Ό":{"x_min":-53,"x_max":1040,"ha":1117,"o":"m 1040 496 q 1009 287 1040 382 q 918 126 978 193 q 771 22 858 59 q 571 -14 684 -14 q 364 22 452 -14 q 217 126 275 59 q 130 288 159 193 q 101 498 101 382 q 130 707 101 613 q 217 867 159 801 q 364 970 276 934 q 572 1007 453 1007 q 772 970 685 1007 q 918 867 859 934 q 1009 706 978 800 q 1040 496 1040 612 m 334 496 q 347 319 334 397 q 388 187 360 241 q 461 104 416 133 q 571 76 506 76 q 681 104 636 76 q 753 187 726 133 q 794 319 781 241 q 806 496 806 397 q 794 674 806 596 q 753 806 781 752 q 681 888 726 860 q 572 916 636 916 q 462 888 507 916 q 388 806 416 860 q 347 674 360 752 q 334 496 334 596 m -53 788 q -38 835 -46 809 q -23 888 -31 861 q -9 943 -16 916 q 0 993 -3 969 l 190 993 l 190 978 q 163 930 180 957 q 127 875 147 903 q 85 820 107 847 q 43 770 63 793 l -53 770 l -53 788 "},"−":{"x_min":90,"x_max":687,"ha":777,"o":"m 687 446 l 90 446 l 90 546 l 687 546 l 687 446 "},"⅜":{"x_min":49,"x_max":1136,"ha":1167,"o":"m 319 854 q 304 920 319 897 q 254 943 290 943 q 218 933 232 943 q 195 906 203 923 q 182 868 186 890 q 179 822 179 846 q 129 824 151 822 q 91 834 106 827 q 66 852 75 840 q 58 881 58 863 q 71 930 58 907 q 109 969 84 953 q 171 996 134 986 q 257 1006 209 1006 q 343 996 305 1006 q 410 969 382 987 q 453 926 438 951 q 468 868 468 900 q 430 768 468 807 q 326 714 392 730 l 326 706 q 387 694 357 702 q 440 672 417 687 q 477 633 463 657 q 492 571 492 609 q 466 485 492 520 q 400 429 440 450 q 313 398 361 407 q 224 389 266 389 q 121 399 167 389 q 49 422 76 409 l 49 494 q 82 482 63 488 q 122 471 101 476 q 165 463 143 466 q 207 460 186 460 q 310 486 273 460 q 347 574 347 513 q 309 645 347 620 q 196 670 272 670 l 150 670 l 150 736 l 196 736 q 244 744 221 736 q 283 768 267 752 q 309 806 300 784 q 319 854 319 828 m 384 0 l 276 0 l 771 992 l 879 992 l 384 0 m 653 152 q 664 202 653 181 q 694 240 675 223 q 740 270 714 257 q 795 294 766 283 q 749 322 771 306 q 711 357 727 337 q 684 402 694 377 q 675 457 675 427 q 687 511 675 484 q 726 559 699 537 q 796 593 753 580 q 902 607 840 607 q 989 597 950 607 q 1055 569 1028 588 q 1097 525 1082 551 q 1112 466 1112 499 q 1102 420 1112 441 q 1076 382 1093 399 q 1038 351 1060 364 q 992 327 1017 337 q 1053 296 1026 312 q 1098 260 1079 280 q 1126 215 1116 240 q 1136 158 1136 190 q 1120 92 1136 122 q 1074 38 1105 61 q 997 2 1043 15 q 889 -10 951 -10 q 786 2 830 -10 q 712 37 741 15 q 667 89 682 59 q 653 152 653 118 m 897 51 q 968 72 942 51 q 994 137 994 93 q 986 176 994 159 q 961 208 977 194 q 921 235 945 222 q 864 261 896 248 q 814 215 834 243 q 794 147 794 187 q 820 78 794 105 q 897 51 846 51 m 963 463 q 959 495 963 480 q 945 521 954 510 q 923 539 937 532 q 893 545 910 545 q 841 525 858 545 q 823 470 823 505 q 831 431 823 447 q 851 401 839 414 q 880 379 864 388 q 912 362 896 370 q 949 400 935 377 q 963 463 963 423 "},"ǰ":{"x_min":-29,"x_max":464,"ha":480,"o":"m 349 745 l 349 -10 q 325 -166 349 -104 q 257 -265 301 -228 q 153 -318 213 -302 q 21 -334 92 -334 l -5 -334 l -5 -247 l 2 -247 q 60 -235 35 -247 q 103 -194 86 -223 q 129 -118 120 -166 q 139 0 139 -71 l 139 579 q 130 627 139 609 q 106 655 121 645 q 70 668 90 664 q 27 671 50 671 l 23 671 l 23 745 l 349 745 m -29 1064 l 67 1064 q 100 1036 81 1052 q 140 1004 120 1021 q 181 970 161 986 q 217 938 201 953 q 252 970 232 953 q 293 1004 272 986 q 334 1036 314 1021 q 368 1064 354 1052 l 464 1064 l 464 1045 q 426 1000 447 1026 q 382 947 404 974 q 341 892 360 919 q 311 842 322 865 l 124 842 q 94 892 113 865 q 53 947 74 919 q 9 1000 31 974 q -29 1045 -12 1026 l -29 1064 "},"ā":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 600 842 l 197 842 l 197 951 l 600 951 l 600 842 "},"ĵ":{"x_min":-29,"x_max":464,"ha":480,"o":"m 349 745 l 349 -10 q 325 -166 349 -104 q 257 -265 301 -228 q 153 -318 213 -302 q 21 -334 92 -334 l -5 -334 l -5 -247 l 2 -247 q 60 -235 35 -247 q 103 -194 86 -223 q 129 -118 120 -166 q 139 0 139 -71 l 139 579 q 130 627 139 609 q 106 655 121 645 q 70 668 90 664 q 27 671 50 671 l 23 671 l 23 745 l 349 745 m -29 860 q 9 905 -12 879 q 53 958 31 931 q 94 1013 74 986 q 124 1064 113 1040 l 311 1064 q 341 1013 322 1040 q 382 958 360 986 q 426 905 404 931 q 464 860 447 879 l 464 842 l 368 842 q 334 869 354 853 q 293 901 314 884 q 252 935 272 918 q 217 966 232 952 q 181 935 201 952 q 140 901 161 918 q 100 869 120 884 q 67 842 81 853 l -29 842 l -29 860 "},"Ĩ":{"x_min":1,"x_max":551,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 392 1203 q 419 1209 407 1203 q 440 1225 431 1215 q 453 1249 448 1235 q 460 1276 458 1262 l 551 1276 q 535 1197 548 1234 q 499 1131 521 1159 q 445 1087 476 1103 q 377 1071 414 1071 q 309 1084 340 1071 q 253 1114 279 1098 q 204 1145 227 1131 q 159 1158 182 1158 q 132 1152 144 1158 q 111 1136 120 1146 q 98 1112 103 1126 q 91 1085 93 1099 l 1 1085 q 16 1164 3 1127 q 53 1230 30 1202 q 107 1274 76 1258 q 175 1291 138 1291 q 243 1277 213 1291 q 299 1247 273 1263 q 348 1216 325 1230 q 392 1203 371 1203 "},"*":{"x_min":48.859375,"x_max":648.40625,"ha":697,"o":"m 48 838 l 111 979 l 318 829 l 272 1055 l 427 1055 l 377 831 l 586 976 l 648 837 l 432 783 l 648 727 l 586 589 l 377 734 l 426 510 l 272 510 l 316 735 l 111 588 l 48 726 l 265 783 l 48 838 "},"ă":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 396 842 q 300 861 341 842 q 231 911 259 880 q 189 981 203 942 q 174 1060 175 1020 l 265 1060 q 311 987 277 1009 q 396 965 344 965 q 481 987 447 965 q 526 1060 515 1009 l 619 1060 q 603 981 617 1020 q 561 911 589 942 q 492 861 533 880 q 396 842 451 842 "},"Χ":{"x_min":13.71875,"x_max":1003.546875,"ha":1017,"o":"m 727 878 q 720 898 727 890 q 704 910 714 906 q 679 917 693 915 q 649 918 665 918 l 645 918 l 645 992 l 970 992 l 970 918 l 957 918 q 921 913 937 918 q 888 896 904 908 q 856 865 872 884 q 820 818 840 846 l 618 543 l 874 147 q 930 89 901 104 q 985 73 959 73 l 1003 73 l 1003 0 l 545 0 l 545 73 l 551 73 q 635 119 635 73 q 633 134 635 127 q 627 152 632 142 q 613 177 622 162 q 588 215 604 192 l 461 408 l 311 205 q 287 165 298 187 q 275 120 275 142 q 294 85 275 97 q 359 73 313 73 l 364 73 l 364 0 l 13 0 l 13 73 l 22 73 q 66 80 47 73 q 102 100 85 87 q 134 130 118 112 q 167 170 150 148 l 410 487 l 181 844 q 158 877 169 863 q 133 900 147 890 q 102 914 119 909 q 61 918 85 918 l 43 918 l 43 992 l 503 992 l 503 918 l 499 918 q 459 915 475 918 q 433 906 443 912 q 420 893 424 901 q 417 878 417 886 q 427 842 417 863 q 453 796 437 820 l 568 624 l 689 793 q 714 835 701 812 q 727 878 727 859 "},"†":{"x_min":48.875,"x_max":615.40625,"ha":664,"o":"m 435 510 q 401 325 416 428 q 378 115 388 236 q 368 -154 368 -6 l 295 -154 q 285 113 295 -7 q 263 323 276 234 q 232 510 249 426 l 295 666 l 48 628 l 48 789 l 295 753 l 245 1055 l 421 1055 l 368 753 l 615 789 l 615 628 l 368 666 l 435 510 "},"°":{"x_min":66,"x_max":487,"ha":555,"o":"m 66 780 q 82 863 66 824 q 127 930 99 901 q 194 975 156 958 q 276 992 232 992 q 358 975 320 992 q 425 930 396 958 q 470 863 453 901 q 487 780 487 824 q 470 698 487 737 q 425 632 453 660 q 358 587 396 603 q 276 571 320 571 q 194 587 232 571 q 127 632 156 603 q 82 698 99 660 q 66 780 66 737 m 162 780 q 171 736 162 757 q 195 699 179 715 q 231 674 211 683 q 276 665 252 665 q 321 674 300 665 q 358 699 342 683 q 382 736 373 715 q 391 780 391 757 q 382 826 391 805 q 358 863 373 848 q 321 888 342 879 q 276 897 300 897 q 231 888 252 897 q 195 863 211 879 q 171 826 179 848 q 162 780 162 805 "},"Ξ":{"x_min":45,"x_max":832,"ha":876,"o":"m 825 0 l 51 0 l 45 315 l 131 315 l 136 273 q 146 233 139 252 q 166 200 152 214 q 200 178 179 186 q 253 169 221 169 l 623 169 q 676 178 655 169 q 710 200 697 186 q 730 233 723 214 q 740 273 737 252 l 745 315 l 832 315 l 825 0 m 790 693 l 703 693 l 698 734 q 688 774 695 755 q 668 808 682 793 q 634 830 655 822 q 581 839 612 839 l 294 839 q 241 830 263 839 q 207 808 220 822 q 187 774 193 793 q 177 734 180 755 l 172 693 l 86 693 l 92 992 l 783 992 l 790 693 m 305 639 l 312 612 q 321 585 316 597 q 335 565 325 574 q 364 553 345 557 q 413 549 382 549 l 462 549 q 508 553 490 549 q 538 566 526 557 q 556 586 550 574 q 566 612 562 598 l 573 639 l 645 639 l 645 374 l 573 374 l 566 400 q 556 426 562 414 q 538 446 550 438 q 508 459 526 455 q 462 464 490 464 l 413 464 q 364 459 382 464 q 335 447 345 455 q 321 427 325 439 q 312 400 316 415 l 305 374 l 233 374 l 233 639 l 305 639 "},"Ķ":{"x_min":38.453125,"x_max":1019,"ha":1019,"o":"m 602 739 q 640 782 625 763 q 664 818 655 802 q 677 850 673 835 q 681 879 681 865 q 664 911 681 902 q 603 920 646 920 l 603 992 l 980 992 l 980 920 q 926 911 951 920 q 876 886 901 902 q 828 847 852 869 q 780 797 804 825 l 597 596 l 855 185 q 894 131 875 153 q 932 97 913 110 q 970 79 951 84 q 1013 73 990 73 l 1019 73 l 1019 0 l 944 0 q 851 3 891 0 q 781 13 811 6 q 729 30 751 20 q 691 55 707 41 q 661 87 675 69 q 635 127 648 105 l 448 447 l 387 398 l 387 164 q 392 116 387 134 q 408 89 398 99 q 431 76 417 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 504 l 602 739 m 432 -289 q 446 -242 438 -268 q 462 -189 454 -216 q 476 -134 469 -161 q 486 -85 482 -108 l 648 -85 l 648 -98 q 623 -147 638 -120 q 589 -202 607 -174 q 552 -257 571 -230 q 515 -307 533 -285 l 432 -307 l 432 -289 "},"ŵ":{"x_min":-4.40625,"x_max":1190.078125,"ha":1189,"o":"m 686 737 l 821 327 q 846 242 838 277 q 858 181 853 207 l 862 181 q 868 215 865 199 q 876 247 871 230 q 886 284 880 264 q 899 330 891 304 l 960 533 q 970 571 966 550 q 973 603 973 591 q 951 654 973 638 q 881 671 928 671 l 871 671 l 871 745 l 1190 745 l 1190 671 l 1172 671 q 1137 667 1152 671 q 1110 651 1122 662 q 1089 617 1099 639 q 1068 562 1078 596 l 888 0 l 739 0 l 587 461 l 427 0 l 276 0 l 98 597 q 81 633 90 619 q 61 656 72 648 q 34 667 49 664 q 0 671 20 671 l -4 671 l -4 745 l 402 745 l 402 671 l 384 671 q 321 659 342 671 q 300 612 300 647 q 304 584 300 601 q 312 553 308 568 l 363 372 q 376 320 370 347 q 388 269 382 294 q 398 221 393 244 q 405 181 402 199 l 409 181 q 425 253 415 216 q 454 341 436 290 l 595 737 l 686 737 m 376 860 q 414 905 392 879 q 458 958 436 931 q 499 1013 479 986 q 529 1064 518 1040 l 716 1064 q 746 1013 727 1040 q 787 958 765 986 q 831 905 809 931 q 869 860 852 879 l 869 842 l 773 842 q 739 869 759 853 q 698 901 719 884 q 657 935 677 918 q 622 966 637 952 q 586 935 606 952 q 545 901 566 918 q 505 869 525 884 q 472 842 486 853 l 376 842 l 376 860 "},"΄":{"x_min":306,"x_max":549,"ha":802,"o":"m 306 860 q 320 907 312 881 q 335 960 327 932 q 349 1014 342 987 q 359 1064 355 1041 l 549 1064 l 549 1050 q 522 1001 539 1028 q 486 947 506 974 q 444 892 466 919 q 402 842 422 865 l 306 842 l 306 860 "},"ǽ":{"x_min":62,"x_max":1157,"ha":1215,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 264 487 223 l 487 369 l 424 364 q 354 351 383 362 q 309 320 326 340 q 285 272 292 301 q 277 206 277 244 m 834 671 q 741 614 776 671 q 703 445 706 556 l 944 445 q 918 612 944 553 q 834 671 891 671 m 849 -14 q 672 19 746 -14 q 553 118 598 53 q 437 17 506 49 q 280 -14 368 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 211 62 154 q 139 379 62 324 q 373 438 217 433 l 487 442 l 487 519 q 484 582 487 553 q 472 633 481 612 q 446 665 463 654 q 400 677 429 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 535 743 480 762 q 627 683 590 725 q 719 741 668 721 q 831 762 769 762 q 967 740 907 762 q 1070 677 1028 719 q 1134 572 1112 635 q 1157 427 1157 510 l 1157 356 l 700 356 q 715 236 702 286 q 752 153 729 186 q 810 105 776 120 q 887 89 843 89 q 953 98 923 89 q 1009 121 984 106 q 1052 157 1034 137 q 1083 202 1070 178 q 1121 134 1121 182 q 1105 77 1121 104 q 1055 30 1089 51 q 971 -1 1022 10 q 849 -14 920 -14 m 553 860 q 586 905 567 879 q 623 958 604 931 q 659 1013 642 986 q 686 1064 675 1040 l 905 1064 l 905 1049 q 862 1004 892 1031 q 795 946 832 976 q 719 889 758 917 q 647 842 679 860 l 553 842 l 553 860 "},"Β":{"x_min":38.453125,"x_max":884,"ha":933,"o":"m 842 739 q 829 659 842 693 q 793 600 816 624 q 738 557 770 575 q 666 527 706 539 l 666 520 q 754 487 715 508 q 823 435 794 466 q 868 363 852 404 q 884 272 884 322 q 784 67 884 135 q 486 0 684 0 l 38 0 l 38 73 l 95 73 q 124 76 111 73 q 146 89 137 80 q 162 116 156 99 q 168 164 168 134 l 168 829 q 162 874 168 857 q 146 901 156 892 q 123 915 136 911 q 95 918 110 918 l 38 918 l 38 992 l 444 992 q 742 930 642 992 q 842 739 842 869 m 387 84 l 479 84 q 558 94 525 84 q 611 127 590 105 q 640 187 631 150 q 650 276 650 223 q 641 365 650 327 q 614 427 633 402 q 562 464 594 451 q 482 476 530 476 l 387 476 l 387 84 m 387 561 l 440 561 q 521 571 489 561 q 573 602 553 581 q 600 657 592 624 q 608 739 608 691 q 599 818 608 786 q 569 870 590 850 q 516 898 549 889 q 437 906 484 906 l 387 906 l 387 561 "},"Ļ":{"x_min":38.453125,"x_max":863,"ha":908,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 432 915 445 918 q 409 903 418 912 q 394 878 399 895 q 388 833 388 861 l 388 84 l 647 84 q 723 115 696 84 q 762 205 750 146 l 785 310 l 863 310 l 852 0 l 38 0 m 338 -289 q 352 -242 344 -268 q 368 -189 360 -216 q 382 -134 375 -161 q 392 -85 388 -108 l 554 -85 l 554 -98 q 529 -147 544 -120 q 495 -202 513 -174 q 458 -257 477 -230 q 421 -307 439 -285 l 338 -307 l 338 -289 "},"Õ":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 661 1203 q 688 1209 676 1203 q 709 1225 700 1215 q 722 1249 717 1235 q 729 1276 727 1262 l 820 1276 q 804 1197 817 1234 q 768 1131 790 1159 q 714 1087 745 1103 q 646 1071 683 1071 q 578 1084 609 1071 q 522 1114 548 1098 q 473 1145 496 1131 q 428 1158 451 1158 q 401 1152 413 1158 q 380 1136 389 1146 q 367 1112 372 1126 q 360 1085 362 1099 l 270 1085 q 285 1164 272 1127 q 322 1230 299 1202 q 376 1274 345 1258 q 444 1291 407 1291 q 512 1277 482 1291 q 568 1247 542 1263 q 617 1216 594 1230 q 661 1203 640 1203 "},"№":{"x_min":38.453125,"x_max":1407,"ha":1425,"o":"m 923 0 l 923 118 l 1377 118 l 1377 0 l 923 0 m 674 0 l 264 846 l 264 164 q 270 116 264 134 q 286 89 276 99 q 308 76 295 80 q 336 73 321 73 l 394 73 l 394 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 402 992 l 705 324 l 705 833 q 699 878 705 861 q 683 903 693 895 q 661 915 674 912 q 634 918 649 918 l 576 918 l 576 992 l 931 992 l 931 918 l 873 918 q 846 915 859 918 q 823 903 833 912 q 808 876 813 893 q 803 828 803 858 l 803 0 l 674 0 m 1059 420 q 1080 296 1059 338 q 1152 253 1100 253 q 1224 295 1203 253 q 1245 420 1245 337 q 1223 542 1245 501 q 1151 582 1202 582 q 1079 542 1099 582 q 1059 420 1059 501 m 1407 420 q 1341 242 1407 301 q 1151 184 1276 184 q 1043 198 1090 184 q 963 242 996 213 q 913 316 930 272 q 897 420 897 360 q 961 597 897 539 q 1154 655 1025 655 q 1259 640 1212 655 q 1338 596 1305 625 q 1389 523 1371 567 q 1407 420 1407 479 "},"χ":{"x_min":17.75,"x_max":834,"ha":838,"o":"m 246 -334 l 17 -334 l 356 278 l 251 544 q 229 593 240 572 q 205 627 218 614 q 177 648 193 641 q 140 654 161 654 q 122 652 132 654 q 101 647 112 650 q 81 640 91 643 q 64 633 71 636 l 39 688 q 75 711 56 700 q 114 730 93 721 q 155 743 134 738 q 197 749 176 749 q 247 741 226 749 q 286 715 269 734 q 318 666 304 697 q 350 590 333 636 l 419 392 l 590 745 l 809 745 l 508 208 l 628 -114 q 649 -165 638 -142 q 673 -203 660 -187 q 701 -227 686 -219 q 737 -236 717 -236 q 776 -230 759 -236 q 807 -218 794 -224 l 834 -277 q 761 -315 797 -300 q 681 -330 726 -330 q 628 -319 650 -330 q 589 -287 606 -308 q 558 -235 572 -266 q 530 -162 544 -203 l 444 86 l 246 -334 "},"ί":{"x_min":129,"x_max":533,"ha":546,"o":"m 339 745 l 339 227 q 361 128 339 159 q 432 97 383 97 q 484 100 457 97 q 533 108 511 104 l 533 15 q 507 6 524 11 q 468 -3 490 0 q 417 -10 445 -7 q 359 -14 389 -14 q 262 -2 305 -14 q 190 33 219 8 q 144 100 160 58 q 129 201 129 141 l 129 745 l 339 745 m 179 860 q 193 907 185 881 q 208 960 200 932 q 222 1014 215 987 q 232 1064 228 1041 l 422 1064 l 422 1050 q 395 1001 412 1028 q 359 947 379 974 q 317 892 339 919 q 275 842 295 865 l 179 842 l 179 860 "},"Ζ":{"x_min":58,"x_max":864,"ha":925,"o":"m 833 921 l 310 84 l 610 84 q 680 96 653 84 q 723 128 707 108 q 746 172 739 147 q 756 223 754 197 l 763 286 l 864 286 l 857 0 l 58 0 l 58 69 l 578 907 l 305 907 q 251 898 272 907 q 217 873 230 889 q 199 833 205 856 q 191 781 193 809 l 183 706 l 84 706 l 90 992 l 833 992 l 833 921 "},"Ľ":{"x_min":38.453125,"x_max":863,"ha":908,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 432 915 445 918 q 409 903 418 912 q 394 878 399 895 q 388 833 388 861 l 388 84 l 647 84 q 723 115 696 84 q 762 205 750 146 l 785 310 l 863 310 l 852 0 l 38 0 m 627 787 q 641 834 633 808 q 656 887 648 860 q 670 942 663 915 q 680 992 676 968 l 842 992 l 842 978 q 817 929 832 956 q 783 875 801 903 q 746 819 765 846 q 709 770 727 792 l 627 770 l 627 787 "},"ť":{"x_min":29.546875,"x_max":642,"ha":562,"o":"m 436 97 q 487 101 463 97 q 534 110 512 105 l 534 20 q 504 9 523 15 q 461 -2 485 2 q 405 -10 436 -7 q 337 -14 374 -14 q 253 -2 291 -14 q 188 34 215 8 q 148 102 162 60 q 134 205 134 144 l 134 650 l 29 650 l 29 721 q 109 738 74 721 q 165 779 144 756 q 229 917 208 824 l 344 917 l 344 745 l 521 745 l 521 650 l 344 650 l 344 219 q 366 127 344 156 q 436 97 387 97 m 427 850 q 441 897 433 871 q 456 950 448 923 q 470 1005 463 978 q 480 1055 476 1031 l 642 1055 l 642 1041 q 617 992 632 1019 q 583 938 601 966 q 546 882 565 909 q 509 833 527 855 l 427 833 l 427 850 "},"5":{"x_min":56,"x_max":703,"ha":777,"o":"m 319 82 q 385 93 354 82 q 439 130 416 104 q 476 198 462 155 q 490 305 490 241 q 441 460 490 409 q 301 511 391 511 q 253 509 275 511 q 214 503 232 507 q 179 495 195 499 q 147 486 163 491 l 83 511 l 127 992 l 653 992 l 660 739 l 580 739 l 569 786 q 562 808 566 798 q 551 825 558 818 q 533 835 544 831 q 505 839 522 839 l 216 839 q 215 827 216 838 q 213 797 214 816 q 209 756 212 779 q 205 709 207 733 l 195 581 q 223 589 205 586 q 260 596 240 593 q 303 601 281 599 q 347 603 326 603 q 493 584 428 603 q 605 528 559 565 q 677 436 652 491 q 703 305 703 380 q 670 153 703 215 q 584 55 637 92 q 468 1 532 17 q 340 -14 403 -14 q 208 0 262 -14 q 120 37 154 13 q 71 90 86 60 q 56 153 56 120 q 86 226 56 202 q 167 249 116 249 q 175 190 167 219 q 200 136 182 160 q 247 97 218 112 q 319 82 277 82 "},"o":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 "},"Ѕ":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 "},"�":{"x_min":56.828125,"x_max":1330.53125,"ha":1389,"o":"m 693 1055 l 1330 419 l 693 -216 l 56 419 l 693 1055 m 958 581 q 937 668 958 630 q 881 732 917 706 q 794 772 844 758 q 686 786 745 786 q 580 775 624 786 q 506 748 536 765 q 463 707 477 731 q 450 657 450 684 q 461 622 450 637 q 494 598 473 607 q 543 583 515 588 q 606 579 572 579 q 611 633 606 607 q 626 677 615 658 q 653 708 636 697 q 695 719 670 719 q 734 710 718 719 q 761 685 751 701 q 776 648 772 670 q 781 598 781 625 q 774 533 781 566 q 750 471 768 501 q 702 415 732 441 q 625 371 672 390 l 646 234 l 715 234 l 736 336 q 833 383 792 359 q 902 437 875 408 q 944 501 930 466 q 958 581 958 537 m 588 61 q 595 18 588 35 q 614 -8 602 1 q 643 -23 626 -19 q 677 -28 659 -28 q 713 -23 696 -28 q 742 -8 730 -19 q 762 18 755 1 q 770 61 770 35 q 762 103 770 86 q 742 130 755 120 q 713 145 730 141 q 677 150 696 150 q 643 145 659 150 q 614 130 626 141 q 595 103 602 120 q 588 61 588 86 "},"d":{"x_min":64,"x_max":881.71875,"ha":901,"o":"m 761 170 q 770 120 761 139 q 795 90 779 101 q 832 77 811 80 q 876 73 853 73 l 881 73 l 881 0 l 612 0 l 573 108 l 560 108 q 525 57 545 79 q 479 18 505 34 q 420 -5 453 2 q 347 -14 388 -14 q 226 8 279 -14 q 137 78 173 31 q 82 198 101 125 q 64 370 64 271 q 82 544 64 471 q 137 666 101 618 q 225 737 173 714 q 344 761 277 761 q 415 752 383 761 q 472 729 447 744 q 517 694 497 714 q 551 649 537 674 l 560 649 q 555 722 558 688 q 553 751 554 736 q 551 779 552 766 q 550 802 550 792 q 550 819 550 813 l 550 895 q 540 941 550 924 q 516 967 531 958 q 480 979 501 976 q 437 981 460 981 l 426 981 l 426 1055 l 761 1055 l 761 170 m 407 89 q 475 107 448 89 q 519 159 503 124 q 543 248 536 194 q 550 373 550 301 q 543 495 550 442 q 519 584 536 548 q 475 639 503 621 q 407 658 448 658 q 347 639 372 658 q 307 584 323 621 q 285 494 292 547 q 278 372 278 441 q 307 160 278 230 q 407 89 337 89 "},",":{"x_min":61.96875,"x_max":311,"ha":408,"o":"m 311 58 q 297 -27 311 14 q 254 -104 283 -68 q 176 -167 224 -139 q 61 -214 129 -195 l 61 -142 q 115 -120 92 -131 q 153 -96 138 -109 q 176 -69 168 -84 q 184 -33 184 -53 q 176 -12 184 -20 q 158 3 169 -3 q 133 19 146 11 q 109 39 120 26 q 90 69 97 51 q 83 115 83 87 q 111 186 83 162 q 182 211 140 211 q 276 170 241 211 q 311 58 311 129 "},"\"":{"x_min":93,"x_max":612.359375,"ha":705,"o":"m 396 992 l 612 992 l 563 610 l 471 610 l 396 992 m 93 992 l 310 992 l 247 610 l 155 610 l 93 992 "},"ľ":{"x_min":23.703125,"x_max":642,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 427 850 q 441 897 433 871 q 456 950 448 923 q 470 1005 463 978 q 480 1055 476 1031 l 642 1055 l 642 1041 q 617 992 632 1019 q 583 938 601 966 q 546 882 565 909 q 509 833 527 855 l 427 833 l 427 850 "},"ė":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 294 969 q 303 1014 294 995 q 328 1045 312 1033 q 365 1063 344 1057 q 412 1069 386 1069 q 457 1063 435 1069 q 495 1045 479 1057 q 521 1014 511 1033 q 531 969 531 995 q 521 924 531 943 q 495 893 511 905 q 457 875 479 881 q 412 869 435 869 q 365 875 386 869 q 328 893 344 881 q 303 924 312 905 q 294 969 294 943 "},"Í":{"x_min":38.453125,"x_max":524,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 172 1089 q 205 1134 186 1108 q 242 1187 223 1160 q 278 1242 261 1215 q 305 1293 294 1269 l 524 1293 l 524 1278 q 481 1233 511 1260 q 414 1175 451 1205 q 338 1118 377 1146 q 266 1071 298 1089 l 172 1071 l 172 1089 "},"Ú":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 437 1089 q 470 1134 451 1108 q 507 1187 488 1160 q 543 1242 526 1215 q 570 1293 559 1269 l 789 1293 l 789 1278 q 746 1233 776 1260 q 679 1175 716 1205 q 603 1118 642 1146 q 531 1071 563 1089 l 437 1071 l 437 1089 "}," ":{"x_min":0,"x_max":0,"ha":278},"Ŷ":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 m 242 1089 q 280 1134 258 1108 q 324 1187 302 1160 q 365 1242 345 1215 q 395 1293 384 1269 l 582 1293 q 612 1242 593 1269 q 653 1187 631 1215 q 697 1134 675 1160 q 735 1089 718 1108 l 735 1071 l 639 1071 q 605 1098 625 1082 q 564 1130 585 1113 q 523 1164 543 1147 q 488 1195 503 1181 q 452 1164 472 1181 q 411 1130 432 1147 q 371 1098 391 1113 q 338 1071 352 1082 l 242 1071 l 242 1089 "},"Ý":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 m 409 1089 q 442 1134 423 1108 q 479 1187 460 1160 q 515 1242 498 1215 q 542 1293 531 1269 l 761 1293 l 761 1278 q 718 1233 748 1260 q 651 1175 688 1205 q 575 1118 614 1146 q 503 1071 535 1089 l 409 1071 l 409 1089 "},"ŝ":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 m 94 860 q 132 905 110 879 q 176 958 154 931 q 217 1013 197 986 q 247 1064 236 1040 l 434 1064 q 464 1013 445 1040 q 505 958 483 986 q 549 905 527 931 q 587 860 570 879 l 587 842 l 491 842 q 457 869 477 853 q 416 901 437 884 q 375 935 395 918 q 340 966 355 952 q 304 935 324 952 q 263 901 284 918 q 223 869 243 884 q 190 842 204 853 l 94 842 l 94 860 "}," ":{"x_min":0,"x_max":0,"ha":1389},"ą":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 367 -180 q 380 -118 367 -147 q 417 -65 394 -89 q 469 -24 440 -41 q 531 0 499 -7 l 638 0 q 593 -20 616 -6 q 551 -53 570 -33 q 520 -100 533 -74 q 508 -160 508 -127 q 515 -193 508 -179 q 535 -215 522 -207 q 566 -229 548 -224 q 604 -233 583 -233 q 644 -230 623 -233 q 692 -222 666 -228 l 692 -311 q 665 -321 681 -317 q 632 -327 649 -325 q 600 -332 616 -330 q 573 -334 584 -334 q 419 -297 472 -334 q 367 -180 367 -260 "},"​":{"x_min":0,"x_max":0,"ha":0},"ã":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 534 974 q 561 980 549 974 q 582 996 573 986 q 595 1020 590 1006 q 602 1047 600 1033 l 693 1047 q 677 968 690 1005 q 641 902 663 930 q 587 858 618 874 q 519 842 556 842 q 451 855 482 842 q 395 885 421 869 q 346 916 369 902 q 301 929 324 929 q 274 923 286 929 q 253 907 262 917 q 240 883 245 897 q 233 856 235 870 l 143 856 q 158 935 145 898 q 195 1001 172 973 q 249 1045 218 1029 q 317 1062 280 1062 q 385 1048 355 1062 q 441 1018 415 1034 q 490 987 467 1001 q 534 974 513 974 "},"æ":{"x_min":62,"x_max":1157,"ha":1215,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 264 487 223 l 487 369 l 424 364 q 354 351 383 362 q 309 320 326 340 q 285 272 292 301 q 277 206 277 244 m 834 671 q 741 614 776 671 q 703 445 706 556 l 944 445 q 918 612 944 553 q 834 671 891 671 m 849 -14 q 672 19 746 -14 q 553 118 598 53 q 437 17 506 49 q 280 -14 368 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 211 62 154 q 139 379 62 324 q 373 438 217 433 l 487 442 l 487 519 q 484 582 487 553 q 472 633 481 612 q 446 665 463 654 q 400 677 429 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 535 743 480 762 q 627 683 590 725 q 719 741 668 721 q 831 762 769 762 q 967 740 907 762 q 1070 677 1028 719 q 1134 572 1112 635 q 1157 427 1157 510 l 1157 356 l 700 356 q 715 236 702 286 q 752 153 729 186 q 810 105 776 120 q 887 89 843 89 q 953 98 923 89 q 1009 121 984 106 q 1052 157 1034 137 q 1083 202 1070 178 q 1121 134 1121 182 q 1105 77 1121 104 q 1055 30 1089 51 q 971 -1 1022 10 q 849 -14 920 -14 "},"ĩ":{"x_min":-36,"x_max":514,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 355 974 q 382 980 370 974 q 403 996 394 986 q 416 1020 411 1006 q 423 1047 421 1033 l 514 1047 q 498 968 511 1005 q 462 902 484 930 q 408 858 439 874 q 340 842 377 842 q 272 855 303 842 q 216 885 242 869 q 167 916 190 902 q 122 929 145 929 q 95 923 107 929 q 74 907 83 917 q 61 883 66 897 q 54 856 56 870 l -36 856 q -20 935 -33 898 q 16 1001 -6 973 q 70 1045 39 1029 q 138 1062 101 1062 q 206 1048 176 1062 q 262 1018 236 1034 q 311 987 288 1001 q 355 974 334 974 "},"~":{"x_min":77,"x_max":702,"ha":779,"o":"m 366 450 q 322 468 341 461 q 288 479 303 475 q 259 485 273 484 q 230 487 245 487 q 191 481 211 487 q 151 463 171 474 q 112 438 131 453 q 77 405 93 423 l 77 512 q 244 586 144 586 q 280 584 263 586 q 316 578 297 582 q 357 565 334 573 q 412 543 380 556 q 456 525 437 532 q 490 513 475 517 q 520 507 506 508 q 548 505 534 505 q 587 511 567 505 q 627 529 607 518 q 666 555 647 540 q 702 587 685 570 l 702 480 q 534 407 635 407 q 497 408 514 407 q 462 415 481 410 q 421 428 444 419 q 366 450 398 436 "},"ŀ":{"x_min":23.703125,"x_max":683.390625,"ha":650,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 446 456 q 455 501 446 482 q 480 532 464 520 q 517 550 496 544 q 564 556 538 556 q 609 550 587 556 q 647 532 631 544 q 673 501 663 520 q 683 456 683 482 q 673 411 683 430 q 647 380 663 392 q 609 362 631 368 q 564 356 587 356 q 517 362 538 356 q 480 380 496 368 q 455 411 464 392 q 446 456 446 430 "},"Ċ":{"x_min":77,"x_max":872,"ha":928,"o":"m 590 96 q 680 108 640 96 q 751 139 720 120 q 805 182 782 158 q 846 228 829 205 q 864 203 857 220 q 870 169 870 186 q 855 107 870 139 q 802 48 839 75 q 705 3 766 21 q 556 -14 645 -14 q 346 22 436 -14 q 196 126 255 59 q 106 288 136 193 q 77 497 77 382 q 107 703 77 609 q 197 864 138 796 q 347 968 257 931 q 555 1006 437 1006 q 694 993 635 1006 q 793 959 754 980 q 852 908 832 937 q 872 844 872 878 q 860 796 872 818 q 827 758 849 774 q 772 733 805 742 q 698 723 740 723 q 690 792 698 758 q 665 854 683 826 q 618 899 647 882 q 546 917 589 917 q 434 889 480 917 q 362 807 389 861 q 322 675 334 754 q 310 497 310 597 q 325 321 310 396 q 373 195 340 245 q 459 121 406 146 q 590 96 512 96 m 421 1198 q 430 1243 421 1224 q 455 1274 439 1262 q 492 1292 471 1286 q 539 1298 513 1298 q 584 1292 562 1298 q 622 1274 606 1286 q 648 1243 638 1262 q 658 1198 658 1224 q 648 1153 658 1172 q 622 1122 638 1134 q 584 1104 606 1110 q 539 1098 562 1098 q 492 1104 513 1098 q 455 1122 471 1110 q 430 1153 439 1134 q 421 1198 421 1172 "},"¡":{"x_min":144.578125,"x_max":386.140625,"ha":530,"o":"m 386 -250 l 144 -250 l 226 426 l 304 426 l 386 -250 m 378 642 q 369 588 378 610 q 345 554 360 567 q 308 536 329 541 q 264 531 287 531 q 220 536 240 531 q 183 554 199 541 q 159 588 168 567 q 150 642 150 610 q 159 694 150 673 q 183 728 168 715 q 220 747 199 741 q 264 753 240 753 q 308 747 287 753 q 345 728 329 741 q 369 694 360 715 q 378 642 378 673 "},"ẅ":{"x_min":-4.40625,"x_max":1190.078125,"ha":1189,"o":"m 686 737 l 821 327 q 846 242 838 277 q 858 181 853 207 l 862 181 q 868 215 865 199 q 876 247 871 230 q 886 284 880 264 q 899 330 891 304 l 960 533 q 970 571 966 550 q 973 603 973 591 q 951 654 973 638 q 881 671 928 671 l 871 671 l 871 745 l 1190 745 l 1190 671 l 1172 671 q 1137 667 1152 671 q 1110 651 1122 662 q 1089 617 1099 639 q 1068 562 1078 596 l 888 0 l 739 0 l 587 461 l 427 0 l 276 0 l 98 597 q 81 633 90 619 q 61 656 72 648 q 34 667 49 664 q 0 671 20 671 l -4 671 l -4 745 l 402 745 l 402 671 l 384 671 q 321 659 342 671 q 300 612 300 647 q 304 584 300 601 q 312 553 308 568 l 363 372 q 376 320 370 347 q 388 269 382 294 q 398 221 393 244 q 405 181 402 199 l 409 181 q 425 253 415 216 q 454 341 436 290 l 595 737 l 686 737 m 395 955 q 401 995 395 978 q 419 1022 408 1011 q 445 1036 430 1032 q 476 1041 460 1041 q 507 1036 493 1041 q 534 1022 522 1032 q 552 995 545 1011 q 560 955 560 978 q 552 915 560 931 q 534 888 545 898 q 507 873 522 878 q 476 869 493 869 q 445 873 460 869 q 419 888 430 878 q 401 915 408 898 q 395 955 395 931 m 680 955 q 686 995 680 978 q 705 1022 693 1011 q 731 1036 716 1032 q 763 1041 746 1041 q 793 1036 778 1041 q 819 1022 807 1032 q 837 995 830 1011 q 845 955 845 978 q 837 915 845 931 q 819 888 830 898 q 793 873 807 878 q 763 869 778 869 q 731 873 746 869 q 705 888 716 878 q 686 915 693 898 q 680 955 680 931 "},"К":{"x_min":38.453125,"x_max":1000,"ha":1000,"o":"m 901 0 q 807 8 847 0 q 738 33 768 16 q 687 75 709 50 q 648 132 665 99 l 516 372 q 485 419 499 403 q 455 445 471 436 q 419 456 439 454 q 373 458 400 458 l 373 164 q 379 116 373 134 q 394 89 385 99 q 417 76 404 80 q 445 73 430 73 l 503 73 l 503 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 503 992 l 503 918 l 445 918 q 417 915 430 918 q 394 903 404 912 q 379 875 385 893 q 373 828 373 858 l 373 538 q 413 540 396 538 q 442 546 429 542 q 467 558 456 550 q 488 577 477 566 q 538 647 507 597 q 606 773 568 697 q 663 877 637 834 q 719 947 690 920 q 781 987 748 974 q 856 1000 814 1000 q 940 975 915 1000 q 966 912 966 950 q 947 842 966 869 q 898 809 929 815 q 889 836 895 823 q 873 859 883 849 q 851 875 864 869 q 820 881 837 881 q 781 872 799 881 q 748 846 764 864 q 714 798 732 827 q 675 727 697 769 q 635 652 652 684 q 601 597 617 620 q 571 558 586 575 q 540 530 556 542 q 598 521 570 530 q 650 494 626 511 q 694 453 674 477 q 731 400 715 429 l 844 198 q 879 141 863 165 q 914 103 896 118 q 950 81 932 88 q 991 73 969 73 l 1000 73 l 1000 0 l 901 0 "},"Γ":{"x_min":38.453125,"x_max":807,"ha":821,"o":"m 797 992 l 807 720 l 729 720 l 712 786 q 666 877 697 846 q 579 907 635 907 l 388 907 l 388 158 q 394 114 388 130 q 409 88 399 97 q 432 76 418 79 q 459 73 445 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 797 992 "},"P":{"x_min":38.453125,"x_max":844,"ha":886,"o":"m 844 697 q 822 577 844 635 q 751 475 800 519 q 625 405 702 431 q 434 379 547 379 l 387 379 l 387 156 q 393 112 387 129 q 409 87 399 96 q 433 76 419 79 q 460 73 446 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 464 992 q 632 971 561 992 q 750 912 703 951 q 820 820 797 874 q 844 697 844 766 m 387 460 l 420 460 q 508 472 472 460 q 566 513 544 485 q 600 585 589 541 q 610 692 610 629 q 601 788 610 747 q 572 856 592 829 q 520 896 552 883 q 441 909 488 909 l 387 909 l 387 460 "},"%":{"x_min":47,"x_max":1211,"ha":1258,"o":"m 547 698 q 531 572 547 629 q 484 474 515 515 q 406 411 454 433 q 296 389 359 389 q 183 411 230 389 q 105 474 135 433 q 61 572 75 515 q 47 698 47 629 q 61 825 47 768 q 106 922 75 881 q 184 984 136 962 q 298 1006 231 1006 q 407 984 360 1006 q 485 922 454 962 q 531 825 516 881 q 547 698 547 768 m 203 698 q 208 597 203 641 q 224 522 213 553 q 253 475 235 491 q 296 458 271 458 q 340 475 323 458 q 368 522 357 491 q 383 597 379 553 q 388 698 388 641 q 383 798 388 754 q 368 872 379 841 q 341 918 358 902 q 298 934 323 934 q 254 918 272 934 q 225 872 236 902 q 208 798 213 841 q 203 698 203 754 m 440 0 l 332 0 l 812 992 l 919 992 l 440 0 m 1211 295 q 1195 168 1211 225 q 1148 70 1179 111 q 1070 8 1118 30 q 960 -14 1023 -14 q 847 8 894 -14 q 769 70 799 30 q 725 168 739 111 q 711 295 711 225 q 725 422 711 365 q 770 519 739 478 q 848 581 800 559 q 962 603 895 603 q 1071 581 1024 603 q 1149 519 1118 559 q 1195 422 1180 478 q 1211 295 1211 365 m 867 295 q 872 194 867 238 q 888 118 877 149 q 917 71 899 87 q 960 55 935 55 q 1004 71 987 55 q 1032 118 1021 87 q 1047 194 1043 149 q 1052 295 1052 238 q 1047 394 1052 351 q 1032 469 1043 438 q 1005 515 1022 499 q 962 531 987 531 q 918 515 936 531 q 889 469 900 499 q 872 394 877 438 q 867 295 867 351 "},"ϖ":{"x_min":28,"x_max":1381.328125,"ha":1409,"o":"m 1194 745 q 1247 754 1225 745 q 1281 779 1268 763 q 1301 817 1295 795 q 1307 863 1307 838 l 1381 863 q 1363 723 1381 780 q 1317 632 1346 667 q 1255 581 1289 597 q 1186 565 1220 565 l 1120 565 q 1181 440 1158 508 q 1205 287 1205 373 q 1186 157 1205 213 q 1132 62 1167 100 q 1047 5 1097 24 q 934 -14 997 -14 q 851 -3 886 -14 q 790 25 816 6 q 746 71 764 44 q 713 133 728 99 q 679 71 697 99 q 636 25 661 44 q 576 -3 610 6 q 494 -14 542 -14 q 381 5 431 -14 q 296 62 331 24 q 242 157 261 100 q 224 287 224 213 q 246 440 224 373 q 307 565 269 508 l 213 565 q 161 556 183 565 q 127 531 140 547 q 108 493 114 515 q 101 447 101 471 l 28 447 q 45 586 28 529 q 91 678 63 643 q 154 729 119 713 q 222 745 188 745 l 1194 745 m 990 302 q 986 382 990 345 q 975 452 982 419 q 957 512 968 484 q 935 565 947 540 l 491 565 q 469 511 479 540 q 452 451 460 483 q 441 381 445 419 q 437 299 437 343 q 448 201 437 241 q 475 136 458 161 q 514 100 493 111 q 557 89 535 89 q 624 117 597 89 q 662 206 652 144 q 645 258 652 235 q 633 300 637 281 q 626 338 628 320 q 624 376 624 356 q 647 454 624 431 q 714 478 670 478 q 781 454 758 478 q 804 376 804 431 q 802 338 804 356 q 794 301 799 321 q 782 258 789 281 q 765 206 775 235 q 803 117 776 145 q 871 89 830 89 q 913 100 892 89 q 952 136 935 111 q 980 202 969 161 q 990 302 990 243 "},"_":{"x_min":-7,"x_max":644,"ha":638,"o":"m 644 -197 l -7 -197 l -7 -114 l 644 -114 l 644 -197 "},"ñ":{"x_min":27.78125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 580 q 131 627 139 610 q 111 655 124 645 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 418 730 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 m 570 974 q 597 980 585 974 q 618 996 609 986 q 631 1020 626 1006 q 638 1047 636 1033 l 729 1047 q 713 968 726 1005 q 677 902 699 930 q 623 858 654 874 q 555 842 592 842 q 487 855 518 842 q 431 885 457 869 q 382 916 405 902 q 337 929 360 929 q 310 923 322 929 q 289 907 298 917 q 276 883 281 897 q 269 856 271 870 l 179 856 q 194 935 181 898 q 231 1001 208 973 q 285 1045 254 1029 q 353 1062 316 1062 q 421 1048 391 1062 q 477 1018 451 1034 q 526 987 503 1001 q 570 974 549 974 "},"Ŕ":{"x_min":38.453125,"x_max":987.734375,"ha":982,"o":"m 38 73 l 96 73 q 123 76 111 73 q 146 87 136 79 q 162 112 156 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 486 992 q 775 926 683 992 q 867 735 867 860 q 850 637 867 680 q 807 562 834 594 q 746 508 780 530 q 677 472 712 486 l 843 187 q 877 136 860 157 q 910 100 894 114 q 945 80 927 86 q 982 73 962 73 l 987 73 l 987 0 l 942 0 q 833 4 879 0 q 751 23 786 9 q 691 61 716 37 q 644 124 666 86 l 479 431 l 387 431 l 387 156 q 392 112 387 129 q 408 87 398 96 q 431 76 418 79 q 458 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 m 387 512 l 465 512 q 545 524 513 512 q 597 563 577 537 q 625 626 616 588 q 633 716 633 665 q 624 805 633 768 q 594 865 614 842 q 541 899 573 888 q 462 909 508 909 l 387 909 l 387 512 m 373 1089 q 406 1134 387 1108 q 443 1187 424 1160 q 479 1242 462 1215 q 506 1293 495 1269 l 725 1293 l 725 1278 q 682 1233 712 1260 q 615 1175 652 1205 q 539 1118 578 1146 q 467 1071 499 1089 l 373 1071 l 373 1089 "},"‚":{"x_min":61.96875,"x_max":311,"ha":408,"o":"m 311 58 q 297 -27 311 14 q 254 -104 283 -68 q 176 -167 224 -139 q 61 -214 129 -195 l 61 -142 q 115 -120 92 -131 q 153 -96 138 -109 q 176 -69 168 -84 q 184 -33 184 -53 q 176 -12 184 -20 q 158 3 169 -3 q 133 19 146 11 q 109 39 120 26 q 90 69 97 51 q 83 115 83 87 q 111 186 83 162 q 182 211 140 211 q 276 170 241 211 q 311 58 311 129 "},"⅞":{"x_min":67,"x_max":1136,"ha":1167,"o":"m 176 399 l 425 880 l 182 880 q 148 871 159 880 q 136 840 138 861 l 130 796 l 67 796 l 71 992 l 514 992 l 514 908 l 281 399 l 176 399 m 336 0 l 228 0 l 723 992 l 831 992 l 336 0 m 653 152 q 664 202 653 181 q 694 240 675 223 q 740 270 714 257 q 795 294 766 283 q 749 322 771 306 q 711 357 727 337 q 684 402 694 377 q 675 457 675 427 q 687 511 675 484 q 726 559 699 537 q 796 593 753 580 q 902 607 840 607 q 989 597 950 607 q 1055 569 1028 588 q 1097 525 1082 551 q 1112 466 1112 499 q 1102 420 1112 441 q 1076 382 1093 399 q 1038 351 1060 364 q 992 327 1017 337 q 1053 296 1026 312 q 1098 260 1079 280 q 1126 215 1116 240 q 1136 158 1136 190 q 1120 92 1136 122 q 1074 38 1105 61 q 997 2 1043 15 q 889 -10 951 -10 q 786 2 830 -10 q 712 37 741 15 q 667 89 682 59 q 653 152 653 118 m 897 51 q 968 72 942 51 q 994 137 994 93 q 986 176 994 159 q 961 208 977 194 q 921 235 945 222 q 864 261 896 248 q 814 215 834 243 q 794 147 794 187 q 820 78 794 105 q 897 51 846 51 m 963 463 q 959 495 963 480 q 945 521 954 510 q 923 539 937 532 q 893 545 910 545 q 841 525 858 545 q 823 470 823 505 q 831 431 823 447 q 851 401 839 414 q 880 379 864 388 q 912 362 896 370 q 949 400 935 377 q 963 463 963 423 "},"Æ":{"x_min":-0.390625,"x_max":1335,"ha":1380,"o":"m 861 84 l 1138 84 q 1174 92 1159 84 q 1200 114 1189 100 q 1217 148 1211 128 q 1227 190 1224 167 l 1239 256 l 1335 256 l 1325 0 l 511 0 l 511 73 l 569 73 q 623 97 607 73 q 640 156 640 120 l 640 318 l 320 318 l 262 201 q 245 160 250 180 q 239 128 239 140 q 261 86 239 99 q 323 73 282 73 l 346 73 l 346 0 l 0 0 l 0 73 l 16 73 q 81 100 52 73 q 140 181 109 126 l 530 911 l 438 918 l 438 992 l 1282 992 l 1288 736 l 1191 736 l 1184 801 q 1158 880 1178 852 q 1095 907 1137 907 l 861 907 l 861 560 l 1190 560 l 1190 476 l 861 476 l 861 84 m 626 907 l 365 402 l 640 402 l 640 907 l 626 907 "},"₣":{"x_min":38.453125,"x_max":745,"ha":777,"o":"m 647 736 l 640 803 q 607 882 634 858 q 537 907 580 907 l 373 907 l 373 528 l 645 528 l 645 445 l 373 445 l 373 318 l 560 318 l 560 237 l 373 237 l 373 164 q 379 116 373 134 q 394 89 385 99 q 417 76 404 80 q 445 73 430 73 l 531 73 l 531 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 237 l 44 237 l 44 318 l 168 318 l 168 833 q 162 878 168 861 q 147 903 157 894 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 737 992 l 745 736 l 647 736 "},"Ū":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 760 1071 l 357 1071 l 357 1180 l 760 1180 l 760 1071 "},"ы":{"x_min":23.703125,"x_max":1226.84375,"ha":1257,"o":"m 482 745 l 482 665 l 463 665 q 420 661 440 665 q 383 647 399 657 q 359 621 368 637 q 349 580 349 605 l 349 424 l 455 424 q 578 416 520 424 q 680 386 636 408 q 750 323 724 364 q 776 218 776 283 q 756 131 776 171 q 698 62 737 91 q 601 16 659 33 q 462 0 542 0 l 23 0 l 23 73 l 38 73 q 114 96 90 73 q 139 162 139 118 l 139 580 q 113 650 139 629 q 38 671 88 671 l 23 671 l 23 745 l 482 745 m 426 80 q 485 88 461 80 q 525 112 509 96 q 547 156 540 129 q 554 222 554 183 q 519 315 554 288 q 421 343 484 343 l 349 343 l 349 80 l 426 80 m 792 0 l 792 73 l 809 73 q 841 76 823 73 q 873 89 858 80 q 897 116 887 99 q 907 164 907 134 l 907 580 q 897 628 907 610 q 873 655 887 645 q 841 668 858 664 q 809 671 823 671 l 792 671 l 792 745 l 1226 745 l 1226 671 l 1210 671 q 1180 668 1196 671 q 1150 655 1164 664 q 1128 628 1137 645 q 1119 580 1119 610 l 1119 164 q 1128 116 1119 134 q 1150 89 1137 99 q 1180 76 1164 80 q 1210 73 1196 73 l 1226 73 l 1226 0 l 792 0 "},"ѓ":{"x_min":23.703125,"x_max":677,"ha":705,"o":"m 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 472 73 l 472 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 677 745 l 677 509 l 581 509 l 574 568 q 564 620 571 601 q 546 650 557 639 q 518 662 535 660 q 477 665 501 665 l 349 665 l 349 164 m 248 860 q 281 905 262 879 q 318 958 299 931 q 354 1013 337 986 q 381 1064 370 1040 l 600 1064 l 600 1049 q 557 1004 587 1031 q 490 946 527 976 q 414 889 453 917 q 342 842 374 860 l 248 842 l 248 860 "},"Œ":{"x_min":77,"x_max":1370,"ha":1415,"o":"m 897 84 l 1174 84 q 1210 92 1195 84 q 1236 114 1225 100 q 1253 147 1246 128 q 1263 190 1259 167 l 1274 255 l 1370 255 l 1360 0 l 691 0 q 621 -10 661 -6 q 547 -14 581 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 624 1003 584 1007 q 695 992 665 999 l 1317 992 l 1323 736 l 1225 736 l 1218 801 q 1192 880 1213 852 q 1129 907 1172 907 l 897 907 l 897 559 l 1225 559 l 1225 475 l 897 475 l 897 84 m 547 76 q 618 86 587 76 q 676 116 650 96 l 676 874 q 620 904 652 892 q 548 916 587 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 483 76 "},"΅":{"x_min":142,"x_max":647,"ha":802,"o":"m 330 973 q 344 1019 336 994 q 360 1073 352 1045 q 374 1127 367 1100 q 384 1177 380 1153 l 546 1177 l 546 1162 q 521 1114 536 1141 q 487 1059 505 1087 q 450 1004 469 1031 q 413 955 431 977 l 330 955 l 330 973 m 142 955 q 148 995 142 978 q 166 1022 155 1011 q 192 1036 177 1032 q 223 1041 207 1041 q 254 1036 240 1041 q 281 1022 269 1032 q 299 995 292 1011 q 307 955 307 978 q 299 915 307 931 q 281 888 292 898 q 254 873 269 878 q 223 869 240 869 q 192 873 207 869 q 166 888 177 878 q 148 915 155 898 q 142 955 142 931 m 482 955 q 488 995 482 978 q 507 1022 495 1011 q 533 1036 518 1032 q 565 1041 548 1041 q 595 1036 581 1041 q 621 1022 610 1032 q 640 995 633 1011 q 647 955 647 978 q 640 915 647 931 q 621 888 633 898 q 595 873 610 878 q 565 869 581 869 q 533 873 548 869 q 507 888 518 878 q 488 915 495 898 q 482 955 482 931 "},"Ą":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 607 -180 q 620 -118 607 -147 q 657 -65 634 -89 q 709 -24 680 -41 q 771 0 739 -7 l 878 0 q 833 -20 856 -6 q 791 -53 810 -33 q 760 -100 773 -74 q 748 -160 748 -127 q 755 -193 748 -179 q 775 -215 762 -207 q 806 -229 788 -224 q 844 -233 823 -233 q 884 -230 863 -233 q 932 -222 906 -228 l 932 -311 q 905 -321 921 -317 q 872 -327 889 -325 q 840 -332 856 -330 q 813 -334 824 -334 q 659 -297 712 -334 q 607 -180 607 -260 "},"Њ":{"x_min":38.453125,"x_max":1369,"ha":1411,"o":"m 1056 992 l 1056 918 l 999 918 q 943 900 961 918 q 925 835 925 881 l 925 558 l 999 558 q 1169 538 1099 558 q 1283 481 1239 517 q 1348 393 1328 444 q 1369 281 1369 342 q 1346 166 1369 218 q 1277 77 1323 114 q 1159 20 1230 40 q 992 0 1088 0 l 590 0 l 590 73 l 635 73 q 670 79 656 73 q 691 94 683 84 q 702 123 699 105 q 706 165 706 141 l 706 475 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 503 73 l 503 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 503 992 l 503 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 560 l 706 560 l 706 828 q 700 874 706 857 q 686 902 695 892 q 664 915 677 911 q 635 918 651 918 l 590 918 l 590 992 l 1056 992 m 925 82 l 980 82 q 1051 93 1022 82 q 1099 129 1081 105 q 1126 189 1118 153 q 1134 273 1134 225 q 1124 368 1134 329 q 1094 431 1115 407 q 1042 467 1074 456 q 964 478 1010 478 l 925 478 l 925 82 "},"›":{"x_min":90.046875,"x_max":400,"ha":490,"o":"m 400 339 l 187 97 l 90 97 l 230 375 l 90 654 l 187 654 l 400 411 l 400 339 "},"ћ":{"x_min":18.28125,"x_max":889.65625,"ha":926,"o":"m 139 876 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 876 l 565 876 l 565 802 l 349 802 l 349 784 q 348 726 349 757 q 344 669 346 695 q 339 608 341 638 l 351 608 q 395 670 372 647 q 445 703 418 692 q 501 717 471 714 q 563 721 530 721 q 659 705 616 721 q 731 657 701 689 q 776 574 760 624 q 792 453 792 523 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 l 581 415 q 575 494 581 459 q 556 553 569 529 q 521 590 543 577 q 470 602 500 602 q 412 585 435 602 q 375 537 389 567 q 356 469 362 508 q 349 387 349 430 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 802 l 18 802 l 18 876 l 139 876 "},"<":{"x_min":90,"x_max":687,"ha":777,"o":"m 90 468 l 90 525 l 687 850 l 687 740 l 238 496 l 687 254 l 687 145 l 90 468 "},"¬":{"x_min":90,"x_max":687,"ha":777,"o":"m 687 546 l 687 198 l 586 198 l 586 446 l 90 446 l 90 546 l 687 546 "},"t":{"x_min":29.546875,"x_max":534,"ha":562,"o":"m 436 97 q 487 101 463 97 q 534 110 512 105 l 534 20 q 504 9 523 15 q 461 -2 485 2 q 405 -10 436 -7 q 337 -14 374 -14 q 253 -2 291 -14 q 188 34 215 8 q 148 102 162 60 q 134 205 134 144 l 134 650 l 29 650 l 29 721 q 109 738 74 721 q 165 779 144 756 q 229 917 208 824 l 344 917 l 344 745 l 521 745 l 521 650 l 344 650 l 344 219 q 366 127 344 156 q 436 97 387 97 "},"Ц":{"x_min":38.453125,"x_max":1090,"ha":1132,"o":"m 1090 -292 l 997 -292 q 987 -159 997 -214 q 956 -68 978 -104 q 901 -16 935 -33 q 819 0 868 0 l 38 0 l 38 73 l 96 73 q 123 76 111 73 q 146 88 136 79 q 162 114 156 97 q 168 158 168 130 l 168 828 q 162 876 168 858 q 147 903 157 893 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 84 l 736 84 l 736 828 q 730 876 736 858 q 715 903 725 893 q 692 915 705 912 q 665 918 679 918 l 606 918 l 606 992 l 1084 992 l 1084 918 l 1026 918 q 999 916 1012 918 q 977 904 987 913 q 961 879 967 895 q 956 835 956 863 l 956 84 l 1090 84 l 1090 -292 "},"ù":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 430 842 q 358 889 398 860 q 281 946 318 917 q 214 1004 244 976 q 172 1049 184 1031 l 172 1064 l 389 1064 q 417 1013 400 1040 q 453 958 434 986 q 491 905 471 931 q 525 860 510 879 l 525 842 l 430 842 "},"ï":{"x_min":0,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 0 955 q 6 995 0 978 q 24 1022 13 1011 q 50 1036 35 1032 q 81 1041 65 1041 q 112 1036 98 1041 q 139 1022 127 1032 q 157 995 150 1011 q 165 955 165 978 q 157 915 165 931 q 139 888 150 898 q 112 873 127 878 q 81 869 98 869 q 50 873 65 869 q 24 888 35 878 q 6 915 13 898 q 0 955 0 931 m 285 955 q 291 995 285 978 q 310 1022 298 1011 q 336 1036 321 1032 q 368 1041 351 1041 q 398 1036 383 1041 q 424 1022 412 1032 q 442 995 435 1011 q 450 955 450 978 q 442 915 450 931 q 424 888 435 898 q 398 873 412 878 q 368 869 383 869 q 336 873 351 869 q 310 888 321 878 q 291 915 298 898 q 285 955 285 931 "},"Ф":{"x_min":41,"x_max":1139,"ha":1181,"o":"m 691 266 l 731 266 q 822 279 784 266 q 883 322 859 293 q 918 398 907 351 q 929 510 929 444 q 919 611 929 568 q 889 682 910 654 q 833 724 867 710 q 750 737 799 737 l 691 737 l 691 266 m 489 737 l 430 737 q 347 724 381 737 q 291 682 313 710 q 260 611 270 654 q 251 510 251 568 q 262 398 251 444 q 297 322 273 351 q 358 279 321 293 q 448 266 395 266 l 489 266 l 489 737 m 489 186 l 445 186 q 311 198 370 186 q 207 234 252 211 q 131 288 163 257 q 79 357 99 320 q 50 434 59 393 q 41 515 41 474 q 63 639 41 583 q 131 735 85 695 q 248 797 178 775 q 412 820 317 820 l 489 820 l 489 834 q 479 878 489 861 q 455 903 470 895 q 419 915 440 912 q 375 918 398 918 l 356 918 l 356 992 l 823 992 l 823 918 l 805 918 q 761 915 782 918 q 725 903 740 912 q 700 878 710 895 q 691 834 691 861 l 691 820 l 768 820 q 933 797 863 820 q 1048 735 1002 775 q 1116 639 1094 695 q 1139 515 1139 583 q 1129 434 1139 474 q 1100 357 1120 393 q 1049 288 1080 320 q 972 234 1017 257 q 868 198 927 211 q 734 186 809 186 l 691 186 l 691 158 q 700 114 691 130 q 725 88 710 97 q 761 76 740 79 q 805 73 782 73 l 823 73 l 823 0 l 356 0 l 356 73 l 375 73 q 419 76 398 73 q 455 88 440 79 q 479 114 470 97 q 489 158 489 130 l 489 186 "},"Ò":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 551 1071 q 479 1118 519 1089 q 402 1175 439 1146 q 335 1233 365 1205 q 293 1278 305 1260 l 293 1293 l 510 1293 q 538 1242 521 1269 q 574 1187 555 1215 q 612 1134 592 1160 q 646 1089 631 1108 l 646 1071 l 551 1071 "},"I":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 "},"˝":{"x_min":128,"x_max":686,"ha":802,"o":"m 128 842 l 128 860 q 158 908 142 882 q 190 961 174 934 q 220 1014 206 988 q 245 1064 235 1040 l 423 1064 l 423 1049 q 402 1021 415 1037 q 372 985 389 1004 q 335 946 355 966 q 296 907 316 926 q 258 871 277 888 q 224 842 239 854 l 128 842 m 392 842 l 392 860 q 422 908 406 882 q 454 961 438 934 q 484 1014 470 988 q 509 1064 498 1040 l 686 1064 l 686 1049 q 665 1021 678 1037 q 635 985 652 1004 q 599 946 618 966 q 560 907 579 926 q 521 871 540 888 q 487 842 503 854 l 392 842 "},"·":{"x_min":97,"x_max":325,"ha":423,"o":"m 97 493 q 105 546 97 524 q 129 580 114 567 q 166 598 145 593 q 211 604 187 604 q 254 598 234 604 q 291 580 275 593 q 315 546 306 567 q 325 493 325 524 q 315 440 325 461 q 291 406 306 419 q 254 387 275 393 q 211 382 234 382 q 166 387 187 382 q 129 406 145 393 q 105 440 114 419 q 97 493 97 461 "},"¿":{"x_min":77,"x_max":713,"ha":764,"o":"m 77 -9 q 94 90 77 46 q 145 171 111 134 q 231 238 179 207 q 352 297 283 268 l 380 424 l 465 424 l 493 253 q 395 197 434 229 q 336 127 357 164 q 305 50 314 91 q 297 -31 297 9 q 303 -92 297 -64 q 322 -139 309 -119 q 356 -170 336 -159 q 405 -181 377 -181 q 458 -167 437 -181 q 492 -129 479 -153 q 511 -74 505 -105 q 517 -6 517 -42 q 595 -12 559 -6 q 657 -31 631 -18 q 698 -61 683 -43 q 713 -104 713 -79 q 695 -167 713 -138 q 641 -218 677 -196 q 549 -252 605 -239 q 416 -265 493 -265 q 281 -247 343 -265 q 173 -197 218 -230 q 102 -117 128 -164 q 77 -9 77 -69 m 540 640 q 531 586 540 608 q 507 552 522 565 q 470 534 491 539 q 426 529 449 529 q 382 534 402 529 q 345 552 361 539 q 321 586 330 565 q 312 640 312 608 q 321 692 312 671 q 345 726 330 713 q 382 745 361 739 q 426 751 402 751 q 470 745 449 751 q 507 726 491 739 q 531 692 522 713 q 540 640 540 671 "},"ſ":{"x_min":9.46875,"x_max":654,"ha":545,"o":"m 9 0 l 9 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 796 q 155 911 139 860 q 207 996 172 961 q 295 1049 242 1031 q 422 1068 349 1068 q 534 1060 489 1068 q 605 1038 578 1052 q 642 1006 631 1024 q 654 966 654 987 q 611 897 654 919 q 483 876 569 876 q 479 912 483 893 q 467 949 475 932 q 446 977 459 966 q 413 988 433 988 q 384 979 396 988 q 364 950 372 970 q 353 898 357 930 q 349 820 349 866 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 514 73 l 514 0 l 9 0 "},"Ђ":{"x_min":13,"x_max":1089,"ha":1145,"o":"m 536 568 q 576 582 553 575 q 628 595 599 589 q 689 604 656 600 q 756 609 721 609 q 899 594 837 609 q 1003 545 960 580 q 1067 453 1045 511 q 1089 308 1089 395 q 1068 159 1089 219 q 1008 64 1047 99 q 911 14 968 29 q 781 0 855 0 l 744 0 l 744 80 l 759 80 q 805 87 785 80 q 839 116 825 94 q 860 179 853 138 q 867 289 867 220 q 855 399 867 357 q 821 462 843 440 q 769 490 800 484 q 703 497 739 497 q 652 494 677 497 q 605 486 627 491 q 566 475 584 481 q 536 464 548 469 l 536 164 q 541 116 536 134 q 556 89 546 99 q 578 76 565 80 q 606 73 591 73 l 664 73 l 664 0 l 185 0 l 185 73 l 243 73 q 272 76 259 73 q 294 89 285 80 q 309 116 304 99 q 315 164 315 134 l 315 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 830 992 l 837 723 l 744 723 l 733 809 q 724 850 731 832 q 705 881 718 868 q 670 900 691 893 q 618 907 649 907 l 536 907 l 536 568 "},"ű":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 233 842 l 233 860 q 263 908 247 882 q 295 961 279 934 q 325 1014 311 988 q 350 1064 340 1040 l 528 1064 l 528 1049 q 507 1021 520 1037 q 477 985 494 1004 q 440 946 460 966 q 401 907 421 926 q 363 871 382 888 q 329 842 344 854 l 233 842 m 497 842 l 497 860 q 527 908 511 882 q 559 961 543 934 q 589 1014 575 988 q 614 1064 603 1040 l 791 1064 l 791 1049 q 770 1021 783 1037 q 740 985 757 1004 q 704 946 723 966 q 665 907 684 926 q 626 871 645 888 q 592 842 608 854 l 497 842 "},"Ǽ":{"x_min":-0.390625,"x_max":1335,"ha":1380,"o":"m 861 84 l 1138 84 q 1174 92 1159 84 q 1200 114 1189 100 q 1217 148 1211 128 q 1227 190 1224 167 l 1239 256 l 1335 256 l 1325 0 l 511 0 l 511 73 l 569 73 q 623 97 607 73 q 640 156 640 120 l 640 318 l 320 318 l 262 201 q 245 160 250 180 q 239 128 239 140 q 261 86 239 99 q 323 73 282 73 l 346 73 l 346 0 l 0 0 l 0 73 l 16 73 q 81 100 52 73 q 140 181 109 126 l 530 911 l 438 918 l 438 992 l 1282 992 l 1288 736 l 1191 736 l 1184 801 q 1158 880 1178 852 q 1095 907 1137 907 l 861 907 l 861 560 l 1190 560 l 1190 476 l 861 476 l 861 84 m 626 907 l 365 402 l 640 402 l 640 907 l 626 907 m 757 1089 q 790 1134 771 1108 q 827 1187 808 1160 q 863 1242 846 1215 q 890 1293 879 1269 l 1109 1293 l 1109 1278 q 1066 1233 1096 1260 q 999 1175 1036 1205 q 923 1118 962 1146 q 851 1071 883 1089 l 757 1071 l 757 1089 "},"φ":{"x_min":65,"x_max":964,"ha":1030,"o":"m 964 373 q 863 91 964 187 q 556 -12 762 -3 l 556 -334 l 473 -334 l 473 -12 q 298 17 374 -7 q 170 91 222 43 q 91 210 118 139 q 65 373 65 280 q 165 653 65 558 q 473 757 266 748 l 473 1055 l 556 1055 l 556 757 q 729 727 654 752 q 857 653 805 701 q 936 536 909 606 q 964 373 964 466 m 283 373 q 292 248 283 302 q 323 157 301 194 q 381 100 345 120 q 473 74 418 79 l 473 669 q 381 644 418 664 q 323 587 345 624 q 292 498 301 551 q 283 373 283 445 m 746 373 q 737 497 746 444 q 705 586 727 550 q 647 643 683 622 q 556 668 610 663 l 556 74 q 647 100 611 79 q 706 157 684 120 q 737 248 727 194 q 746 373 746 302 "},";":{"x_min":61.96875,"x_max":325,"ha":408,"o":"m 311 58 q 297 -27 311 14 q 254 -104 283 -68 q 176 -167 224 -139 q 61 -214 129 -195 l 61 -142 q 115 -120 92 -131 q 153 -96 138 -109 q 176 -69 168 -84 q 184 -33 184 -53 q 176 -12 184 -20 q 158 3 169 -3 q 133 19 146 11 q 109 39 120 26 q 90 69 97 51 q 83 115 83 87 q 111 186 83 162 q 182 211 140 211 q 276 170 241 211 q 311 58 311 129 m 97 646 q 105 699 97 677 q 129 733 114 720 q 166 751 145 746 q 211 757 187 757 q 254 751 234 757 q 291 733 275 746 q 315 699 306 720 q 325 646 325 677 q 315 593 325 614 q 291 559 306 572 q 254 540 275 546 q 211 535 234 535 q 166 540 187 535 q 129 559 145 546 q 105 593 114 572 q 97 646 97 614 "},"Ș":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 m 272 -289 q 286 -242 278 -268 q 302 -189 294 -216 q 316 -134 309 -161 q 326 -85 322 -108 l 488 -85 l 488 -98 q 463 -147 478 -120 q 429 -202 447 -174 q 392 -257 411 -230 q 355 -307 373 -285 l 272 -307 l 272 -289 "},"Ġ":{"x_min":77,"x_max":1029.375,"ha":1068,"o":"m 587 -14 q 362 22 458 -14 q 203 126 266 59 q 108 288 139 193 q 77 497 77 382 q 110 703 77 609 q 208 864 143 796 q 370 968 273 931 q 594 1006 467 1006 q 746 993 681 1006 q 854 959 811 980 q 920 908 898 937 q 941 844 941 878 q 930 798 941 820 q 895 761 918 777 q 839 735 872 744 q 762 726 806 726 q 751 803 762 768 q 720 864 741 839 q 666 903 699 889 q 590 917 634 917 q 461 889 514 917 q 374 807 407 861 q 325 675 340 754 q 310 497 310 597 q 326 318 310 396 q 377 188 342 241 q 469 107 413 135 q 608 80 526 80 q 659 82 634 80 q 709 89 685 84 l 709 293 q 684 371 709 349 q 610 392 659 392 l 592 392 l 592 466 l 1029 466 l 1029 392 l 1011 392 q 974 387 990 392 q 948 370 958 382 q 933 338 938 358 q 929 288 929 318 l 929 60 q 764 4 847 23 q 587 -14 682 -14 m 449 1198 q 458 1243 449 1224 q 483 1274 467 1262 q 520 1292 499 1286 q 567 1298 541 1298 q 612 1292 590 1298 q 650 1274 634 1286 q 676 1243 666 1262 q 686 1198 686 1224 q 676 1153 686 1172 q 650 1122 666 1134 q 612 1104 634 1110 q 567 1098 590 1098 q 520 1104 541 1098 q 483 1122 499 1110 q 458 1153 467 1134 q 449 1198 449 1172 "},"6":{"x_min":62,"x_max":728,"ha":777,"o":"m 445 923 q 371 899 404 923 q 314 828 338 875 q 276 712 290 781 q 258 556 262 644 q 290 575 272 565 q 332 591 308 584 q 385 603 355 599 q 450 608 414 608 q 564 588 513 608 q 652 531 615 568 q 708 441 688 494 q 728 320 728 388 q 707 184 728 245 q 646 78 687 123 q 546 10 606 34 q 406 -14 486 -14 q 266 14 329 -14 q 157 100 202 42 q 87 247 112 159 q 62 458 62 336 q 86 672 62 573 q 159 846 110 772 q 283 963 208 920 q 458 1006 357 1006 q 572 993 525 1006 q 648 958 619 980 q 690 910 677 937 q 704 852 704 882 q 695 812 704 831 q 666 777 686 792 q 615 753 647 762 q 537 744 583 744 q 533 807 537 776 q 519 865 529 839 q 491 907 509 891 q 445 923 473 923 m 398 523 q 358 517 379 523 q 318 502 337 511 q 282 480 298 492 q 258 456 266 468 q 270 285 258 357 q 303 167 282 213 q 351 99 323 120 q 410 77 379 77 q 495 132 464 77 q 526 306 526 186 q 492 471 526 419 q 398 523 458 523 "},"n":{"x_min":27.78125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 580 q 131 627 139 610 q 111 655 124 645 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 418 730 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 "},"ά":{"x_min":65,"x_max":887.46875,"ha":901,"o":"m 770 0 q 683 9 719 0 q 623 35 647 19 q 586 69 599 50 q 568 108 573 89 l 559 108 q 523 59 543 81 q 478 20 504 36 q 420 -4 452 4 q 347 -14 387 -14 q 226 8 279 -14 q 137 78 173 31 q 83 198 102 125 q 65 370 65 270 q 87 544 65 471 q 149 665 109 617 q 246 735 189 712 q 372 758 302 758 q 446 747 413 758 q 505 717 479 736 q 550 673 531 698 q 582 620 569 648 l 595 620 q 622 682 607 652 q 665 745 637 712 l 798 745 q 785 692 792 725 q 773 621 778 660 q 765 542 768 583 q 762 464 762 501 l 762 194 q 791 103 762 133 q 875 73 821 73 l 887 73 l 887 0 l 770 0 m 408 89 q 476 115 449 89 q 520 187 504 142 q 544 294 537 232 q 551 427 551 356 l 551 479 q 530 560 543 526 q 500 616 517 594 q 462 648 483 637 q 418 658 441 658 q 312 586 345 658 q 279 370 279 513 q 308 159 279 228 q 408 89 338 89 m 368 860 q 382 907 374 881 q 397 960 389 932 q 411 1014 404 987 q 421 1064 417 1041 l 611 1064 l 611 1050 q 584 1001 601 1028 q 548 947 568 974 q 506 892 528 919 q 464 842 484 865 l 368 842 l 368 860 "},"ϊ":{"x_min":41,"x_max":533,"ha":546,"o":"m 339 745 l 339 227 q 361 128 339 159 q 432 97 383 97 q 484 100 457 97 q 533 108 511 104 l 533 15 q 507 6 524 11 q 468 -3 490 0 q 417 -10 445 -7 q 359 -14 389 -14 q 262 -2 305 -14 q 190 33 219 8 q 144 100 160 58 q 129 201 129 141 l 129 745 l 339 745 m 41 955 q 47 995 41 978 q 65 1022 54 1011 q 91 1036 76 1032 q 122 1041 106 1041 q 153 1036 139 1041 q 180 1022 168 1032 q 198 995 191 1011 q 206 955 206 978 q 198 915 206 931 q 180 888 191 898 q 153 873 168 878 q 122 869 139 869 q 91 873 106 869 q 65 888 76 878 q 47 915 54 898 q 41 955 41 931 m 326 955 q 332 995 326 978 q 351 1022 339 1011 q 377 1036 362 1032 q 409 1041 392 1041 q 439 1036 424 1041 q 465 1022 453 1032 q 483 995 476 1011 q 491 955 491 978 q 483 915 491 931 q 465 888 476 898 q 439 873 453 878 q 409 869 424 869 q 377 873 392 869 q 351 888 362 878 q 332 915 339 898 q 326 955 326 931 "},"﻿":{"x_min":0,"x_max":0,"ha":0},"ģ":{"x_min":3,"x_max":772,"ha":778,"o":"m 772 717 q 767 687 772 702 q 751 662 762 672 q 720 644 740 651 q 672 638 701 638 q 668 663 672 652 q 656 681 664 674 q 639 693 649 689 q 619 696 630 696 q 594 692 608 696 q 574 681 581 687 q 600 646 588 666 q 622 603 612 626 q 636 555 631 580 q 642 504 642 530 q 625 408 642 452 q 574 331 608 363 q 486 280 539 298 q 361 262 433 262 q 342 262 353 262 q 319 263 330 262 q 297 264 307 263 q 281 266 286 265 q 263 254 272 261 q 246 238 253 247 q 235 218 239 229 q 230 195 230 207 q 248 161 230 172 q 295 151 266 151 l 464 151 q 583 136 533 151 q 666 94 633 121 q 715 27 699 67 q 731 -61 731 -11 q 706 -176 731 -125 q 632 -261 682 -226 q 506 -315 582 -296 q 327 -334 431 -334 q 83 -284 163 -334 q 3 -140 3 -235 q 51 -26 3 -66 q 190 20 99 13 q 153 39 171 28 q 120 65 135 49 q 97 100 106 80 q 89 144 89 119 q 98 186 89 167 q 123 224 107 206 q 162 258 139 242 q 212 289 185 274 q 156 320 182 300 q 111 366 130 339 q 81 428 92 393 q 71 504 71 462 q 141 694 71 627 q 361 762 212 762 q 453 749 410 762 q 526 719 495 736 q 552 745 538 731 q 583 770 566 759 q 623 789 601 782 q 671 797 644 797 q 715 790 696 797 q 746 773 733 784 q 765 748 759 762 q 772 717 772 733 m 167 -137 q 208 -223 167 -195 q 330 -250 250 -250 q 508 -215 452 -250 q 564 -111 564 -180 q 536 -49 564 -67 q 452 -32 508 -32 l 290 -32 q 247 -35 269 -32 q 208 -51 226 -39 q 178 -83 190 -62 q 167 -137 167 -104 m 260 504 q 265 438 260 468 q 281 388 270 409 q 311 355 293 367 q 357 344 330 344 q 403 355 384 344 q 432 387 421 366 q 447 439 443 409 q 452 506 452 469 q 447 577 452 545 q 431 631 442 608 q 401 666 420 653 q 355 678 383 678 q 310 665 328 678 q 280 629 292 652 q 264 574 269 606 q 260 504 260 542 m 502 1045 q 487 999 495 1024 q 472 945 479 973 q 458 891 464 918 q 447 842 451 865 l 287 842 l 287 856 q 311 904 296 877 q 344 959 327 932 q 382 1014 362 987 q 418 1064 401 1041 l 502 1064 l 502 1045 "},"∂":{"x_min":65,"x_max":724,"ha":789,"o":"m 469 914 q 407 899 434 914 q 362 860 380 883 q 335 807 344 836 q 325 751 325 778 q 254 760 283 751 q 206 782 224 768 q 180 815 188 797 q 172 854 172 834 q 186 915 172 887 q 229 963 201 943 q 298 994 257 983 q 391 1006 339 1006 q 536 979 474 1006 q 640 901 599 952 q 703 778 682 851 q 724 612 724 705 q 722 558 724 590 q 716 487 721 526 q 701 402 711 448 q 675 308 691 357 q 619 180 652 239 q 540 78 585 121 q 437 10 494 35 q 311 -14 380 -14 q 195 6 242 -14 q 119 62 148 27 q 77 141 90 96 q 65 235 65 186 q 74 319 65 273 q 102 410 83 364 q 152 498 122 455 q 225 574 183 541 q 322 626 267 606 q 447 647 377 647 q 559 622 515 647 q 628 551 603 598 l 635 551 q 637 566 636 558 q 639 584 638 575 q 640 601 639 593 q 640 616 640 610 q 629 735 640 680 q 597 829 618 789 q 543 892 576 869 q 469 914 511 914 m 390 80 q 463 109 427 80 q 529 186 499 137 q 582 299 559 235 q 615 432 605 362 q 599 480 609 457 q 575 521 589 503 q 541 548 560 538 q 495 559 521 559 q 428 543 458 559 q 374 500 398 526 q 333 438 351 473 q 305 366 316 403 q 288 292 294 329 q 283 224 283 256 q 311 118 283 157 q 390 80 339 80 "},"κ":{"x_min":23.703125,"x_max":884,"ha":891,"o":"m 451 490 q 536 604 497 556 q 610 685 574 653 q 681 734 645 718 q 757 750 716 750 q 833 726 807 750 q 858 659 858 702 q 857 641 858 651 q 854 622 856 631 q 849 603 852 612 q 844 589 847 595 q 814 608 834 600 q 759 616 793 616 q 722 613 741 616 q 683 600 703 610 q 640 573 662 591 q 592 526 617 556 l 540 462 l 734 181 q 879 73 812 73 l 884 73 l 884 0 l 864 0 q 736 3 788 0 q 647 18 684 6 q 583 55 610 30 q 529 123 555 80 l 419 301 l 349 245 l 349 0 l 139 0 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 498 q 348 452 349 480 q 346 399 347 425 q 343 337 344 369 l 451 490 "},"‡":{"x_min":48.875,"x_max":615.40625,"ha":664,"o":"m 368 151 l 615 190 l 615 29 l 368 64 l 421 -154 l 245 -154 l 295 64 l 48 29 l 48 190 l 295 151 l 232 308 q 263 336 248 317 q 288 381 276 353 q 305 454 300 409 q 288 526 300 499 q 263 568 276 553 q 232 592 248 586 l 295 749 l 48 711 l 48 872 l 295 836 l 245 1055 l 421 1055 l 368 836 l 615 872 l 615 711 l 368 749 l 435 592 q 402 566 417 584 q 377 524 389 551 q 358 452 364 497 q 377 377 364 406 q 402 334 389 349 q 435 308 417 316 l 368 151 "},"ň":{"x_min":27.78125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 80 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 580 q 131 627 139 610 q 111 655 124 645 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 326 745 l 344 645 l 351 645 q 395 707 372 684 q 445 743 418 730 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 m 220 1064 l 316 1064 q 349 1036 330 1052 q 389 1004 369 1021 q 430 970 410 986 q 466 938 450 953 q 501 970 481 953 q 542 1004 521 986 q 583 1036 563 1021 q 617 1064 603 1052 l 713 1064 l 713 1045 q 675 1000 696 1026 q 631 947 653 974 q 590 892 609 919 q 560 842 571 865 l 373 842 q 343 892 362 865 q 302 947 323 919 q 258 1000 280 974 q 220 1045 236 1026 l 220 1064 "},"√":{"x_min":42.421875,"x_max":792,"ha":726,"o":"m 445 -10 l 349 -10 l 155 534 l 42 534 l 42 618 l 247 618 l 405 164 l 700 1135 l 792 1135 l 445 -10 "},"ę":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 344 -159 q 357 -97 344 -126 q 394 -44 371 -68 q 446 -3 417 -20 q 508 21 476 13 l 615 21 q 570 0 593 14 q 528 -32 547 -12 q 497 -79 510 -53 q 485 -139 485 -106 q 492 -172 485 -158 q 512 -194 499 -186 q 543 -208 525 -203 q 581 -212 560 -212 q 621 -209 600 -212 q 669 -201 643 -207 l 669 -290 q 642 -300 658 -296 q 609 -306 626 -304 q 577 -311 593 -309 q 550 -313 561 -313 q 396 -276 449 -313 q 344 -159 344 -239 "},"į":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 119 970 q 128 1015 119 996 q 153 1046 137 1034 q 190 1064 169 1058 q 237 1070 212 1070 q 282 1064 261 1070 q 320 1046 304 1058 q 346 1015 337 1034 q 356 970 356 996 q 346 925 356 944 q 320 894 337 906 q 282 876 304 882 q 237 870 261 870 q 190 876 212 870 q 153 894 169 882 q 128 925 137 906 q 119 970 119 944 m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 98 -180 q 111 -118 98 -147 q 148 -65 125 -89 q 200 -24 171 -41 q 262 0 230 -7 l 369 0 q 324 -20 347 -6 q 282 -53 301 -33 q 251 -100 264 -74 q 239 -160 239 -127 q 246 -193 239 -179 q 266 -215 253 -207 q 297 -229 279 -224 q 335 -233 314 -233 q 375 -230 354 -233 q 423 -222 397 -228 l 423 -311 q 396 -321 412 -317 q 363 -327 380 -325 q 331 -332 347 -330 q 304 -334 315 -334 q 150 -297 203 -334 q 98 -180 98 -260 "},"Τ":{"x_min":13,"x_max":893,"ha":907,"o":"m 563 164 q 568 116 563 134 q 584 89 574 99 q 606 76 593 80 q 634 73 619 73 l 692 73 l 692 0 l 213 0 l 213 73 l 271 73 q 300 76 287 73 q 322 89 313 80 q 337 116 332 99 q 343 164 343 134 l 343 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 886 992 l 893 723 l 800 723 l 789 809 q 780 850 787 832 q 761 881 774 868 q 726 900 747 893 q 674 907 705 907 l 563 907 l 563 164 "},"≈":{"x_min":77,"x_max":702,"ha":779,"o":"m 366 333 q 322 351 341 344 q 288 362 303 358 q 259 368 273 367 q 230 370 245 370 q 191 364 211 370 q 151 346 171 357 q 112 321 131 336 q 77 288 93 306 l 77 395 q 244 469 144 469 q 280 467 263 469 q 316 461 297 465 q 357 448 334 456 q 412 426 380 439 q 456 408 437 415 q 490 396 475 400 q 520 390 506 391 q 548 388 534 388 q 587 394 567 388 q 627 412 607 401 q 666 438 647 423 q 702 470 685 453 l 702 363 q 534 290 635 290 q 497 291 514 290 q 462 298 481 293 q 421 311 444 302 q 366 333 398 319 m 366 565 q 322 583 341 576 q 288 594 303 590 q 259 600 273 599 q 230 602 245 602 q 191 596 211 602 q 151 578 171 589 q 112 553 131 568 q 77 520 93 538 l 77 627 q 244 701 144 701 q 280 699 263 701 q 316 693 297 697 q 357 680 334 688 q 412 658 380 671 q 456 640 437 647 q 490 628 475 632 q 520 622 506 623 q 548 620 534 620 q 587 626 567 620 q 627 644 607 633 q 666 670 647 655 q 702 702 685 685 l 702 595 q 534 522 635 522 q 497 523 514 522 q 462 530 481 525 q 421 543 444 534 q 366 565 398 551 "},"ΐ":{"x_min":14,"x_max":533,"ha":546,"o":"m 339 745 l 339 227 q 361 128 339 159 q 432 97 383 97 q 484 100 457 97 q 533 108 511 104 l 533 15 q 507 6 524 11 q 468 -3 490 0 q 417 -10 445 -7 q 359 -14 389 -14 q 262 -2 305 -14 q 190 33 219 8 q 144 100 160 58 q 129 201 129 141 l 129 745 l 339 745 m 202 973 q 216 1019 208 994 q 232 1073 224 1045 q 246 1127 239 1100 q 256 1177 252 1153 l 418 1177 l 418 1162 q 393 1114 408 1141 q 359 1059 377 1087 q 322 1004 341 1031 q 285 955 303 977 l 202 955 l 202 973 m 14 955 q 20 995 14 978 q 38 1022 27 1011 q 64 1036 49 1032 q 95 1041 79 1041 q 126 1036 112 1041 q 153 1022 141 1032 q 171 995 164 1011 q 179 955 179 978 q 171 915 179 931 q 153 888 164 898 q 126 873 141 878 q 95 869 112 869 q 64 873 79 869 q 38 888 49 878 q 20 915 27 898 q 14 955 14 931 m 354 955 q 360 995 354 978 q 379 1022 367 1011 q 405 1036 390 1032 q 437 1041 420 1041 q 467 1036 453 1041 q 493 1022 482 1032 q 512 995 505 1011 q 519 955 519 978 q 512 915 519 931 q 493 888 505 898 q 467 873 482 878 q 437 869 453 869 q 405 873 420 869 q 379 888 390 878 q 360 915 367 898 q 354 955 354 931 "},"ĸ":{"x_min":23.703125,"x_max":884,"ha":884,"o":"m 884 0 l 864 0 q 736 3 788 0 q 647 18 685 6 q 583 55 610 31 q 529 123 556 80 l 405 318 l 349 276 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 519 q 348 475 349 500 q 346 428 347 451 q 343 375 344 402 l 518 571 q 548 612 541 597 q 555 637 555 627 q 536 665 555 655 q 483 675 518 675 l 483 745 l 833 745 l 833 675 q 739 646 785 675 q 637 557 692 618 l 550 457 l 734 181 q 808 100 771 126 q 879 73 846 73 l 884 73 l 884 0 "},"g":{"x_min":3,"x_max":772,"ha":778,"o":"m 772 717 q 767 687 772 702 q 751 662 762 672 q 720 644 740 651 q 672 638 701 638 q 668 663 672 652 q 656 681 664 674 q 639 693 649 689 q 619 696 630 696 q 594 692 608 696 q 574 681 581 687 q 600 646 588 666 q 622 603 612 626 q 636 555 631 580 q 642 504 642 530 q 625 408 642 452 q 574 331 608 363 q 486 280 539 298 q 361 262 433 262 q 342 262 353 262 q 319 263 330 262 q 297 264 307 263 q 281 266 286 265 q 263 254 272 261 q 246 238 253 247 q 235 218 239 229 q 230 195 230 207 q 248 161 230 172 q 295 151 266 151 l 464 151 q 583 136 533 151 q 666 94 633 121 q 715 27 699 67 q 731 -61 731 -11 q 706 -176 731 -125 q 632 -261 682 -226 q 506 -315 582 -296 q 327 -334 431 -334 q 83 -284 163 -334 q 3 -140 3 -235 q 51 -26 3 -66 q 190 20 99 13 q 153 39 171 28 q 120 65 135 49 q 97 100 106 80 q 89 144 89 119 q 98 186 89 167 q 123 224 107 206 q 162 258 139 242 q 212 289 185 274 q 156 320 182 300 q 111 366 130 339 q 81 428 92 393 q 71 504 71 462 q 141 694 71 627 q 361 762 212 762 q 453 749 410 762 q 526 719 495 736 q 552 745 538 731 q 583 770 566 759 q 623 789 601 782 q 671 797 644 797 q 715 790 696 797 q 746 773 733 784 q 765 748 759 762 q 772 717 772 733 m 167 -137 q 208 -223 167 -195 q 330 -250 250 -250 q 508 -215 452 -250 q 564 -111 564 -180 q 536 -49 564 -67 q 452 -32 508 -32 l 290 -32 q 247 -35 269 -32 q 208 -51 226 -39 q 178 -83 190 -62 q 167 -137 167 -104 m 260 504 q 265 438 260 468 q 281 388 270 409 q 311 355 293 367 q 357 344 330 344 q 403 355 384 344 q 432 387 421 366 q 447 439 443 409 q 452 506 452 469 q 447 577 452 545 q 431 631 442 608 q 401 666 420 653 q 355 678 383 678 q 310 665 328 678 q 280 629 292 652 q 264 574 269 606 q 260 504 260 542 "},"ǿ":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 259 15 330 -14 l 214 -56 l 116 -56 l 185 57 q 96 184 127 106 q 65 374 65 263 q 156 666 65 570 q 427 762 248 762 q 520 753 476 762 q 600 728 563 745 l 644 800 l 741 800 l 670 683 q 756 558 726 634 q 786 374 786 482 m 280 374 q 282 294 280 331 q 290 227 284 258 l 528 614 q 425 673 493 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 571 374 q 568 445 571 412 q 562 508 566 478 l 326 124 q 426 73 360 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 m 342 860 q 375 905 356 879 q 412 958 393 931 q 448 1013 431 986 q 475 1064 464 1040 l 694 1064 l 694 1049 q 651 1004 681 1031 q 584 946 621 976 q 508 889 547 917 q 436 842 468 860 l 342 842 l 342 860 "},"²":{"x_min":52,"x_max":498,"ha":555,"o":"m 473 857 q 464 799 473 826 q 433 742 456 772 q 372 677 411 712 q 273 594 333 642 l 160 504 l 381 504 q 423 518 411 504 q 439 550 435 531 l 446 588 l 498 588 l 492 397 l 52 397 l 52 496 l 204 625 q 263 683 239 654 q 300 738 286 711 q 319 792 313 765 q 324 848 324 820 q 309 918 324 893 q 259 943 295 943 q 222 931 236 943 q 200 898 207 918 q 190 854 192 879 q 187 805 187 829 q 142 810 164 805 q 102 825 119 815 q 73 851 84 835 q 62 889 62 866 q 75 935 62 914 q 113 972 88 957 q 175 997 138 988 q 259 1006 212 1006 q 356 995 315 1006 q 422 965 396 984 q 460 918 448 946 q 473 857 473 891 "},"Ã":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 639 1203 q 666 1209 654 1203 q 687 1225 678 1215 q 700 1249 695 1235 q 707 1276 705 1262 l 798 1276 q 782 1197 795 1234 q 746 1131 768 1159 q 692 1087 723 1103 q 624 1071 661 1071 q 556 1084 587 1071 q 500 1114 526 1098 q 451 1145 474 1131 q 406 1158 429 1158 q 379 1152 391 1158 q 358 1136 367 1146 q 345 1112 350 1126 q 338 1085 340 1099 l 248 1085 q 263 1164 250 1127 q 300 1230 277 1202 q 354 1274 323 1258 q 422 1291 385 1291 q 490 1277 460 1291 q 546 1247 520 1263 q 595 1216 572 1230 q 639 1203 618 1203 "},"Ј":{"x_min":-54.078125,"x_max":495.96875,"ha":511,"o":"m 495 918 l 437 918 q 409 915 422 918 q 386 903 396 912 q 371 876 377 893 q 365 828 365 858 l 365 -2 q 351 -114 365 -65 q 312 -200 337 -163 q 252 -263 287 -237 q 176 -304 217 -288 q 89 -326 135 -319 q -3 -334 43 -334 l -54 -334 l -54 -253 l -28 -253 q 35 -240 4 -253 q 91 -199 67 -228 q 131 -121 116 -169 q 146 -4 146 -74 l 146 833 q 140 878 146 861 q 125 903 135 895 q 102 915 115 912 q 75 918 89 918 l 17 918 l 17 992 l 495 992 l 495 918 "},"©":{"x_min":77,"x_max":1097,"ha":1174,"o":"m 77 495 q 95 631 77 566 q 146 753 113 696 q 225 857 179 810 q 328 937 272 903 q 450 988 385 970 q 585 1007 515 1007 q 721 988 656 1007 q 843 937 787 970 q 947 857 900 903 q 1027 753 993 810 q 1078 631 1060 696 q 1097 495 1097 566 q 1078 359 1097 424 q 1027 238 1060 294 q 947 134 993 181 q 843 55 900 88 q 721 3 787 21 q 585 -14 656 -14 q 450 3 515 -14 q 328 55 385 21 q 225 134 272 88 q 146 238 179 181 q 95 359 113 294 q 77 495 77 424 m 152 495 q 168 380 152 435 q 212 277 184 325 q 280 189 240 228 q 367 121 319 149 q 471 77 415 93 q 585 61 526 61 q 701 77 646 61 q 805 121 757 93 q 893 189 853 149 q 961 277 932 228 q 1004 380 989 325 q 1020 495 1020 435 q 1004 610 1020 555 q 961 714 989 666 q 893 803 932 763 q 805 871 853 842 q 701 914 757 899 q 585 930 646 930 q 471 914 526 930 q 367 871 415 899 q 280 803 319 842 q 212 714 240 763 q 168 611 184 666 q 152 495 152 555 m 611 247 q 670 255 643 247 q 719 277 697 263 q 756 307 740 290 q 782 341 772 324 q 795 324 790 335 q 801 298 801 313 q 788 259 801 279 q 749 223 775 239 q 684 197 723 207 q 593 187 645 187 q 472 209 523 187 q 385 272 420 231 q 333 370 350 313 q 316 496 316 427 q 334 620 316 564 q 391 717 353 677 q 484 781 429 758 q 612 804 539 804 q 696 796 660 804 q 755 775 731 788 q 791 743 779 761 q 803 704 803 726 q 795 677 803 690 q 775 657 788 665 q 745 644 762 648 q 708 639 727 639 q 702 678 708 659 q 686 712 697 696 q 656 736 674 727 q 609 745 637 745 q 527 729 561 745 q 471 681 492 713 q 439 603 449 649 q 429 496 429 557 q 476 312 429 376 q 611 247 523 247 "},"≥":{"x_min":90,"x_max":687,"ha":777,"o":"m 687 0 l 90 0 l 90 98 l 687 98 l 687 0 m 90 145 l 90 254 l 538 496 l 90 740 l 90 850 l 687 525 l 687 468 l 90 145 "},"Ă":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 528 1071 q 432 1090 473 1071 q 363 1140 391 1109 q 321 1210 335 1171 q 306 1289 307 1249 l 397 1289 q 443 1216 409 1238 q 528 1194 476 1194 q 613 1216 579 1194 q 658 1289 647 1238 l 751 1289 q 735 1210 749 1249 q 693 1140 721 1171 q 624 1090 665 1109 q 528 1071 583 1071 "},"ґ":{"x_min":23.703125,"x_max":608,"ha":636,"o":"m 349 652 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 472 73 l 472 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 414 745 q 455 750 439 745 q 483 768 472 755 q 501 803 495 781 q 512 857 508 825 l 519 931 l 608 931 l 608 652 l 349 652 "},"ÿ":{"x_min":-0.265625,"x_max":804.234375,"ha":804,"o":"m 804 745 l 804 671 q 767 666 783 671 q 738 649 751 661 q 714 618 725 637 q 693 569 703 599 q 642 428 668 500 q 588 284 615 356 q 535 140 562 212 q 483 0 508 69 q 437 -118 458 -67 q 391 -206 415 -169 q 338 -268 367 -243 q 270 -307 309 -292 q 180 -327 231 -321 q 60 -334 129 -334 l 37 -334 l 37 -253 q 160 -235 109 -253 q 246 -185 211 -217 q 304 -107 281 -152 q 344 -6 327 -61 l 94 604 q 75 635 85 624 q 53 653 65 647 q 28 661 42 659 q 0 662 15 662 l 0 745 l 395 745 l 395 671 q 331 660 355 671 q 308 619 308 650 q 313 592 308 607 q 321 565 317 576 q 347 502 334 536 q 373 433 360 468 q 397 367 385 399 q 417 311 408 335 q 434 263 427 284 q 445 224 441 242 q 452 192 450 207 q 456 164 455 178 q 462 195 458 178 q 471 228 466 212 q 480 257 475 244 q 487 275 485 270 l 579 547 q 584 563 581 554 q 588 582 586 572 q 591 600 590 591 q 592 615 592 609 q 566 659 592 647 q 491 671 539 671 l 491 745 l 804 745 m 181 955 q 187 995 181 978 q 205 1022 194 1011 q 231 1036 216 1032 q 262 1041 246 1041 q 293 1036 279 1041 q 320 1022 308 1032 q 338 995 331 1011 q 346 955 346 978 q 338 915 346 931 q 320 888 331 898 q 293 873 308 878 q 262 869 279 869 q 231 873 246 869 q 205 888 216 878 q 187 915 194 898 q 181 955 181 931 m 466 955 q 472 995 466 978 q 491 1022 479 1011 q 517 1036 502 1032 q 549 1041 532 1041 q 579 1036 564 1041 q 605 1022 593 1032 q 623 995 616 1011 q 631 955 631 978 q 623 915 631 931 q 605 888 616 898 q 579 873 593 878 q 549 869 564 869 q 517 873 532 869 q 491 888 502 878 q 472 915 479 898 q 466 955 466 931 "},"Ł":{"x_min":38.453125,"x_max":863,"ha":908,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 383 l 52 318 l 52 412 l 168 479 l 168 828 q 162 875 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 432 915 445 918 q 410 903 420 912 q 395 878 401 895 q 388 833 389 861 l 388 607 l 588 724 l 588 627 l 388 510 l 388 84 l 647 84 q 723 115 696 84 q 762 205 750 146 l 785 310 l 863 310 l 852 0 l 38 0 "}," ":{"x_min":0,"x_max":0,"ha":423},"∫":{"x_min":0,"x_max":754,"ha":754,"o":"m 193 -334 q 105 -324 142 -334 q 45 -298 69 -315 q 11 -260 22 -282 q 0 -213 0 -238 q 7 -175 0 -193 q 31 -142 14 -156 q 79 -120 49 -128 q 152 -111 108 -111 q 155 -168 152 -142 q 166 -213 159 -194 q 184 -243 173 -232 q 212 -254 195 -254 q 261 -206 240 -254 q 283 -62 283 -159 q 279 41 283 -16 q 272 161 276 100 q 265 282 268 222 q 262 391 262 342 q 263 483 262 436 q 267 575 265 531 q 272 658 270 620 q 277 724 275 697 q 305 870 283 807 q 364 975 327 933 q 452 1039 401 1018 q 566 1061 502 1061 q 706 1029 659 1061 q 754 949 754 998 q 746 910 754 929 q 722 876 739 891 q 674 852 704 861 q 601 843 645 843 q 587 946 601 911 q 542 981 574 981 q 512 972 525 981 q 489 940 499 963 q 475 881 480 918 q 470 789 470 844 q 472 704 470 755 q 478 597 475 654 q 484 480 481 540 q 487 367 487 420 q 486 282 487 325 q 483 200 485 239 q 479 125 481 160 q 475 64 477 91 q 473 21 474 37 q 471 1 472 4 q 387 -247 457 -160 q 193 -334 318 -334 "},"\\":{"x_min":0,"x_max":400,"ha":400,"o":"m 0 1055 l 98 1055 l 400 -168 l 299 -168 l 0 1055 "},"Ì":{"x_min":33,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 291 1071 q 219 1118 259 1089 q 142 1175 179 1146 q 75 1233 105 1205 q 33 1278 45 1260 l 33 1293 l 250 1293 q 278 1242 261 1269 q 314 1187 295 1215 q 352 1134 332 1160 q 386 1089 371 1108 l 386 1071 l 291 1071 "},"ъ":{"x_min":28,"x_max":953,"ha":988,"o":"m 632 745 l 632 665 l 613 665 q 570 661 590 665 q 533 647 549 657 q 509 621 518 637 q 499 580 499 605 l 499 424 l 633 424 q 755 416 697 424 q 857 386 813 408 q 927 323 901 364 q 953 218 953 283 q 933 131 953 171 q 875 62 914 91 q 778 16 837 33 q 640 0 719 0 l 173 0 l 173 73 l 189 73 q 264 96 240 73 q 289 162 289 118 l 289 665 l 208 665 q 176 660 189 665 q 153 641 162 654 q 138 607 144 629 q 129 553 133 585 l 123 508 l 28 508 l 36 745 l 632 745 m 604 80 q 663 88 638 80 q 702 112 687 96 q 724 156 717 129 q 731 222 731 183 q 697 315 731 288 q 598 343 662 343 l 499 343 l 499 80 l 604 80 "},"ς":{"x_min":65,"x_max":680,"ha":704,"o":"m 65 342 q 91 539 65 459 q 162 669 117 619 q 270 740 208 718 q 405 762 333 762 q 523 750 472 762 q 609 719 575 739 q 662 673 644 700 q 680 616 680 646 q 672 572 680 593 q 644 534 664 551 q 589 508 624 518 q 500 498 554 498 q 496 566 500 534 q 481 623 491 599 q 454 662 471 648 q 410 677 437 677 q 355 664 380 677 q 314 617 331 651 q 287 523 296 583 q 277 370 277 464 q 290 289 277 321 q 329 234 303 256 q 394 197 355 212 q 485 169 433 182 q 571 139 536 156 q 629 99 607 122 q 662 47 652 77 q 673 -19 673 18 q 657 -101 673 -60 q 607 -177 641 -141 q 521 -241 573 -213 q 394 -285 468 -270 l 394 -211 q 442 -189 423 -201 q 473 -162 462 -177 q 490 -130 485 -148 q 495 -93 495 -112 q 488 -52 495 -69 q 466 -24 482 -36 q 425 -4 451 -13 q 362 13 400 4 q 219 61 276 33 q 127 130 161 90 q 79 222 93 170 q 65 342 65 275 "},"Ē":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 659 1071 l 256 1071 l 256 1180 l 659 1180 l 659 1071 "},"!":{"x_min":144.875,"x_max":386.421875,"ha":530,"o":"m 144 992 l 386 992 l 305 317 l 226 317 l 144 992 m 153 99 q 161 152 153 131 q 185 187 170 174 q 222 205 201 200 q 267 211 243 211 q 310 205 290 211 q 347 187 331 200 q 371 152 362 174 q 381 99 381 131 q 371 47 381 68 q 347 13 362 26 q 310 -5 331 0 q 267 -11 290 -11 q 222 -5 243 -11 q 185 13 201 0 q 161 47 170 26 q 153 99 153 68 "},"ç":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 m 569 -175 q 554 -241 569 -211 q 514 -291 540 -270 q 452 -323 488 -312 q 372 -334 416 -334 q 345 -332 361 -334 q 313 -329 330 -331 q 280 -324 296 -327 q 251 -318 263 -321 l 251 -233 q 301 -241 276 -239 q 345 -244 326 -244 q 407 -230 385 -244 q 430 -180 430 -216 q 422 -147 430 -160 q 400 -126 415 -134 q 367 -115 386 -118 q 326 -110 348 -111 l 355 12 l 434 12 l 420 -47 q 481 -60 454 -50 q 528 -86 509 -70 q 558 -125 547 -102 q 569 -175 569 -148 "},"Й":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 749 685 l 387 220 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 339 l 749 805 l 749 828 q 743 876 749 858 q 728 903 738 893 q 705 915 718 912 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 903 999 912 q 974 876 979 893 q 969 828 969 858 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 685 m 564 1147 q 656 1181 624 1147 q 696 1288 688 1215 l 870 1288 q 852 1206 865 1245 q 806 1137 839 1167 q 716 1088 774 1106 q 564 1071 658 1071 q 413 1088 471 1071 q 322 1137 355 1106 q 276 1206 289 1167 q 259 1288 263 1245 l 432 1288 q 472 1181 440 1215 q 564 1147 505 1147 "},"Б":{"x_min":57.140625,"x_max":863,"ha":904,"o":"m 803 992 l 810 723 l 717 723 l 706 809 q 697 850 704 832 q 678 881 691 868 q 643 900 664 893 q 591 907 622 907 l 405 907 l 405 558 l 493 558 q 663 537 592 558 q 777 480 733 517 q 842 392 822 444 q 863 280 863 341 q 840 166 863 218 q 771 77 817 114 q 653 20 724 40 q 486 0 582 0 l 57 0 l 57 73 l 115 73 q 150 79 136 73 q 171 94 163 84 q 182 123 179 105 q 186 165 186 141 l 186 828 q 180 874 186 857 q 166 902 175 892 q 144 915 157 911 q 115 918 131 918 l 57 918 l 57 992 l 803 992 m 405 82 l 473 82 q 545 93 515 82 q 593 129 574 105 q 619 189 611 153 q 628 273 628 225 q 618 367 628 328 q 588 431 609 406 q 536 466 568 455 q 458 477 504 477 l 405 477 l 405 82 "},"đ":{"x_min":64,"x_max":881.71875,"ha":901,"o":"m 761 876 l 881 876 l 881 802 l 761 802 l 761 170 q 770 120 761 139 q 795 90 779 101 q 832 77 811 80 q 876 73 853 73 l 881 73 l 881 0 l 612 0 l 573 108 l 560 108 q 525 57 545 79 q 479 18 505 34 q 420 -5 453 2 q 347 -14 388 -14 q 226 7 279 -14 q 137 73 173 28 q 82 186 101 117 q 64 349 64 254 q 82 514 64 445 q 137 629 101 584 q 225 696 173 674 q 344 719 277 719 q 415 710 383 719 q 472 687 447 702 q 517 651 497 672 q 551 607 537 631 l 560 607 q 555 683 558 647 q 553 715 554 699 q 551 744 552 730 q 550 770 550 758 q 550 788 550 781 l 550 802 l 335 802 l 335 876 l 550 876 l 550 895 q 540 942 550 924 q 516 968 531 959 q 480 979 501 977 q 437 981 460 981 l 426 981 l 426 1055 l 761 1055 l 761 876 m 407 89 q 475 105 448 89 q 519 154 503 121 q 543 236 536 186 q 550 352 550 285 q 543 465 550 415 q 519 547 536 514 q 475 598 503 581 q 407 615 448 615 q 307 547 337 615 q 278 350 278 478 q 307 154 278 219 q 407 89 337 89 "},"ċ":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 m 284 969 q 293 1014 284 995 q 318 1045 302 1033 q 355 1063 334 1057 q 402 1069 376 1069 q 447 1063 425 1069 q 485 1045 469 1057 q 511 1014 501 1033 q 521 969 521 995 q 511 924 521 943 q 485 893 501 905 q 447 875 469 881 q 402 869 425 869 q 355 875 376 869 q 318 893 334 881 q 293 924 302 905 q 284 969 284 943 "},"Ā":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 723 1071 l 320 1071 l 320 1180 l 723 1180 l 723 1071 "},"Ẃ":{"x_min":0.34375,"x_max":1481.578125,"ha":1482,"o":"m 838 982 l 1030 451 q 1053 385 1042 419 q 1072 321 1063 352 q 1088 265 1081 290 q 1098 221 1095 239 q 1110 276 1103 246 q 1123 340 1116 307 q 1138 409 1130 374 q 1154 478 1145 445 l 1227 778 q 1231 797 1229 786 q 1236 818 1234 808 q 1239 838 1238 829 q 1240 852 1240 847 q 1218 903 1240 888 q 1151 918 1197 918 l 1119 918 l 1119 992 l 1481 992 l 1481 918 l 1455 918 q 1419 914 1434 918 q 1391 898 1403 910 q 1369 865 1379 886 q 1350 810 1359 844 l 1134 0 l 976 0 l 743 652 l 543 0 l 371 0 l 117 844 q 102 880 110 866 q 81 903 93 895 q 54 915 69 911 q 18 918 39 918 l 0 918 l 0 992 l 464 992 l 464 918 l 432 918 q 369 902 390 918 q 348 851 348 886 q 353 817 348 840 q 363 776 357 795 l 455 455 q 471 398 463 429 q 487 336 480 367 q 501 275 495 304 q 510 223 507 246 q 530 307 519 268 q 554 387 542 346 l 737 982 l 838 982 m 684 1089 q 717 1134 698 1108 q 754 1187 735 1160 q 790 1242 773 1215 q 817 1293 806 1269 l 1036 1293 l 1036 1278 q 993 1233 1023 1260 q 926 1175 963 1205 q 850 1118 889 1146 q 778 1071 810 1089 l 684 1071 l 684 1089 "},"ø":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 259 15 330 -14 l 214 -56 l 116 -56 l 185 57 q 96 184 127 106 q 65 374 65 263 q 156 666 65 570 q 427 762 248 762 q 520 753 476 762 q 600 728 563 745 l 644 800 l 741 800 l 670 683 q 756 558 726 634 q 786 374 786 482 m 280 374 q 282 294 280 331 q 290 227 284 258 l 528 614 q 425 673 493 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 571 374 q 568 445 571 412 q 562 508 566 478 l 326 124 q 426 73 360 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 "},"â":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 173 860 q 211 905 189 879 q 255 958 233 931 q 296 1013 276 986 q 326 1064 315 1040 l 513 1064 q 543 1013 524 1040 q 584 958 562 986 q 628 905 606 931 q 666 860 649 879 l 666 842 l 570 842 q 536 869 556 853 q 495 901 516 884 q 454 935 474 918 q 419 966 434 952 q 383 935 403 952 q 342 901 363 918 q 302 869 322 884 q 269 842 283 853 l 173 842 l 173 860 "},"}":{"x_min":41.375,"x_max":572.421875,"ha":614,"o":"m 41 -174 l 41 -100 l 95 -100 q 144 -91 125 -100 q 174 -65 163 -82 q 190 -22 185 -47 q 194 35 194 3 l 194 273 q 230 377 194 336 q 347 437 267 417 l 347 449 q 230 507 266 467 q 194 611 194 548 l 194 846 q 190 904 194 879 q 174 947 185 930 q 144 972 163 964 q 95 981 125 981 l 41 981 l 41 1055 l 173 1055 q 350 1002 290 1055 q 411 852 411 949 l 411 613 q 423 550 411 575 q 457 511 436 525 q 509 491 479 497 q 572 485 538 486 l 572 400 q 509 393 538 398 q 457 373 479 387 q 423 334 436 358 q 411 269 411 309 l 411 31 q 395 -53 411 -15 q 350 -118 380 -91 q 276 -159 320 -145 q 173 -174 231 -174 l 41 -174 "},"Δ":{"x_min":68,"x_max":904,"ha":973,"o":"m 904 0 l 68 0 l 68 90 l 393 992 l 591 992 l 904 99 l 904 0 m 689 109 l 510 632 q 471 751 489 694 q 441 860 453 809 q 414 759 431 810 q 376 644 398 709 l 192 109 l 689 109 "},"‰":{"x_min":47,"x_max":1773,"ha":1820,"o":"m 547 698 q 531 572 547 629 q 484 474 515 515 q 406 411 454 433 q 296 389 359 389 q 183 411 230 389 q 105 474 135 433 q 61 572 75 515 q 47 698 47 629 q 61 825 47 768 q 106 922 75 881 q 184 984 136 962 q 298 1006 231 1006 q 407 984 360 1006 q 485 922 454 962 q 531 825 516 881 q 547 698 547 768 m 203 698 q 208 597 203 641 q 224 522 213 553 q 253 475 235 491 q 296 458 271 458 q 340 475 323 458 q 368 522 357 491 q 383 597 379 553 q 388 698 388 641 q 383 798 388 754 q 368 872 379 841 q 341 918 358 902 q 298 934 323 934 q 254 918 272 934 q 225 872 236 902 q 208 798 213 841 q 203 698 203 754 m 440 0 l 332 0 l 813 992 l 920 992 l 440 0 m 1211 295 q 1195 168 1211 225 q 1148 70 1179 111 q 1070 8 1118 30 q 960 -14 1023 -14 q 847 8 894 -14 q 769 70 799 30 q 725 168 739 111 q 711 295 711 225 q 725 422 711 365 q 770 519 739 478 q 848 581 800 559 q 962 603 895 603 q 1071 581 1024 603 q 1149 519 1118 559 q 1195 422 1180 478 q 1211 295 1211 365 m 867 295 q 872 194 867 238 q 888 118 877 149 q 917 71 899 87 q 960 55 935 55 q 1004 71 987 55 q 1032 118 1021 87 q 1047 194 1043 149 q 1052 295 1052 238 q 1047 394 1052 351 q 1032 469 1043 438 q 1005 515 1022 499 q 962 531 987 531 q 918 515 936 531 q 889 469 900 499 q 872 394 877 438 q 867 295 867 351 m 1773 295 q 1757 168 1773 225 q 1710 70 1741 111 q 1633 8 1680 30 q 1523 -14 1586 -14 q 1410 8 1457 -14 q 1332 70 1362 30 q 1287 168 1301 111 q 1273 295 1273 225 q 1287 422 1273 365 q 1332 519 1301 478 q 1410 581 1362 559 q 1524 603 1458 603 q 1633 581 1587 603 q 1711 519 1680 559 q 1757 422 1742 478 q 1773 295 1773 365 m 1429 295 q 1434 194 1429 238 q 1451 118 1439 149 q 1479 71 1462 87 q 1523 55 1497 55 q 1566 71 1549 55 q 1595 118 1584 87 q 1610 194 1606 149 q 1614 295 1614 238 q 1610 394 1614 351 q 1595 469 1606 438 q 1567 515 1584 499 q 1524 531 1550 531 q 1480 515 1498 531 q 1451 469 1462 499 q 1434 394 1439 438 q 1429 295 1429 351 "},"Ä":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 m 297 1184 q 303 1224 297 1207 q 321 1251 310 1240 q 347 1265 332 1261 q 378 1270 362 1270 q 409 1265 395 1270 q 436 1251 424 1261 q 454 1224 447 1240 q 462 1184 462 1207 q 454 1144 462 1160 q 436 1117 447 1127 q 409 1102 424 1107 q 378 1098 395 1098 q 347 1102 362 1098 q 321 1117 332 1107 q 303 1144 310 1127 q 297 1184 297 1160 m 582 1184 q 588 1224 582 1207 q 607 1251 595 1240 q 633 1265 618 1261 q 665 1270 648 1270 q 695 1265 680 1270 q 721 1251 709 1261 q 739 1224 732 1240 q 747 1184 747 1207 q 739 1144 747 1160 q 721 1117 732 1127 q 695 1102 709 1107 q 665 1098 680 1098 q 633 1102 648 1098 q 607 1117 618 1107 q 588 1144 595 1127 q 582 1184 582 1160 "},"ř":{"x_min":27.78125,"x_max":705,"ha":726,"o":"m 491 0 l 27 0 l 27 73 l 31 73 q 75 77 55 73 q 109 91 94 80 q 131 121 123 101 q 139 173 139 141 l 139 576 q 131 625 139 607 q 111 654 124 644 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 315 745 l 343 636 l 349 636 q 379 690 363 667 q 418 729 396 714 q 472 753 441 745 q 545 761 503 761 q 666 732 627 761 q 705 648 705 703 q 658 549 705 584 q 528 514 612 514 q 525 564 528 542 q 514 600 522 586 q 493 621 507 614 q 460 629 480 629 q 418 617 436 629 q 389 585 401 605 q 369 541 377 566 q 357 492 361 517 q 351 445 352 468 q 349 406 349 423 l 349 166 q 357 117 349 136 q 377 89 364 99 q 408 76 390 80 q 446 73 426 73 l 491 73 l 491 0 m 124 1064 l 220 1064 q 253 1036 234 1052 q 293 1004 273 1021 q 334 970 314 986 q 370 938 354 953 q 405 970 385 953 q 446 1004 425 986 q 487 1036 467 1021 q 521 1064 507 1052 l 617 1064 l 617 1045 q 579 1000 600 1026 q 535 947 557 974 q 494 892 513 919 q 464 842 475 865 l 277 842 q 247 892 266 865 q 206 947 227 919 q 162 1000 184 974 q 124 1045 140 1026 l 124 1064 "},"—":{"x_min":-7,"x_max":1396,"ha":1389,"o":"m 1396 323 l -7 323 l -7 423 l 1396 423 l 1396 323 "},"N":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 813 0 l 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 298 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 0 l 813 0 "},"⁄":{"x_min":-258,"x_max":345,"ha":86,"o":"m -149 0 l -258 0 l 237 992 l 345 992 l -149 0 "},"2":{"x_min":49,"x_max":713,"ha":777,"o":"m 678 775 q 670 712 678 742 q 647 649 663 681 q 603 580 630 616 q 536 500 576 544 q 442 403 496 456 q 319 284 389 350 l 180 152 l 504 152 q 577 177 546 152 q 619 248 607 202 l 630 291 l 713 291 l 705 0 l 49 0 l 49 143 l 254 352 q 360 471 319 418 q 425 572 401 524 q 458 667 449 620 q 468 768 468 715 q 439 884 468 847 q 359 921 410 921 q 260 860 289 921 q 232 681 232 799 q 159 688 192 681 q 103 712 127 696 q 67 754 80 728 q 54 818 54 780 q 73 890 54 856 q 131 949 93 923 q 226 990 169 975 q 359 1006 283 1006 q 497 990 437 1006 q 596 944 556 974 q 657 871 637 914 q 678 775 678 828 "},"М":{"x_min":38.453125,"x_max":1283.875,"ha":1323,"o":"m 839 0 l 839 73 l 853 73 q 891 76 874 73 q 918 87 908 79 q 935 110 929 95 q 940 151 940 126 l 940 855 l 660 0 l 565 0 l 271 855 l 271 164 q 278 116 271 134 q 299 89 286 99 q 331 76 312 80 q 374 73 350 73 l 383 73 l 383 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 438 992 l 669 320 l 891 992 l 1283 992 l 1283 918 l 1225 918 q 1197 915 1210 918 q 1175 903 1184 912 q 1160 876 1165 893 q 1155 828 1155 858 l 1155 164 q 1160 116 1155 134 q 1175 89 1165 99 q 1197 76 1184 80 q 1225 73 1210 73 l 1283 73 l 1283 0 l 839 0 "},"Ó":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 452 1089 q 485 1134 466 1108 q 522 1187 503 1160 q 558 1242 541 1215 q 585 1293 574 1269 l 804 1293 l 804 1278 q 761 1233 791 1260 q 694 1175 731 1205 q 618 1118 657 1146 q 546 1071 578 1089 l 452 1071 l 452 1089 "},"˜":{"x_min":125,"x_max":675,"ha":802,"o":"m 516 974 q 543 980 531 974 q 564 996 555 986 q 577 1020 572 1006 q 584 1047 582 1033 l 675 1047 q 659 968 672 1005 q 623 902 645 930 q 569 858 600 874 q 501 842 538 842 q 433 855 464 842 q 377 885 403 869 q 328 916 351 902 q 283 929 306 929 q 256 923 268 929 q 235 907 244 917 q 222 883 227 897 q 215 856 217 870 l 125 856 q 140 935 127 898 q 177 1001 154 973 q 231 1045 200 1029 q 299 1062 262 1062 q 367 1048 337 1062 q 423 1018 397 1034 q 472 987 449 1001 q 516 974 495 974 "}," ":{"x_min":0,"x_max":0,"ha":695},"ˇ":{"x_min":154,"x_max":647,"ha":802,"o":"m 154 1064 l 250 1064 q 283 1036 264 1052 q 323 1004 303 1021 q 364 970 344 986 q 400 938 384 953 q 435 970 415 953 q 476 1004 455 986 q 517 1036 497 1021 q 551 1064 537 1052 l 647 1064 l 647 1045 q 609 1000 630 1026 q 565 947 587 974 q 524 892 543 919 q 494 842 505 865 l 307 842 q 277 892 296 865 q 236 947 257 919 q 192 1000 214 974 q 154 1045 170 1026 l 154 1064 "},"ų":{"x_min":36.34375,"x_max":891.4375,"ha":926,"o":"m 614 0 l 584 97 l 577 97 q 532 39 556 61 q 479 6 507 17 q 421 -9 452 -5 q 358 -14 390 -14 q 191 53 249 -14 q 134 260 134 120 l 134 572 q 128 622 134 603 q 111 652 123 641 q 82 667 100 662 q 39 671 64 671 l 36 671 l 36 745 l 344 745 l 344 299 q 349 218 344 254 q 367 157 355 182 q 399 117 379 131 q 450 104 419 104 q 507 118 483 104 q 546 160 531 133 q 568 227 561 188 q 576 315 576 266 l 576 582 q 567 630 576 612 q 546 657 559 647 q 514 668 532 666 q 475 671 496 671 l 471 671 l 471 745 l 787 745 l 787 161 q 794 113 787 130 q 813 87 801 96 q 842 76 825 78 q 879 73 859 73 l 891 73 l 891 0 l 614 0 m 451 -180 q 464 -118 451 -147 q 501 -65 478 -89 q 553 -24 524 -41 q 615 0 583 -7 l 722 0 q 677 -20 700 -6 q 635 -53 654 -33 q 604 -100 617 -74 q 592 -160 592 -127 q 599 -193 592 -179 q 619 -215 606 -207 q 650 -229 632 -224 q 688 -233 667 -233 q 728 -230 707 -233 q 776 -222 750 -228 l 776 -311 q 749 -321 765 -317 q 716 -327 733 -325 q 684 -332 700 -330 q 657 -334 668 -334 q 503 -297 556 -334 q 451 -180 451 -260 "},"Ў":{"x_min":0,"x_max":964,"ha":964,"o":"m 964 918 l 937 918 q 903 914 917 918 q 877 897 889 909 q 855 863 866 884 q 832 810 845 842 l 629 287 q 585 184 606 228 q 542 107 565 139 q 491 54 518 75 q 428 21 464 33 q 347 4 393 9 q 241 0 301 0 l 155 0 l 155 80 l 216 80 q 287 87 251 80 q 354 106 322 93 q 409 138 385 119 q 444 183 432 157 l 116 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 38 918 l 0 918 l 0 992 l 476 992 l 476 918 l 426 918 q 370 905 390 918 q 351 861 351 892 q 357 823 351 842 q 375 782 364 804 l 480 558 q 505 506 492 533 q 528 452 517 479 q 548 398 540 424 q 562 348 557 371 q 581 407 571 377 q 607 476 592 437 l 708 754 q 727 813 721 788 q 734 850 734 838 q 712 902 734 886 q 643 918 689 918 l 614 918 l 614 992 l 964 992 l 964 918 m 497 1147 q 589 1181 557 1147 q 629 1288 621 1215 l 803 1288 q 785 1206 798 1245 q 739 1137 772 1167 q 649 1088 707 1106 q 497 1071 591 1071 q 346 1088 404 1071 q 255 1137 288 1106 q 209 1206 222 1167 q 192 1288 196 1245 l 365 1288 q 405 1181 373 1215 q 497 1147 438 1147 "},"Ŭ":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 547 1071 q 451 1090 492 1071 q 382 1140 410 1109 q 340 1210 354 1171 q 325 1289 326 1249 l 416 1289 q 462 1216 428 1238 q 547 1194 495 1194 q 632 1216 598 1194 q 677 1289 666 1238 l 770 1289 q 754 1210 768 1249 q 712 1140 740 1171 q 643 1090 684 1109 q 547 1071 602 1071 "},"ĝ":{"x_min":3,"x_max":772,"ha":778,"o":"m 772 717 q 767 687 772 702 q 751 662 762 672 q 720 644 740 651 q 672 638 701 638 q 668 663 672 652 q 656 681 664 674 q 639 693 649 689 q 619 696 630 696 q 594 692 608 696 q 574 681 581 687 q 600 646 588 666 q 622 603 612 626 q 636 555 631 580 q 642 504 642 530 q 625 408 642 452 q 574 331 608 363 q 486 280 539 298 q 361 262 433 262 q 342 262 353 262 q 319 263 330 262 q 297 264 307 263 q 281 266 286 265 q 263 254 272 261 q 246 238 253 247 q 235 218 239 229 q 230 195 230 207 q 248 161 230 172 q 295 151 266 151 l 464 151 q 583 136 533 151 q 666 94 633 121 q 715 27 699 67 q 731 -61 731 -11 q 706 -176 731 -125 q 632 -261 682 -226 q 506 -315 582 -296 q 327 -334 431 -334 q 83 -284 163 -334 q 3 -140 3 -235 q 51 -26 3 -66 q 190 20 99 13 q 153 39 171 28 q 120 65 135 49 q 97 100 106 80 q 89 144 89 119 q 98 186 89 167 q 123 224 107 206 q 162 258 139 242 q 212 289 185 274 q 156 320 182 300 q 111 366 130 339 q 81 428 92 393 q 71 504 71 462 q 141 694 71 627 q 361 762 212 762 q 453 749 410 762 q 526 719 495 736 q 552 745 538 731 q 583 770 566 759 q 623 789 601 782 q 671 797 644 797 q 715 790 696 797 q 746 773 733 784 q 765 748 759 762 q 772 717 772 733 m 167 -137 q 208 -223 167 -195 q 330 -250 250 -250 q 508 -215 452 -250 q 564 -111 564 -180 q 536 -49 564 -67 q 452 -32 508 -32 l 290 -32 q 247 -35 269 -32 q 208 -51 226 -39 q 178 -83 190 -62 q 167 -137 167 -104 m 260 504 q 265 438 260 468 q 281 388 270 409 q 311 355 293 367 q 357 344 330 344 q 403 355 384 344 q 432 387 421 366 q 447 439 443 409 q 452 506 452 469 q 447 577 452 545 q 431 631 442 608 q 401 666 420 653 q 355 678 383 678 q 310 665 328 678 q 280 629 292 652 q 264 574 269 606 q 260 504 260 542 m 115 860 q 153 905 131 879 q 197 958 175 931 q 238 1013 218 986 q 268 1064 257 1040 l 455 1064 q 485 1013 466 1040 q 526 958 504 986 q 570 905 548 931 q 608 860 591 879 l 608 842 l 512 842 q 478 869 498 853 q 437 901 458 884 q 396 935 416 918 q 361 966 376 952 q 325 935 345 952 q 284 901 305 918 q 244 869 264 884 q 211 842 225 853 l 115 842 l 115 860 "},"Ω":{"x_min":61,"x_max":1061,"ha":1122,"o":"m 89 625 q 118 782 89 712 q 206 902 147 852 q 354 979 265 952 q 563 1007 443 1007 q 763 979 676 1007 q 911 902 851 952 q 1002 782 971 852 q 1033 625 1033 712 q 947 386 1033 478 q 693 265 861 295 l 690 148 l 829 148 q 890 153 865 148 q 931 168 915 158 q 958 195 948 179 q 973 234 968 211 l 984 280 l 1061 280 l 1050 0 l 603 0 l 612 335 q 696 363 661 341 q 752 423 730 386 q 782 510 773 460 q 792 625 792 561 q 780 748 792 694 q 740 840 767 802 q 669 897 713 877 q 562 916 625 916 q 453 897 498 916 q 381 840 408 877 q 340 748 353 802 q 327 625 327 694 q 337 510 327 561 q 368 423 347 460 q 424 363 390 386 q 508 335 459 341 l 518 0 l 70 0 l 61 278 l 137 278 l 148 231 q 162 192 153 208 q 188 165 172 176 q 230 150 205 155 q 291 145 255 145 l 431 145 l 427 267 q 174 388 259 296 q 89 625 89 479 "},"s":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 "},"?":{"x_min":52,"x_max":688,"ha":764,"o":"m 688 750 q 670 650 688 694 q 618 569 653 606 q 532 502 584 533 q 411 443 480 471 l 383 317 l 298 317 l 271 487 q 368 543 330 511 q 428 613 406 576 q 458 690 450 649 q 466 772 466 731 q 460 833 466 805 q 441 880 454 860 q 407 911 428 900 q 358 922 386 922 q 306 908 327 922 q 272 870 285 894 q 253 814 259 846 q 248 747 248 782 q 169 753 205 747 q 107 771 133 759 q 66 801 81 783 q 52 844 52 820 q 69 908 52 878 q 123 959 87 937 q 215 993 159 980 q 347 1006 271 1006 q 483 988 420 1006 q 591 938 545 971 q 662 858 636 905 q 688 750 688 810 m 226 99 q 234 152 226 131 q 258 187 243 174 q 295 205 274 200 q 340 211 316 211 q 383 205 363 211 q 420 187 404 200 q 444 152 435 174 q 454 99 454 131 q 444 47 454 68 q 420 13 435 26 q 383 -5 404 0 q 340 -11 363 -11 q 295 -5 316 -11 q 258 13 274 0 q 234 47 243 26 q 226 99 226 68 "},"Ņ":{"x_min":38.453125,"x_max":1070.859375,"ha":1095,"o":"m 813 0 l 271 765 l 271 164 q 277 116 271 134 q 292 89 283 99 q 315 76 302 80 q 342 73 328 73 l 401 73 l 401 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 347 992 l 837 298 l 837 833 q 831 878 837 861 q 816 903 826 895 q 793 915 806 912 q 766 918 780 918 l 708 918 l 708 992 l 1070 992 l 1070 918 l 1012 918 q 985 915 998 918 q 962 903 972 912 q 947 876 952 893 q 942 828 942 858 l 942 0 l 813 0 m 439 -289 q 453 -242 445 -268 q 469 -189 461 -216 q 483 -134 476 -161 q 493 -85 489 -108 l 655 -85 l 655 -98 q 630 -147 645 -120 q 596 -202 614 -174 q 559 -257 578 -230 q 522 -307 540 -285 l 439 -307 l 439 -289 "},"Ī":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 479 1071 l 76 1071 l 76 1180 l 479 1180 l 479 1071 "},"Μ":{"x_min":38.453125,"x_max":1283.875,"ha":1323,"o":"m 839 0 l 839 73 l 853 73 q 891 76 874 73 q 918 87 908 79 q 935 110 929 95 q 940 151 940 126 l 940 855 l 660 0 l 565 0 l 271 855 l 271 164 q 278 116 271 134 q 299 89 286 99 q 331 76 312 80 q 374 73 350 73 l 383 73 l 383 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 147 903 157 895 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 438 992 l 669 320 l 891 992 l 1283 992 l 1283 918 l 1225 918 q 1197 915 1210 918 q 1175 903 1184 912 q 1160 876 1165 893 q 1155 828 1155 858 l 1155 164 q 1160 116 1155 134 q 1175 89 1165 99 q 1197 76 1184 80 q 1225 73 1210 73 l 1283 73 l 1283 0 l 839 0 "},"•":{"x_min":78,"x_max":478,"ha":555,"o":"m 78 494 q 92 598 78 556 q 134 666 107 641 q 198 703 161 692 q 278 714 234 714 q 355 703 318 714 q 419 666 391 692 q 462 598 446 641 q 478 494 478 556 q 462 390 478 432 q 419 322 446 348 q 355 285 391 296 q 278 275 318 275 q 198 285 234 275 q 134 322 161 296 q 92 390 107 348 q 78 494 78 432 "},"н":{"x_min":23.703125,"x_max":936.296875,"ha":960,"o":"m 821 164 q 830 116 821 134 q 855 89 840 99 q 887 76 869 80 q 920 73 905 73 l 936 73 l 936 0 l 515 0 l 515 73 l 518 73 q 548 76 532 73 q 578 89 564 80 q 600 116 591 99 q 610 164 610 134 l 610 343 l 349 343 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 444 73 l 444 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 444 745 l 444 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 646 q 349 580 349 610 l 349 423 l 610 423 l 610 580 q 600 628 610 610 q 578 655 591 646 q 548 668 564 664 q 518 671 532 671 l 515 671 l 515 745 l 936 745 l 936 671 l 920 671 q 887 668 905 671 q 855 655 869 664 q 830 628 840 645 q 821 580 821 610 l 821 164 "},"(":{"x_min":79,"x_max":511,"ha":555,"o":"m 302 441 q 310 279 302 358 q 342 128 319 199 q 405 -1 365 57 q 511 -104 446 -61 l 511 -193 q 312 -83 395 -146 q 179 58 230 -20 q 103 233 127 137 q 79 441 79 329 q 103 648 79 553 q 179 822 127 743 q 312 963 230 901 q 511 1072 395 1025 l 511 984 q 405 882 446 941 q 342 752 365 823 q 310 603 319 682 q 302 441 302 524 "},"◊":{"x_min":37,"x_max":724,"ha":761,"o":"m 412 0 l 348 0 l 37 494 l 348 992 l 412 992 l 724 496 l 412 0 m 381 864 l 155 496 l 381 122 l 606 496 l 381 864 "},"α":{"x_min":65,"x_max":887.46875,"ha":901,"o":"m 770 0 q 683 9 719 0 q 623 35 647 19 q 586 69 599 50 q 568 108 573 89 l 559 108 q 523 59 543 81 q 478 20 504 36 q 420 -4 452 4 q 347 -14 387 -14 q 226 8 279 -14 q 137 78 173 31 q 83 198 102 125 q 65 370 65 270 q 87 544 65 471 q 149 665 109 617 q 246 735 189 712 q 372 758 302 758 q 446 747 413 758 q 505 717 479 736 q 550 673 531 698 q 582 620 569 648 l 595 620 q 622 682 607 652 q 665 745 637 712 l 798 745 q 785 692 792 725 q 773 621 778 660 q 765 542 768 583 q 762 464 762 501 l 762 194 q 791 103 762 133 q 875 73 821 73 l 887 73 l 887 0 l 770 0 m 408 89 q 476 115 449 89 q 520 187 504 142 q 544 294 537 232 q 551 427 551 356 l 551 479 q 530 560 543 526 q 500 616 517 594 q 462 648 483 637 q 418 658 441 658 q 312 586 345 658 q 279 370 279 513 q 308 159 279 228 q 408 89 338 89 "},"Ħ":{"x_min":24.890625,"x_max":1111.421875,"ha":1137,"o":"m 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 475 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 693 l 24 693 l 24 767 l 168 767 l 168 834 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 903 417 912 q 392 876 398 893 q 387 828 387 858 l 387 767 l 749 767 l 749 828 q 743 876 749 858 q 728 903 738 893 q 705 915 718 912 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 903 999 912 q 974 876 979 893 q 969 828 969 858 l 969 767 l 1111 767 l 1111 693 l 969 693 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 m 749 560 l 749 693 l 387 693 l 387 560 l 749 560 "},"м":{"x_min":23.703125,"x_max":1175.25,"ha":1198,"o":"m 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 387 745 l 592 279 l 802 745 l 1175 745 l 1175 671 l 1156 671 q 1113 668 1133 671 q 1076 655 1092 664 q 1052 627 1061 645 q 1043 578 1043 608 l 1043 166 q 1052 117 1043 136 q 1076 89 1061 99 q 1113 76 1092 80 q 1156 73 1133 73 l 1175 73 l 1175 0 l 724 0 l 724 73 l 728 73 q 772 76 752 73 q 809 89 793 80 q 833 117 824 99 q 842 166 842 136 l 842 595 l 833 595 l 563 0 l 499 0 l 237 595 l 227 595 l 227 166 q 237 117 227 136 q 261 89 246 99 q 298 76 277 80 q 341 73 318 73 l 345 73 l 345 0 l 23 0 "},"з":{"x_min":47,"x_max":679,"ha":735,"o":"m 336 63 q 394 74 370 63 q 434 104 419 85 q 457 150 450 124 q 465 206 465 176 q 426 308 465 274 q 304 343 387 343 l 210 343 l 210 432 l 305 432 q 370 442 344 432 q 412 471 396 453 q 435 513 428 489 q 441 563 441 537 q 436 610 441 588 q 420 648 431 632 q 390 673 408 664 q 345 682 372 682 q 292 668 313 682 q 257 631 270 654 q 238 578 244 608 q 232 518 232 549 q 161 525 190 518 q 116 545 133 532 q 92 576 99 558 q 85 617 85 594 q 98 667 85 642 q 143 713 112 693 q 225 747 173 734 q 352 761 276 761 q 480 749 424 761 q 575 713 537 737 q 634 656 614 690 q 654 577 654 622 q 643 515 654 544 q 611 461 632 485 q 560 420 590 438 q 494 393 531 402 l 494 386 q 631 328 583 369 q 679 212 679 287 q 656 119 679 160 q 591 49 634 78 q 484 3 548 19 q 336 -12 420 -12 q 199 0 254 -12 q 110 34 144 13 q 61 84 76 56 q 47 146 47 113 q 79 225 47 196 q 184 253 111 253 q 194 178 184 213 q 223 118 204 143 q 271 78 243 93 q 336 63 300 63 "},"Ґ":{"x_min":38.453125,"x_max":733,"ha":761,"o":"m 724 907 l 388 907 l 388 158 q 394 114 388 130 q 409 88 399 97 q 432 76 418 79 q 459 73 445 73 l 545 73 l 545 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 503 992 q 566 1000 541 992 q 605 1025 590 1009 q 626 1065 620 1042 q 636 1117 633 1089 l 641 1180 l 733 1180 l 724 907 "},"Û":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 308 1089 q 346 1134 324 1108 q 390 1187 368 1160 q 431 1242 411 1215 q 461 1293 450 1269 l 648 1293 q 678 1242 659 1269 q 719 1187 697 1215 q 763 1134 741 1160 q 801 1089 784 1108 l 801 1071 l 705 1071 q 671 1098 691 1082 q 630 1130 651 1113 q 589 1164 609 1147 q 554 1195 569 1181 q 518 1164 538 1181 q 477 1130 498 1147 q 437 1098 457 1113 q 404 1071 418 1082 l 308 1071 l 308 1089 "},"і":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 119 970 q 128 1015 119 996 q 153 1046 137 1034 q 190 1064 169 1058 q 237 1070 212 1070 q 282 1064 261 1070 q 320 1046 304 1058 q 346 1015 337 1034 q 356 970 356 996 q 346 925 356 944 q 320 894 337 906 q 282 876 304 882 q 237 870 261 870 q 190 876 212 870 q 153 894 169 882 q 128 925 137 906 q 119 970 119 944 m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 "},"V":{"x_min":-0.015625,"x_max":969.609375,"ha":970,"o":"m 969 918 l 902 918 q 885 914 892 918 q 870 899 878 910 q 854 868 863 888 q 836 816 846 848 l 552 0 l 413 0 l 118 851 q 100 884 111 871 q 78 905 90 897 q 54 915 66 912 q 31 918 42 918 l 0 918 l 0 992 l 458 992 l 458 918 l 394 918 q 375 916 384 918 q 357 908 365 914 q 345 894 349 903 q 340 872 340 885 q 344 841 340 859 q 352 812 348 824 l 494 384 q 505 348 499 369 q 516 303 511 326 q 526 258 522 280 q 532 216 530 235 q 540 247 534 227 q 551 291 545 267 q 565 338 558 314 q 579 380 572 361 l 722 803 q 727 820 724 810 q 733 838 730 829 q 737 857 735 848 q 739 871 739 865 q 723 906 739 894 q 683 918 708 918 l 610 918 l 610 992 l 969 992 l 969 918 "},"Ŗ":{"x_min":38.453125,"x_max":987.734375,"ha":982,"o":"m 38 73 l 96 73 q 123 76 111 73 q 146 87 136 79 q 162 112 156 96 q 168 156 168 129 l 168 833 q 162 878 168 861 q 146 903 156 895 q 123 915 136 912 q 96 918 111 918 l 38 918 l 38 992 l 486 992 q 775 926 683 992 q 867 735 867 860 q 850 637 867 680 q 807 562 834 594 q 746 508 780 530 q 677 472 712 486 l 843 187 q 877 136 860 157 q 910 100 894 114 q 945 80 927 86 q 982 73 962 73 l 987 73 l 987 0 l 942 0 q 833 4 879 0 q 751 23 786 9 q 691 61 716 37 q 644 124 666 86 l 479 431 l 387 431 l 387 156 q 392 112 387 129 q 408 87 398 96 q 431 76 418 79 q 458 73 444 73 l 517 73 l 517 0 l 38 0 l 38 73 m 387 512 l 465 512 q 545 524 513 512 q 597 563 577 537 q 625 626 616 588 q 633 716 633 665 q 624 805 633 768 q 594 865 614 842 q 541 899 573 888 q 462 909 508 909 l 387 909 l 387 512 m 373 -289 q 387 -242 379 -268 q 403 -189 395 -216 q 417 -134 410 -161 q 427 -85 423 -108 l 589 -85 l 589 -98 q 564 -147 579 -120 q 530 -202 548 -174 q 493 -257 512 -230 q 456 -307 474 -285 l 373 -307 l 373 -289 "},"@":{"x_min":71,"x_max":1225,"ha":1279,"o":"m 1225 545 q 1199 360 1225 441 q 1134 222 1174 278 q 1042 137 1093 166 q 938 108 990 108 q 834 138 877 108 q 768 238 791 168 l 759 238 q 727 187 745 211 q 685 145 708 163 q 633 118 662 128 q 568 108 605 108 q 485 122 525 108 q 415 165 445 136 q 367 239 385 194 q 350 345 350 284 q 358 425 350 382 q 386 512 367 469 q 435 595 406 555 q 507 666 465 636 q 602 716 548 697 q 723 735 656 735 q 806 722 771 735 q 862 693 841 710 l 921 722 l 954 722 l 896 375 q 893 354 894 367 q 889 328 891 341 q 887 302 888 314 q 886 281 886 289 q 892 234 886 253 q 908 205 898 216 q 929 191 917 195 q 953 188 941 188 q 1008 211 980 188 q 1060 278 1037 234 q 1097 388 1083 322 q 1112 539 1112 454 q 1083 706 1112 634 q 1003 825 1054 777 q 881 897 952 873 q 726 921 810 921 q 596 903 660 921 q 474 849 532 884 q 368 763 416 814 q 283 646 319 711 q 227 501 247 580 q 207 330 207 422 q 243 121 207 207 q 343 -20 280 34 q 489 -100 405 -75 q 666 -125 573 -125 q 776 -115 723 -125 q 878 -89 830 -105 q 967 -51 926 -72 q 1041 -9 1009 -30 l 1075 -61 q 991 -114 1038 -89 q 890 -156 945 -138 q 775 -186 836 -175 q 647 -197 713 -197 q 494 -182 567 -197 q 357 -137 421 -167 q 240 -63 293 -108 q 149 40 187 -19 q 91 174 112 100 q 71 339 71 249 q 93 517 71 432 q 158 674 116 602 q 259 805 199 746 q 393 905 319 863 q 553 969 466 947 q 736 992 639 992 q 948 957 856 992 q 1101 862 1039 922 q 1193 721 1162 802 q 1225 545 1225 639 m 520 331 q 545 224 520 261 q 609 188 569 188 q 661 202 639 188 q 696 239 682 216 q 721 292 711 263 q 736 352 730 321 l 791 635 q 779 651 787 644 q 761 664 771 659 q 740 671 751 669 q 718 673 729 673 q 654 656 683 673 q 604 609 626 638 q 567 544 582 581 q 540 469 551 507 q 525 395 530 431 q 520 331 520 358 "},"ʼ":{"x_min":61.96875,"x_max":311,"ha":389,"o":"m 311 839 q 297 753 311 795 q 254 676 283 712 q 176 613 224 641 q 61 567 129 585 l 61 638 q 115 660 92 649 q 153 684 138 671 q 176 711 168 696 q 184 747 184 727 q 176 769 184 761 q 158 784 169 777 q 133 800 146 792 q 109 820 120 807 q 90 850 97 832 q 83 896 83 868 q 111 967 83 943 q 182 992 140 992 q 276 951 241 992 q 311 839 311 910 "},"℅":{"x_min":47,"x_max":1082,"ha":1129,"o":"m 300 529 q 198 543 245 529 q 117 586 151 557 q 65 659 84 615 q 47 764 47 703 q 65 877 47 831 q 117 949 84 922 q 195 988 150 976 q 293 1000 241 1000 q 363 992 328 1000 q 426 970 399 984 q 472 936 454 955 q 490 892 490 916 q 481 864 490 878 q 457 837 473 849 q 416 819 441 826 q 359 812 391 812 q 356 852 359 831 q 347 889 354 873 q 328 916 340 906 q 298 927 317 927 q 261 921 277 927 q 233 897 245 915 q 215 849 221 880 q 209 768 209 818 q 239 654 209 688 q 333 620 270 620 q 418 637 384 620 q 468 680 452 655 q 483 663 477 675 q 490 634 490 651 q 478 595 490 614 q 442 561 466 576 q 383 537 419 546 q 300 529 348 529 m 735 222 q 755 97 735 140 q 828 55 776 55 q 900 97 879 55 q 921 222 921 139 q 899 344 921 303 q 827 384 877 384 q 755 344 775 384 q 735 222 735 303 m 1082 222 q 1016 44 1082 103 q 827 -14 951 -14 q 719 0 766 -14 q 639 44 671 15 q 589 118 606 74 q 573 222 573 162 q 637 399 573 341 q 829 457 701 457 q 934 442 888 457 q 1014 398 981 427 q 1064 325 1046 369 q 1082 222 1082 281 m 363 0 l 254 0 l 735 992 l 842 992 l 363 0 "},"i":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 119 970 q 128 1015 119 996 q 153 1046 137 1034 q 190 1064 169 1058 q 237 1070 212 1070 q 282 1064 261 1070 q 320 1046 304 1058 q 346 1015 337 1034 q 356 970 356 996 q 346 925 356 944 q 320 894 337 906 q 282 876 304 882 q 237 870 261 870 q 190 876 212 870 q 153 894 169 882 q 128 925 137 906 q 119 970 119 944 m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 "},"ќ":{"x_min":23.703125,"x_max":892,"ha":892,"o":"m 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 444 745 l 444 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 645 q 349 580 349 610 l 349 428 q 404 435 383 428 q 441 458 425 442 q 480 508 458 475 q 536 594 501 541 q 580 660 559 631 q 625 710 601 689 q 680 741 649 730 q 751 753 710 753 q 808 745 786 753 q 845 726 831 738 q 865 699 859 715 q 870 668 870 684 q 864 633 870 649 q 846 606 858 618 q 820 588 835 595 q 788 580 805 582 q 766 632 783 612 q 719 651 750 651 q 695 645 707 651 q 669 626 683 639 q 641 593 656 613 q 607 546 626 573 q 575 499 589 519 q 548 464 560 479 q 525 438 536 449 q 502 417 514 427 q 547 407 524 415 q 592 385 570 400 q 634 350 614 371 q 673 297 655 328 l 750 166 q 781 120 766 138 q 812 91 796 101 q 846 77 828 81 q 887 73 864 73 l 892 73 l 892 0 l 833 0 q 730 4 776 0 q 648 22 685 8 q 583 62 611 36 q 530 132 554 88 l 459 263 q 432 309 444 292 q 408 335 420 326 q 382 348 396 345 q 349 351 368 351 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 444 73 l 444 0 l 23 0 l 23 73 m 340 860 q 373 905 354 879 q 410 958 391 931 q 446 1013 429 986 q 473 1064 462 1040 l 692 1064 l 692 1049 q 649 1004 679 1031 q 582 946 619 976 q 506 889 545 917 q 434 842 466 860 l 340 842 l 340 860 "},"≤":{"x_min":90,"x_max":687,"ha":777,"o":"m 687 0 l 90 0 l 90 98 l 687 98 l 687 0 m 90 468 l 90 525 l 687 850 l 687 740 l 238 496 l 687 254 l 687 145 l 90 468 "},"ё":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 191 955 q 197 995 191 978 q 215 1022 204 1011 q 241 1036 226 1032 q 272 1041 256 1041 q 303 1036 289 1041 q 330 1022 318 1032 q 348 995 341 1011 q 356 955 356 978 q 348 915 356 931 q 330 888 341 898 q 303 873 318 878 q 272 869 289 869 q 241 873 256 869 q 215 888 226 878 q 197 915 204 898 q 191 955 191 931 m 476 955 q 482 995 476 978 q 501 1022 489 1011 q 527 1036 512 1032 q 559 1041 542 1041 q 589 1036 574 1041 q 615 1022 603 1032 q 633 995 626 1011 q 641 955 641 978 q 633 915 641 931 q 615 888 626 898 q 589 873 603 878 q 559 869 574 869 q 527 873 542 869 q 501 888 512 878 q 482 915 489 898 q 476 955 476 931 "},"υ":{"x_min":37.6875,"x_max":815,"ha":879,"o":"m 458 -14 q 315 7 376 -14 q 213 69 253 29 q 153 165 173 109 q 134 291 134 222 l 134 586 q 127 630 134 613 q 109 656 121 647 q 80 668 98 665 q 37 671 62 671 l 37 745 l 343 745 l 343 291 q 355 198 343 237 q 387 136 366 160 q 440 100 409 112 q 511 89 472 89 q 601 111 563 89 q 664 173 639 133 q 701 268 689 213 q 713 390 713 324 q 698 503 713 456 q 658 580 682 549 q 607 627 634 610 q 556 650 579 643 q 562 691 556 671 q 580 724 568 710 q 610 747 592 739 q 652 756 628 756 q 718 732 688 756 q 769 666 747 709 q 802 562 790 623 q 815 425 815 501 q 808 317 815 371 q 786 214 802 263 q 743 124 770 165 q 677 51 717 82 q 584 3 638 20 q 458 -14 530 -14 "},"ĕ":{"x_min":65,"x_max":735,"ha":793,"o":"m 412 671 q 319 614 354 671 q 282 445 285 556 l 522 445 q 516 540 522 497 q 497 611 510 582 q 463 656 483 640 q 412 671 442 671 m 425 -14 q 269 11 337 -14 q 156 86 202 37 q 88 206 111 135 q 65 367 65 277 q 88 539 65 465 q 155 662 111 613 q 263 737 199 712 q 409 762 327 762 q 545 740 485 762 q 648 677 606 719 q 712 572 690 635 q 735 427 735 510 l 735 356 l 279 356 q 294 236 281 286 q 331 153 307 186 q 388 105 354 120 q 465 89 421 89 q 531 98 501 89 q 587 121 562 106 q 630 157 612 137 q 661 202 649 178 q 699 134 699 182 q 682 77 699 104 q 632 30 666 51 q 547 -1 598 10 q 425 -14 496 -14 m 409 842 q 313 861 354 842 q 244 911 272 880 q 202 981 216 942 q 187 1060 188 1020 l 278 1060 q 324 987 290 1009 q 409 965 357 965 q 494 987 460 965 q 539 1060 528 1009 l 632 1060 q 616 981 630 1020 q 574 911 602 942 q 505 861 546 880 q 409 842 464 842 "},"ﬃ":{"x_min":26.140625,"x_max":1467.90625,"ha":1492,"o":"m 26 0 l 26 73 l 56 73 q 88 76 71 73 q 120 89 106 80 q 145 116 135 99 q 155 164 155 134 l 155 650 l 31 650 l 31 745 l 155 745 l 155 755 q 224 979 155 904 q 438 1054 293 1054 q 544 1043 503 1054 q 607 1018 585 1033 q 638 984 630 1002 q 647 950 647 966 q 609 883 647 903 q 499 862 571 862 q 497 898 499 879 q 487 935 494 918 q 468 963 480 952 q 437 975 456 975 q 408 966 420 975 q 385 934 395 957 q 371 869 376 910 q 366 765 366 829 l 366 745 l 648 745 l 648 753 q 670 886 648 828 q 738 985 692 945 q 854 1047 784 1026 q 1022 1068 925 1068 q 1167 1059 1109 1068 q 1262 1036 1226 1051 q 1314 997 1298 1020 q 1330 945 1330 975 q 1318 898 1330 919 q 1282 861 1306 876 q 1218 837 1257 846 q 1124 829 1179 829 q 1119 875 1124 848 q 1099 928 1113 903 q 1059 971 1085 953 q 995 988 1034 988 q 893 946 928 988 q 859 811 859 903 l 859 745 l 1352 745 l 1352 164 q 1362 116 1352 134 q 1386 89 1372 99 q 1418 76 1401 80 q 1450 73 1436 73 l 1467 73 l 1467 0 l 1025 0 l 1025 73 l 1042 73 q 1074 76 1057 73 q 1106 89 1092 80 q 1131 116 1121 99 q 1141 164 1141 134 l 1141 650 l 859 650 l 859 164 q 869 116 859 134 q 893 89 879 99 q 925 76 908 80 q 957 73 943 73 l 995 73 l 995 0 l 532 0 l 532 73 l 549 73 q 581 76 564 73 q 613 89 599 80 q 638 116 628 99 q 648 164 648 134 l 648 650 l 366 650 l 366 164 q 376 116 366 134 q 400 89 386 99 q 432 76 415 80 q 464 73 450 73 l 502 73 l 502 0 l 26 0 "},"ż":{"x_min":25,"x_max":694,"ha":735,"o":"m 511 94 q 547 100 532 94 q 572 120 562 106 q 590 155 583 133 q 603 207 597 176 l 611 252 l 694 252 l 687 0 l 25 0 l 25 56 l 435 650 l 232 650 q 204 645 216 650 q 184 630 193 641 q 167 600 175 618 q 152 553 160 581 l 144 520 l 61 520 l 77 745 l 678 745 l 678 685 l 266 94 l 511 94 m 277 969 q 286 1014 277 995 q 311 1045 295 1033 q 348 1063 327 1057 q 395 1069 369 1069 q 440 1063 418 1069 q 478 1045 462 1057 q 504 1014 494 1033 q 514 969 514 995 q 504 924 514 943 q 478 893 494 905 q 440 875 462 881 q 395 869 418 869 q 348 875 369 869 q 311 893 327 881 q 286 924 295 905 q 277 969 277 943 "},"Э":{"x_min":52,"x_max":870,"ha":947,"o":"m 404 1006 q 611 969 524 1006 q 756 866 699 932 q 841 710 813 800 q 870 513 870 620 q 838 294 870 392 q 748 128 807 197 q 602 22 688 59 q 406 -14 516 -14 q 241 3 309 -14 q 131 51 173 21 q 70 119 89 80 q 52 199 52 157 q 89 285 52 253 q 193 316 127 316 q 215 219 199 264 q 257 143 230 175 q 320 93 283 111 q 408 74 358 74 q 505 103 463 74 q 575 182 547 131 q 619 302 604 232 q 636 455 634 372 l 311 455 l 311 539 l 636 539 q 621 700 634 629 q 582 818 609 770 q 514 892 556 866 q 411 917 471 917 q 338 898 369 917 q 288 851 308 880 q 260 787 269 822 q 250 717 250 751 q 179 724 211 717 q 124 747 147 732 q 88 784 101 762 q 76 835 76 806 q 95 899 76 868 q 155 953 115 930 q 258 991 196 977 q 404 1006 319 1006 "},"ő":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 374 q 694 82 786 178 q 423 -14 602 -14 q 273 10 340 -14 q 160 82 207 34 q 89 203 114 130 q 65 374 65 277 q 156 666 65 570 q 427 762 248 762 q 577 738 511 762 q 690 666 643 714 q 761 545 736 618 q 786 374 786 472 m 280 374 q 288 244 280 300 q 313 150 296 188 q 358 92 330 112 q 426 73 386 73 q 494 92 466 73 q 538 150 521 112 q 563 244 556 188 q 571 374 571 300 q 563 505 571 449 q 538 598 555 561 q 492 654 520 635 q 425 673 465 673 q 357 654 385 673 q 312 598 329 635 q 288 505 295 561 q 280 374 280 449 m 200 842 l 200 860 q 230 908 214 882 q 262 961 246 934 q 292 1014 278 988 q 317 1064 307 1040 l 495 1064 l 495 1049 q 474 1021 487 1037 q 444 985 461 1004 q 407 946 427 966 q 368 907 388 926 q 330 871 349 888 q 296 842 311 854 l 200 842 m 464 842 l 464 860 q 494 908 478 882 q 526 961 510 934 q 556 1014 542 988 q 581 1064 570 1040 l 758 1064 l 758 1049 q 737 1021 750 1037 q 707 985 724 1004 q 671 946 690 966 q 632 907 651 926 q 593 871 612 888 q 559 842 575 854 l 464 842 "},"Ŏ":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 541 1071 q 445 1090 486 1071 q 376 1140 404 1109 q 334 1210 348 1171 q 319 1289 320 1249 l 410 1289 q 456 1216 422 1238 q 541 1194 489 1194 q 626 1216 592 1194 q 671 1289 660 1238 l 764 1289 q 748 1210 762 1249 q 706 1140 734 1171 q 637 1090 678 1109 q 541 1071 596 1071 "},"ю":{"x_min":23.703125,"x_max":1217,"ha":1282,"o":"m 1217 374 q 1128 82 1217 178 q 868 -14 1039 -14 q 729 8 790 -14 q 623 74 667 30 q 553 186 578 119 q 523 343 527 253 l 349 343 l 349 164 q 359 116 349 134 q 381 89 368 99 q 411 76 395 80 q 441 73 427 73 l 451 73 l 451 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 451 745 l 451 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 646 q 349 580 349 610 l 349 423 l 525 423 q 623 678 535 594 q 872 762 710 762 q 1016 738 953 762 q 1125 666 1080 714 q 1193 545 1169 618 q 1217 374 1217 472 m 739 374 q 746 244 739 300 q 768 150 752 188 q 809 92 784 112 q 871 73 834 73 q 932 92 907 73 q 972 150 957 112 q 995 244 988 188 q 1002 374 1002 300 q 972 598 1002 523 q 869 673 942 673 q 808 654 833 673 q 768 598 783 635 q 746 505 752 561 q 739 374 739 449 "},"İ":{"x_min":38.453125,"x_max":517.953125,"ha":557,"o":"m 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 827 q 162 875 168 857 q 147 902 157 892 q 125 915 138 911 q 96 918 112 918 l 38 918 l 38 992 l 517 992 l 517 918 l 459 918 q 431 915 444 918 q 408 902 418 911 q 393 875 399 892 q 388 827 388 857 l 388 164 q 393 116 388 134 q 408 89 399 99 q 431 76 418 80 q 459 73 444 73 l 517 73 l 517 0 l 38 0 m 158 1198 q 167 1243 158 1224 q 192 1274 176 1262 q 229 1292 208 1286 q 276 1298 250 1298 q 321 1292 299 1298 q 359 1274 343 1286 q 385 1243 375 1262 q 395 1198 395 1224 q 385 1153 395 1172 q 359 1122 375 1134 q 321 1104 343 1110 q 276 1098 299 1098 q 229 1104 250 1098 q 192 1122 208 1110 q 167 1153 176 1134 q 158 1198 158 1172 "},"Ě":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 211 1293 l 307 1293 q 340 1265 321 1281 q 380 1233 360 1250 q 421 1199 401 1215 q 457 1167 441 1182 q 492 1199 472 1182 q 533 1233 512 1215 q 574 1265 554 1250 q 608 1293 594 1281 l 704 1293 l 704 1274 q 666 1229 687 1255 q 622 1176 644 1203 q 581 1121 600 1148 q 551 1071 562 1094 l 364 1071 q 334 1121 353 1094 q 293 1176 314 1148 q 249 1229 271 1203 q 211 1274 227 1255 l 211 1293 "},"‹":{"x_min":90,"x_max":399.953125,"ha":490,"o":"m 90 411 l 302 654 l 399 654 l 259 375 l 399 97 l 302 97 l 90 339 l 90 411 "},"ķ":{"x_min":23.703125,"x_max":884,"ha":884,"o":"m 884 0 l 864 0 q 736 3 788 0 q 647 18 685 6 q 583 55 610 31 q 529 123 556 80 l 405 318 l 349 276 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 519 q 348 475 349 500 q 346 428 347 451 q 343 375 344 402 l 518 571 q 548 612 541 597 q 555 637 555 627 q 536 665 555 655 q 483 675 518 675 l 483 745 l 833 745 l 833 675 q 739 646 785 675 q 637 557 692 618 l 550 457 l 734 181 q 808 100 771 126 q 879 73 846 73 l 884 73 l 884 0 m 354 -289 q 368 -242 360 -268 q 384 -189 376 -216 q 398 -134 391 -161 q 408 -85 404 -108 l 570 -85 l 570 -98 q 545 -147 560 -120 q 511 -202 529 -174 q 474 -257 493 -230 q 437 -307 455 -285 l 354 -307 l 354 -289 "},"ì":{"x_min":-7,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 m 251 842 q 179 889 219 860 q 102 946 139 917 q 35 1004 65 976 q -7 1049 5 1031 l -7 1064 l 210 1064 q 238 1013 221 1040 q 274 958 255 986 q 312 905 292 931 q 346 860 331 879 l 346 842 l 251 842 "},"±":{"x_min":90.453125,"x_max":686.609375,"ha":777,"o":"m 686 0 l 90 0 l 90 98 l 686 98 l 686 0 m 437 446 l 437 198 l 338 198 l 338 446 l 90 446 l 90 546 l 338 546 l 338 794 l 437 794 l 437 546 l 686 546 l 686 446 l 437 446 "},"|":{"x_min":338,"x_max":437.703125,"ha":777,"o":"m 437 -334 l 338 -334 l 338 1055 l 437 1055 l 437 -334 "},"§":{"x_min":90,"x_max":703,"ha":756,"o":"m 383 -157 q 253 -141 305 -157 q 170 -99 201 -125 q 126 -42 139 -74 q 114 20 114 -11 q 123 68 114 47 q 148 102 132 88 q 187 123 164 116 q 237 130 210 130 q 247 45 237 84 q 278 -22 258 6 q 330 -66 299 -50 q 401 -82 361 -82 q 506 -45 468 -82 q 543 52 543 -9 q 535 103 543 81 q 501 147 526 125 q 428 197 475 170 q 304 262 382 224 q 205 319 246 290 q 139 380 164 348 q 101 446 113 412 q 90 523 90 481 q 115 607 90 570 q 180 666 140 645 q 138 733 156 691 q 121 831 121 774 q 141 926 121 884 q 198 996 161 968 q 285 1040 234 1025 q 394 1055 335 1055 q 502 1043 455 1055 q 579 1010 548 1031 q 627 960 611 989 q 643 896 643 931 q 609 825 643 854 q 511 797 575 797 q 506 860 511 827 q 486 918 500 892 q 449 962 472 945 q 388 979 425 979 q 295 945 330 979 q 260 848 260 911 q 271 792 260 814 q 303 751 282 769 q 355 718 325 734 q 425 684 386 703 q 551 618 498 649 q 637 554 603 587 q 687 485 671 521 q 703 405 703 450 q 695 355 703 380 q 676 309 688 331 q 648 270 665 287 q 614 241 632 252 q 650 172 637 211 q 663 92 663 133 q 645 -8 663 37 q 592 -87 627 -54 q 505 -138 557 -120 q 383 -157 452 -157 m 567 356 q 559 401 567 380 q 533 443 552 422 q 481 486 514 464 q 397 534 448 509 q 310 576 351 555 q 236 620 270 597 q 219 592 225 608 q 213 559 213 576 q 223 508 213 530 q 255 465 233 485 q 316 423 278 444 q 409 374 354 401 q 488 333 454 351 q 548 296 521 315 q 561 322 556 307 q 567 356 567 337 "},"џ":{"x_min":23.703125,"x_max":908.296875,"ha":932,"o":"m 892 671 q 859 668 877 671 q 827 655 841 664 q 802 628 812 645 q 793 580 793 610 l 793 158 q 802 114 793 130 q 827 88 812 97 q 859 76 842 79 q 892 73 877 73 l 908 73 l 908 0 l 659 0 q 551 -70 589 0 q 512 -292 512 -140 l 421 -292 q 408 -159 421 -214 q 373 -68 395 -104 q 319 -16 351 -33 q 251 0 288 0 l 23 0 l 23 73 l 39 73 q 72 76 54 73 q 104 88 89 79 q 129 114 119 97 q 139 158 139 130 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 444 745 l 444 671 l 441 671 q 411 668 427 671 q 381 655 395 664 q 359 628 368 645 q 349 580 349 610 l 349 79 l 582 79 l 582 580 q 572 628 582 610 q 550 655 563 645 q 520 668 536 664 q 490 671 504 671 l 487 671 l 487 745 l 908 745 l 908 671 l 892 671 "},"љ":{"x_min":0,"x_max":1204,"ha":1239,"o":"m 319 584 q 310 629 319 612 q 287 655 302 646 q 253 668 272 664 q 210 671 233 671 l 192 671 l 192 745 l 910 745 l 910 665 l 892 665 q 849 661 870 665 q 813 648 829 657 q 788 623 797 638 q 778 584 778 607 l 778 424 l 884 424 q 1006 416 948 424 q 1108 386 1064 408 q 1177 323 1151 364 q 1204 218 1204 283 q 1184 131 1204 171 q 1126 62 1165 91 q 1029 16 1088 33 q 891 0 970 0 l 452 0 l 452 73 l 467 73 q 568 154 563 73 l 568 665 l 410 665 q 376 422 397 536 q 328 214 355 308 q 289 107 310 150 q 243 38 268 64 q 186 1 218 12 q 116 -10 155 -10 q 30 15 60 -10 q 0 86 0 40 q 7 127 0 110 q 25 155 14 143 q 50 171 36 166 q 76 177 63 177 q 91 134 76 152 q 134 116 107 116 q 167 120 151 116 q 199 143 182 124 q 233 199 216 161 q 267 302 249 236 q 284 368 275 330 q 301 446 293 406 q 313 522 308 485 q 319 584 319 559 m 855 80 q 914 88 890 80 q 953 112 938 96 q 975 156 968 129 q 982 222 982 183 q 947 315 982 288 q 849 343 913 343 l 778 343 l 778 80 l 855 80 "},"q":{"x_min":64,"x_max":898.671875,"ha":900,"o":"m 412 -334 l 412 -260 l 437 -260 q 480 -257 460 -260 q 516 -245 501 -254 q 540 -219 531 -237 q 550 -173 550 -202 l 550 -72 q 550 -56 550 -66 q 551 -32 550 -45 q 553 -4 552 -19 q 555 24 554 9 q 560 96 558 57 l 551 96 q 517 52 537 72 q 472 17 497 32 q 415 -5 447 2 q 344 -14 383 -14 q 225 8 277 -14 q 137 78 173 31 q 82 199 101 126 q 64 373 64 272 q 82 545 64 473 q 137 665 101 618 q 226 735 173 712 q 347 758 279 758 q 420 749 388 758 q 479 725 453 741 q 525 686 505 709 q 560 635 545 664 l 573 635 l 601 745 l 881 745 l 881 671 l 876 671 q 832 667 853 671 q 795 654 811 664 q 770 624 779 643 q 761 574 761 605 l 761 -173 q 770 -219 761 -202 q 794 -245 779 -237 q 830 -257 809 -254 q 873 -260 850 -260 l 898 -260 l 898 -334 l 412 -334 m 407 654 q 307 584 337 654 q 278 372 278 513 q 307 160 278 232 q 407 88 337 88 q 475 106 448 88 q 519 160 503 125 q 543 248 536 196 q 550 370 550 301 q 543 495 550 442 q 519 584 536 549 q 475 636 503 619 q 407 654 448 654 "},"˳":{"x_min":64,"x_max":398,"ha":463,"o":"m 398 -236 q 385 -301 398 -273 q 349 -348 372 -329 q 296 -377 326 -367 q 231 -387 265 -387 q 165 -377 196 -387 q 112 -348 135 -367 q 76 -301 89 -329 q 64 -236 64 -273 q 76 -171 64 -199 q 112 -123 89 -142 q 165 -94 135 -104 q 231 -85 196 -85 q 296 -94 265 -85 q 349 -123 326 -104 q 385 -171 372 -142 q 398 -236 398 -199 m 313 -236 q 306 -201 313 -215 q 289 -178 300 -187 q 262 -165 277 -169 q 231 -161 247 -161 q 199 -165 214 -161 q 172 -178 184 -169 q 155 -201 161 -187 q 148 -236 148 -215 q 155 -270 148 -256 q 172 -293 161 -284 q 199 -306 184 -302 q 231 -311 214 -311 q 262 -306 247 -311 q 289 -293 277 -302 q 306 -270 300 -284 q 313 -236 313 -256 "},"ή":{"x_min":93.0625,"x_max":809.453125,"ha":913,"o":"m 129 470 q 125 543 129 504 q 117 620 122 582 q 105 691 112 658 q 93 745 99 724 l 276 745 q 300 685 291 716 q 318 617 310 654 l 323 617 q 358 671 339 645 q 404 717 378 697 q 464 749 430 737 q 541 762 497 762 q 648 746 602 762 q 723 697 693 730 q 768 612 753 664 q 783 488 783 560 l 783 -95 q 785 -157 783 -122 q 790 -227 787 -192 q 798 -291 793 -262 q 809 -334 803 -320 l 609 -334 q 592 -292 599 -321 q 580 -228 585 -264 q 574 -155 576 -193 q 572 -87 572 -118 l 572 471 q 543 600 572 557 q 467 643 514 643 q 407 626 431 643 q 368 575 383 608 q 347 495 353 542 q 340 388 340 448 l 340 0 l 129 0 l 129 470 m 390 860 q 404 907 396 881 q 419 960 411 932 q 433 1014 426 987 q 443 1064 439 1041 l 633 1064 l 633 1050 q 606 1001 623 1028 q 570 947 590 974 q 528 892 550 919 q 486 842 506 865 l 390 842 l 390 860 "},"Ж":{"x_min":0,"x_max":1445,"ha":1445,"o":"m 627 833 q 621 878 627 861 q 606 903 616 895 q 583 915 596 912 q 555 918 570 918 l 497 918 l 497 992 l 949 992 l 949 918 l 890 918 q 862 915 875 918 q 839 903 848 912 q 824 875 829 893 q 818 828 818 858 l 818 538 q 857 540 841 538 q 887 546 874 542 q 911 558 901 550 q 933 577 922 566 q 983 647 952 597 q 1051 773 1014 697 q 1109 877 1082 834 q 1164 947 1135 920 q 1226 987 1193 974 q 1302 1000 1260 1000 q 1352 993 1331 1000 q 1386 975 1373 987 q 1405 947 1399 963 q 1412 912 1412 931 q 1393 842 1412 869 q 1343 809 1375 815 q 1334 836 1340 823 q 1319 859 1328 849 q 1297 875 1310 869 q 1266 881 1283 881 q 1227 872 1245 881 q 1194 846 1210 864 q 1160 798 1177 827 q 1121 727 1143 769 q 1080 652 1098 684 q 1047 597 1063 620 q 1016 558 1031 575 q 985 530 1002 542 q 1043 521 1015 530 q 1095 494 1071 511 q 1140 453 1120 477 q 1177 400 1160 429 l 1289 198 q 1325 141 1307 165 q 1359 103 1342 118 q 1396 81 1377 88 q 1436 73 1415 73 l 1445 73 l 1445 0 l 1346 0 q 1255 8 1293 0 q 1190 33 1217 16 q 1144 75 1164 50 q 1107 132 1124 99 l 975 372 q 942 419 958 403 q 907 445 926 436 q 867 456 888 454 q 818 458 845 458 l 818 164 q 824 116 818 134 q 839 89 829 99 q 862 76 848 80 q 890 73 875 73 l 949 73 l 949 0 l 497 0 l 497 73 l 555 73 q 583 76 570 73 q 606 87 596 79 q 621 112 616 96 q 627 156 627 129 l 627 458 q 578 456 599 458 q 537 445 556 454 q 502 419 519 436 q 469 372 486 403 l 337 132 q 300 75 320 99 q 254 33 280 50 q 189 8 227 16 q 98 0 152 0 l 0 0 l 0 73 l 8 73 q 48 81 29 73 q 85 103 67 88 q 119 141 102 118 q 155 198 137 165 l 268 400 q 304 453 284 429 q 349 494 325 477 q 401 521 373 511 q 460 530 429 530 q 428 558 443 542 q 397 597 413 575 q 364 652 381 620 q 323 727 346 684 q 284 798 301 769 q 250 846 267 827 q 217 872 234 864 q 178 881 200 881 q 148 875 161 881 q 125 859 134 869 q 110 836 116 849 q 101 809 104 823 q 51 842 69 815 q 33 912 33 869 q 39 947 33 931 q 58 975 45 963 q 92 993 71 987 q 142 1000 113 1000 q 218 987 185 1000 q 280 947 251 974 q 336 877 309 920 q 393 773 362 834 q 461 647 430 697 q 511 577 492 597 q 533 558 522 566 q 557 546 544 550 q 587 540 570 542 q 627 538 603 538 l 627 833 "},"®":{"x_min":77,"x_max":1097,"ha":1174,"o":"m 323 242 l 342 242 q 367 244 355 242 q 389 251 380 246 q 404 265 399 256 q 410 291 410 275 l 410 698 q 404 724 410 714 q 389 739 399 734 q 367 745 380 744 q 342 747 355 747 l 323 747 l 323 796 l 573 796 q 812 630 812 796 q 801 572 812 597 q 772 528 790 547 q 732 497 755 510 q 686 477 709 485 l 809 279 q 822 260 816 267 q 837 249 828 253 q 858 244 846 245 q 887 242 870 242 l 887 196 l 740 196 l 587 454 l 514 454 l 514 291 q 521 265 515 275 q 535 251 526 256 q 556 244 544 246 q 582 242 568 242 l 601 242 l 601 196 l 323 196 l 323 242 m 514 507 l 572 507 q 634 514 609 507 q 674 536 659 521 q 695 574 689 551 q 702 629 702 597 q 694 681 702 659 q 671 716 687 703 q 630 735 655 729 q 568 741 604 741 l 514 741 l 514 507 m 77 495 q 95 631 77 566 q 146 753 113 696 q 225 857 179 810 q 328 937 272 903 q 450 988 385 970 q 585 1007 515 1007 q 721 988 656 1007 q 843 937 787 970 q 947 857 900 903 q 1027 753 993 810 q 1078 631 1060 696 q 1097 495 1097 566 q 1078 359 1097 424 q 1027 238 1060 294 q 947 134 993 181 q 843 55 900 88 q 721 3 787 21 q 585 -14 656 -14 q 450 3 515 -14 q 328 55 385 21 q 225 134 272 88 q 146 238 179 181 q 95 359 113 294 q 77 495 77 424 m 152 495 q 168 380 152 435 q 212 277 184 325 q 280 189 240 228 q 367 121 319 149 q 471 77 415 93 q 585 61 526 61 q 701 77 646 61 q 805 121 757 93 q 893 189 853 149 q 961 277 932 228 q 1004 380 989 325 q 1020 495 1020 435 q 1004 610 1020 555 q 961 714 989 666 q 893 803 932 763 q 805 871 853 842 q 701 914 757 899 q 585 930 646 930 q 471 914 526 930 q 367 871 415 899 q 280 803 319 842 q 212 714 240 763 q 168 611 184 666 q 152 495 152 555 "},"Н":{"x_min":38.453125,"x_max":1097.859375,"ha":1137,"o":"m 618 0 l 618 73 l 678 73 q 705 76 692 73 q 728 89 718 80 q 743 116 738 99 q 749 164 749 134 l 749 475 l 387 475 l 387 164 q 392 116 387 134 q 408 89 398 99 q 430 76 417 80 q 458 73 443 73 l 517 73 l 517 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 89 137 80 q 162 116 157 99 q 168 164 168 134 l 168 833 q 162 877 168 861 q 146 903 156 894 q 123 915 136 911 q 96 918 111 918 l 38 918 l 38 992 l 517 992 l 517 918 l 458 918 q 430 915 443 918 q 408 902 417 911 q 392 875 398 892 q 387 827 387 857 l 387 560 l 749 560 l 749 827 q 743 875 749 857 q 728 902 738 892 q 705 915 718 911 q 678 918 692 918 l 618 918 l 618 992 l 1097 992 l 1097 918 l 1039 918 q 1012 915 1025 918 q 989 902 999 911 q 974 875 979 892 q 969 827 969 857 l 969 156 q 974 112 969 129 q 990 87 980 96 q 1012 76 1000 79 q 1039 73 1025 73 l 1097 73 l 1097 0 l 618 0 "},"Ε":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 "},"₧":{"x_min":37.734375,"x_max":1195,"ha":1249,"o":"m 37 0 l 37 73 l 56 73 q 100 77 79 73 q 136 91 121 80 q 160 121 151 101 q 170 173 170 141 l 170 823 q 160 872 170 854 q 136 901 151 891 q 99 915 120 911 q 56 918 79 918 l 37 918 l 37 992 l 455 992 q 613 971 545 992 q 724 914 680 951 q 790 823 768 876 q 812 701 812 769 q 790 581 812 639 q 723 478 769 523 q 600 406 676 433 q 414 379 524 379 l 366 379 l 366 166 q 375 117 366 136 q 399 89 384 99 q 436 76 415 80 q 479 73 456 73 l 525 73 l 525 0 l 37 0 m 366 460 l 395 460 q 491 472 451 460 q 557 511 531 484 q 594 584 582 539 q 606 696 606 630 q 595 795 606 754 q 562 861 585 835 q 502 898 539 886 q 412 909 465 909 l 366 909 l 366 460 m 1120 74 q 1162 77 1145 74 q 1195 84 1178 80 l 1195 7 q 1141 -7 1173 -1 q 1060 -14 1109 -14 q 966 -2 1005 -14 q 903 33 927 8 q 867 100 879 58 q 856 201 856 141 l 856 425 l 770 425 l 770 489 q 829 506 800 489 q 882 551 858 523 q 924 613 906 578 q 951 684 942 648 l 1029 684 l 1029 513 l 1182 513 l 1182 425 l 1029 425 l 1029 212 q 1050 107 1029 140 q 1120 74 1071 74 "},"л":{"x_min":0,"x_max":894.296875,"ha":918,"o":"m 319 584 q 310 629 319 612 q 287 655 302 646 q 253 668 272 664 q 210 671 233 671 l 192 671 l 192 745 l 894 745 l 894 671 l 877 671 q 845 668 862 671 q 813 655 827 664 q 788 628 798 645 q 779 580 779 610 l 779 164 q 788 116 779 134 q 813 89 798 99 q 845 76 827 80 q 877 73 862 73 l 894 73 l 894 0 l 459 0 l 459 73 l 475 73 q 506 76 490 73 q 536 89 522 80 q 558 116 549 99 q 568 164 568 134 l 568 665 l 410 665 q 376 422 397 536 q 328 214 355 308 q 289 107 310 150 q 243 38 268 64 q 186 1 218 12 q 116 -10 155 -10 q 30 15 60 -10 q 0 86 0 40 q 7 127 0 110 q 25 155 14 143 q 50 171 36 166 q 76 177 63 177 q 91 134 76 152 q 134 116 107 116 q 167 120 151 116 q 199 143 182 124 q 233 199 216 161 q 267 302 249 236 q 284 368 275 330 q 301 446 293 406 q 313 522 308 485 q 319 584 319 559 "},"σ":{"x_min":65,"x_max":874.703125,"ha":896,"o":"m 794 307 q 770 173 794 233 q 701 72 747 114 q 586 8 655 30 q 425 -14 517 -14 q 276 10 343 -14 q 162 82 210 35 q 90 195 115 128 q 65 347 65 262 q 81 486 65 425 q 129 590 98 546 q 201 663 159 634 q 293 711 243 693 q 400 737 343 729 q 516 745 456 745 l 874 745 l 874 587 l 646 587 q 695 545 669 570 q 743 486 721 520 q 779 407 765 451 q 794 307 794 362 m 279 336 q 289 226 279 275 q 320 142 300 177 q 369 89 340 108 q 437 71 399 71 q 541 130 504 71 q 577 312 577 189 q 571 411 577 367 q 555 488 564 454 q 534 546 545 521 q 513 587 523 571 l 492 587 q 409 574 448 587 q 342 532 370 561 q 296 454 313 502 q 279 336 279 406 "},"θ":{"x_min":65,"x_max":786,"ha":851,"o":"m 786 524 q 763 299 786 399 q 697 129 741 199 q 584 22 652 59 q 426 -14 517 -14 q 262 23 330 -14 q 150 130 194 60 q 85 299 106 199 q 65 525 65 399 q 85 750 65 651 q 150 918 106 850 q 263 1024 194 987 q 427 1061 332 1061 q 585 1024 518 1061 q 697 918 652 987 q 763 750 741 850 q 786 524 786 650 m 426 73 q 489 101 463 73 q 534 184 516 130 q 561 315 552 237 q 571 491 570 392 l 280 491 q 290 315 281 392 q 316 184 298 237 q 362 101 334 130 q 426 73 389 73 m 427 972 q 365 946 391 972 q 320 870 338 919 q 292 746 302 820 q 280 580 282 673 l 571 580 q 560 746 569 673 q 533 870 550 820 q 489 946 515 919 q 427 972 463 972 "}," ":{"x_min":0,"x_max":0,"ha":361},"∑":{"x_min":52,"x_max":968,"ha":1022,"o":"m 763 -154 q 817 -144 796 -154 q 851 -115 838 -133 q 871 -72 864 -97 q 881 -19 878 -48 l 888 22 l 968 22 l 961 -334 l 52 -334 l 52 -226 l 479 330 l 82 855 l 82 992 l 900 992 l 907 733 l 825 733 l 818 793 q 807 841 815 820 q 784 877 799 863 q 746 899 769 892 q 690 907 723 907 l 269 907 l 619 444 l 619 368 l 216 -154 l 763 -154 "},"Ώ":{"x_min":-52,"x_max":1104,"ha":1165,"o":"m 132 625 q 161 782 132 712 q 249 902 190 852 q 397 979 308 952 q 606 1007 486 1007 q 806 979 719 1007 q 954 902 894 952 q 1045 782 1014 852 q 1076 625 1076 712 q 990 386 1076 478 q 736 265 904 295 l 733 148 l 872 148 q 933 153 908 148 q 974 168 958 158 q 1001 195 991 179 q 1016 234 1011 211 l 1027 280 l 1104 280 l 1093 0 l 646 0 l 655 335 q 739 363 704 341 q 795 423 773 386 q 825 510 816 460 q 835 625 835 561 q 823 748 835 694 q 783 840 810 802 q 712 897 756 877 q 605 916 668 916 q 496 897 541 916 q 424 840 451 877 q 383 748 396 802 q 370 625 370 694 q 380 510 370 561 q 411 423 390 460 q 467 363 433 386 q 551 335 502 341 l 561 0 l 113 0 l 104 278 l 180 278 l 191 231 q 205 192 196 208 q 231 165 215 176 q 273 150 248 155 q 334 145 298 145 l 474 145 l 470 267 q 217 388 302 296 q 132 625 132 479 m -52 788 q -37 835 -45 809 q -22 888 -30 861 q -8 943 -15 916 q 1 993 -2 969 l 191 993 l 191 978 q 164 930 181 957 q 128 875 148 903 q 86 820 108 847 q 44 770 64 793 l -52 770 l -52 788 "},"ẃ":{"x_min":-4.40625,"x_max":1190.078125,"ha":1189,"o":"m 686 737 l 821 327 q 846 242 838 277 q 858 181 853 207 l 862 181 q 868 215 865 199 q 876 247 871 230 q 886 284 880 264 q 899 330 891 304 l 960 533 q 970 571 966 550 q 973 603 973 591 q 951 654 973 638 q 881 671 928 671 l 871 671 l 871 745 l 1190 745 l 1190 671 l 1172 671 q 1137 667 1152 671 q 1110 651 1122 662 q 1089 617 1099 639 q 1068 562 1078 596 l 888 0 l 739 0 l 587 461 l 427 0 l 276 0 l 98 597 q 81 633 90 619 q 61 656 72 648 q 34 667 49 664 q 0 671 20 671 l -4 671 l -4 745 l 402 745 l 402 671 l 384 671 q 321 659 342 671 q 300 612 300 647 q 304 584 300 601 q 312 553 308 568 l 363 372 q 376 320 370 347 q 388 269 382 294 q 398 221 393 244 q 405 181 402 199 l 409 181 q 425 253 415 216 q 454 341 436 290 l 595 737 l 686 737 m 539 860 q 572 905 553 879 q 609 958 590 931 q 645 1013 628 986 q 672 1064 661 1040 l 891 1064 l 891 1049 q 848 1004 878 1031 q 781 946 818 976 q 705 889 744 917 q 633 842 665 860 l 539 842 l 539 860 "},"+":{"x_min":90.453125,"x_max":686.609375,"ha":777,"o":"m 437 446 l 437 198 l 338 198 l 338 446 l 90 446 l 90 546 l 338 546 l 338 794 l 437 794 l 437 546 l 686 546 l 686 446 l 437 446 "},"Ë":{"x_min":38.453125,"x_max":863,"ha":907,"o":"m 388 84 l 666 84 q 702 92 687 84 q 728 114 717 100 q 745 148 739 128 q 755 190 752 167 l 766 256 l 863 256 l 852 0 l 38 0 l 38 73 l 96 73 q 124 76 111 73 q 147 87 137 79 q 162 112 157 96 q 168 156 168 129 l 168 828 q 162 876 168 858 q 147 903 157 893 q 125 915 138 912 q 96 918 112 918 l 38 918 l 38 992 l 809 992 l 815 736 l 718 736 l 711 801 q 685 880 705 852 q 622 907 665 907 l 388 907 l 388 560 l 718 560 l 718 476 l 388 476 l 388 84 m 242 1184 q 248 1224 242 1207 q 266 1251 255 1240 q 292 1265 277 1261 q 323 1270 307 1270 q 354 1265 340 1270 q 381 1251 369 1261 q 399 1224 392 1240 q 407 1184 407 1207 q 399 1144 407 1160 q 381 1117 392 1127 q 354 1102 369 1107 q 323 1098 340 1098 q 292 1102 307 1098 q 266 1117 277 1107 q 248 1144 255 1127 q 242 1184 242 1160 m 527 1184 q 533 1224 527 1207 q 552 1251 540 1240 q 578 1265 563 1261 q 610 1270 593 1270 q 640 1265 625 1270 q 666 1251 654 1261 q 684 1224 677 1240 q 692 1184 692 1207 q 684 1144 692 1160 q 666 1117 677 1127 q 640 1102 654 1107 q 610 1098 625 1098 q 578 1102 593 1098 q 552 1117 563 1107 q 533 1144 540 1127 q 527 1184 527 1160 "},"Š":{"x_min":41.203125,"x_max":745,"ha":814,"o":"m 366 -14 q 210 3 273 -14 q 110 49 148 21 q 57 111 73 76 q 41 179 41 146 q 54 240 41 215 q 89 280 67 264 q 139 302 111 295 q 198 309 168 309 q 212 204 198 249 q 252 129 227 159 q 312 83 277 99 q 388 68 347 68 q 461 80 429 68 q 515 112 493 91 q 549 160 538 132 q 561 219 561 187 q 546 282 561 254 q 503 333 532 309 q 431 377 474 356 q 329 423 387 399 q 206 485 256 453 q 126 553 156 516 q 82 632 95 590 q 69 726 69 675 q 94 841 69 790 q 166 930 120 893 q 273 986 211 966 q 409 1006 336 1006 q 542 993 486 1006 q 634 959 597 980 q 688 908 670 937 q 705 844 705 878 q 695 799 705 820 q 663 762 684 778 q 609 738 641 746 q 534 729 577 729 q 526 792 534 758 q 501 854 519 825 q 455 902 483 883 q 387 921 427 921 q 334 913 359 921 q 290 888 309 904 q 260 848 271 872 q 250 792 250 824 q 259 737 250 763 q 294 687 269 712 q 364 637 320 662 q 479 584 408 613 q 601 524 550 555 q 683 459 651 494 q 730 382 715 424 q 745 289 745 340 q 718 166 745 222 q 642 70 692 110 q 523 8 592 30 q 366 -14 453 -14 m 167 1293 l 263 1293 q 296 1265 277 1281 q 336 1233 316 1250 q 377 1199 357 1215 q 413 1167 397 1182 q 448 1199 428 1182 q 489 1233 468 1215 q 530 1265 510 1250 q 564 1293 550 1281 l 660 1293 l 660 1274 q 622 1229 643 1255 q 578 1176 600 1203 q 537 1121 556 1148 q 507 1071 518 1094 l 320 1071 q 290 1121 309 1094 q 249 1176 270 1148 q 205 1229 227 1203 q 167 1274 183 1255 l 167 1293 "}," ":{"x_min":0,"x_max":0,"ha":1389},"ð":{"x_min":65,"x_max":785,"ha":850,"o":"m 785 403 q 693 89 785 192 q 422 -14 601 -14 q 273 8 339 -14 q 161 76 207 30 q 89 191 114 122 q 65 353 65 260 q 87 515 65 446 q 151 629 109 583 q 257 698 194 675 q 400 721 319 721 q 486 710 446 721 q 551 683 525 699 q 534 728 544 706 q 511 772 525 750 q 479 816 498 794 q 433 860 460 838 l 237 760 l 237 850 l 360 914 q 287 948 326 935 q 197 969 247 960 l 197 1057 q 258 1047 222 1054 q 332 1027 294 1039 q 406 1000 370 1015 q 469 969 443 985 l 645 1058 l 645 965 l 547 916 q 644 821 600 875 q 719 702 688 767 q 767 562 750 637 q 785 403 785 487 m 280 352 q 288 231 280 283 q 313 144 296 179 q 358 91 330 109 q 426 73 386 73 q 493 91 466 73 q 538 144 521 109 q 563 231 555 179 q 571 352 571 283 q 563 476 571 423 q 538 563 555 528 q 493 615 521 598 q 425 632 465 632 q 358 615 385 632 q 313 564 330 598 q 288 477 296 530 q 280 352 280 425 "},"щ":{"x_min":23.703125,"x_max":1376,"ha":1403,"o":"m 494 745 l 888 745 l 888 671 l 885 671 q 854 667 871 671 q 825 655 838 664 q 802 628 811 645 q 793 580 793 610 l 793 79 l 1039 79 l 1039 580 q 1030 628 1039 610 q 1007 655 1021 645 q 978 667 994 664 q 948 671 962 671 l 945 671 l 945 745 l 1359 745 l 1359 671 l 1342 671 q 1310 668 1327 671 q 1278 655 1292 664 q 1253 628 1263 645 q 1244 580 1244 610 l 1244 152 q 1252 112 1244 128 q 1274 89 1260 97 q 1305 77 1288 80 q 1343 73 1323 74 l 1376 73 l 1376 -292 l 1279 -292 l 1272 -190 q 1256 -102 1269 -138 q 1226 -43 1244 -65 q 1186 -10 1208 -20 q 1141 0 1164 0 l 23 0 l 23 73 l 39 73 q 72 76 54 73 q 104 88 89 79 q 129 114 119 97 q 139 158 139 130 l 139 580 q 129 628 139 610 q 104 655 119 645 q 72 668 90 664 q 39 671 55 671 l 23 671 l 23 745 l 437 745 l 437 671 l 434 671 q 404 667 420 671 q 375 655 388 664 q 352 628 361 645 q 343 580 343 610 l 343 79 l 589 79 l 589 586 q 579 630 589 614 q 556 656 570 647 q 526 668 542 665 q 497 671 511 671 l 494 671 l 494 745 "},"℮":{"x_min":69,"x_max":789,"ha":860,"o":"m 429 -24 q 273 7 341 -24 q 161 92 206 39 q 92 215 115 146 q 69 359 69 284 q 83 480 69 426 q 124 577 98 534 q 185 651 150 620 q 259 702 219 682 q 343 733 299 723 q 429 743 386 743 q 571 716 506 743 q 685 639 637 689 q 761 518 734 589 q 789 358 789 447 l 227 358 l 227 117 q 264 86 242 101 q 312 60 286 71 q 368 41 338 48 q 429 34 398 34 q 518 45 479 34 q 590 76 558 56 q 648 126 622 96 q 697 193 674 155 l 746 165 q 693 92 721 126 q 628 31 665 58 q 542 -9 590 5 q 429 -24 493 -24 m 632 417 l 632 605 q 599 633 619 618 q 553 659 579 647 q 495 678 527 671 q 428 686 463 686 q 363 679 393 686 q 309 661 334 673 q 264 636 284 650 q 227 606 244 622 l 227 417 l 632 417 "},"Φ":{"x_min":41,"x_max":1139,"ha":1181,"o":"m 691 266 l 731 266 q 822 279 784 266 q 883 322 859 293 q 918 398 907 351 q 929 510 929 444 q 919 611 929 568 q 889 682 910 654 q 833 724 867 710 q 750 737 799 737 l 691 737 l 691 266 m 489 737 l 430 737 q 347 724 381 737 q 291 682 313 710 q 260 611 270 654 q 251 510 251 568 q 262 398 251 444 q 297 322 273 351 q 358 279 321 293 q 448 266 395 266 l 489 266 l 489 737 m 489 186 l 445 186 q 311 198 370 186 q 207 234 252 211 q 131 288 163 257 q 79 357 99 320 q 50 434 59 393 q 41 515 41 474 q 63 639 41 583 q 131 735 85 695 q 248 797 178 775 q 412 820 317 820 l 489 820 l 489 834 q 479 878 489 861 q 455 903 470 895 q 419 915 440 912 q 375 918 398 918 l 356 918 l 356 992 l 823 992 l 823 918 l 805 918 q 761 915 782 918 q 725 903 740 912 q 700 878 710 895 q 691 834 691 861 l 691 820 l 768 820 q 933 797 863 820 q 1048 735 1002 775 q 1116 639 1094 695 q 1139 515 1139 583 q 1129 434 1139 474 q 1100 357 1120 393 q 1049 288 1080 320 q 972 234 1017 257 q 868 198 927 211 q 734 186 809 186 l 691 186 l 691 158 q 700 114 691 130 q 725 88 710 97 q 761 76 740 79 q 805 73 782 73 l 823 73 l 823 0 l 356 0 l 356 73 l 375 73 q 419 76 398 73 q 455 88 440 79 q 479 114 470 97 q 489 158 489 130 l 489 186 "},"ş":{"x_min":41.765625,"x_max":623,"ha":678,"o":"m 321 -14 q 192 -1 245 -14 q 105 32 139 10 q 57 83 72 53 q 41 148 41 113 q 54 202 41 182 q 88 234 68 223 q 130 250 108 246 q 171 253 153 253 q 182 175 171 210 q 212 117 193 141 q 259 80 232 93 q 321 67 287 67 q 383 74 357 67 q 425 95 409 82 q 450 126 442 108 q 458 162 458 143 q 450 203 458 185 q 422 237 441 221 q 369 268 402 253 q 287 300 336 283 q 188 342 231 320 q 116 392 145 364 q 71 457 86 421 q 56 540 56 493 q 77 637 56 596 q 138 706 98 678 q 232 747 177 733 q 354 761 287 761 q 466 749 420 761 q 541 720 512 738 q 584 678 570 702 q 597 632 597 655 q 565 560 597 585 q 456 536 532 536 q 425 644 456 605 q 334 682 394 682 q 291 676 311 682 q 255 660 270 671 q 230 633 239 649 q 221 596 221 617 q 229 556 221 573 q 259 522 238 538 q 317 490 281 506 q 411 454 354 473 q 496 417 457 437 q 563 369 535 396 q 607 308 591 342 q 623 230 623 274 q 602 127 623 172 q 544 50 582 81 q 449 2 505 19 q 321 -14 393 -14 m 496 -175 q 481 -241 496 -211 q 441 -291 467 -270 q 379 -323 415 -312 q 299 -334 343 -334 q 272 -332 288 -334 q 240 -329 257 -331 q 207 -324 223 -327 q 178 -318 190 -321 l 178 -233 q 228 -241 203 -239 q 272 -244 253 -244 q 334 -230 312 -244 q 357 -180 357 -216 q 349 -147 357 -160 q 327 -126 342 -134 q 294 -115 313 -118 q 253 -110 275 -111 l 282 12 l 361 12 l 347 -47 q 408 -60 381 -50 q 455 -86 436 -70 q 485 -125 474 -102 q 496 -175 496 -148 "}," ":{"x_min":0,"x_max":0,"ha":777},"ı":{"x_min":23.703125,"x_max":465.234375,"ha":489,"o":"m 39 73 q 72 76 55 73 q 104 89 90 80 q 129 116 119 99 q 139 164 139 134 l 139 586 q 129 630 139 614 q 104 656 119 647 q 72 668 89 665 q 39 671 54 671 l 23 671 l 23 745 l 349 745 l 349 164 q 359 116 349 134 q 384 89 369 99 q 416 76 398 80 q 448 73 434 73 l 465 73 l 465 0 l 23 0 l 23 73 l 39 73 "},"ä":{"x_min":62,"x_max":786.859375,"ha":832,"o":"m 277 206 q 296 116 277 146 q 356 87 315 87 q 410 99 386 87 q 451 135 434 112 q 477 191 468 158 q 487 265 487 224 l 487 369 l 424 365 q 354 352 383 363 q 309 321 326 341 q 285 273 292 301 q 277 206 277 244 m 401 677 q 356 666 374 677 q 327 634 338 654 q 312 587 316 614 q 308 527 308 559 q 167 548 214 527 q 120 620 120 569 q 143 685 120 658 q 204 729 165 712 q 295 754 243 746 q 406 762 347 762 q 534 749 479 762 q 625 709 588 736 q 679 636 661 681 q 698 526 698 591 l 698 172 q 702 124 698 143 q 716 94 706 105 q 742 78 725 83 q 781 73 758 73 l 786 73 l 786 0 l 528 0 l 499 95 l 487 95 q 443 46 464 67 q 400 12 423 26 q 348 -7 377 -1 q 280 -14 319 -14 q 194 0 234 -14 q 125 41 154 13 q 78 111 95 69 q 62 212 62 154 q 139 379 62 325 q 373 438 217 434 l 487 443 l 487 519 q 484 583 487 554 q 472 633 481 612 q 446 665 464 654 q 401 677 429 677 m 189 955 q 195 995 189 978 q 213 1022 202 1011 q 239 1036 224 1032 q 270 1041 254 1041 q 301 1036 287 1041 q 328 1022 316 1032 q 346 995 339 1011 q 354 955 354 978 q 346 915 354 931 q 328 888 339 898 q 301 873 316 878 q 270 869 287 869 q 239 873 254 869 q 213 888 224 878 q 195 915 202 898 q 189 955 189 931 m 474 955 q 480 995 474 978 q 499 1022 487 1011 q 525 1036 510 1032 q 557 1041 540 1041 q 587 1036 572 1041 q 613 1022 601 1032 q 631 995 624 1011 q 639 955 639 978 q 631 915 639 931 q 613 888 624 898 q 587 873 601 878 q 557 869 572 869 q 525 873 540 869 q 499 888 510 878 q 480 915 487 898 q 474 955 474 931 "},"¹":{"x_min":65.015625,"x_max":479.40625,"ha":555,"o":"m 358 999 l 358 512 q 363 484 358 495 q 377 468 368 474 q 397 461 385 463 q 422 460 409 460 l 479 460 l 479 399 l 87 399 l 87 460 l 157 460 q 182 461 171 460 q 202 468 193 463 q 216 484 211 474 q 221 512 221 495 l 221 906 q 163 844 188 868 q 112 821 137 821 q 78 840 92 821 q 65 889 65 860 q 120 909 90 895 q 193 952 151 923 l 255 999 l 358 999 "},"W":{"x_min":0.34375,"x_max":1481.578125,"ha":1482,"o":"m 838 982 l 1030 451 q 1053 385 1042 419 q 1072 321 1063 352 q 1088 265 1081 290 q 1098 221 1095 239 q 1110 276 1103 246 q 1123 340 1116 307 q 1138 409 1130 374 q 1154 478 1145 445 l 1227 778 q 1231 797 1229 786 q 1236 818 1234 808 q 1239 838 1238 829 q 1240 852 1240 847 q 1218 903 1240 888 q 1151 918 1197 918 l 1119 918 l 1119 992 l 1481 992 l 1481 918 l 1455 918 q 1419 914 1434 918 q 1391 898 1403 910 q 1369 865 1379 886 q 1350 810 1359 844 l 1134 0 l 976 0 l 743 652 l 543 0 l 371 0 l 117 844 q 102 880 110 866 q 81 903 93 895 q 54 915 69 911 q 18 918 39 918 l 0 918 l 0 992 l 464 992 l 464 918 l 432 918 q 369 902 390 918 q 348 851 348 886 q 353 817 348 840 q 363 776 357 795 l 455 455 q 471 398 463 429 q 487 336 480 367 q 501 275 495 304 q 510 223 507 246 q 530 307 519 268 q 554 387 542 346 l 737 982 l 838 982 "},"λ":{"x_min":-0.25,"x_max":787,"ha":791,"o":"m 389 750 q 355 849 373 808 q 317 914 337 889 q 274 951 297 940 q 223 962 251 962 q 183 957 201 962 q 151 943 165 951 q 126 924 137 935 q 106 903 115 913 q 88 934 96 916 q 80 977 80 951 q 90 1016 80 999 q 117 1045 100 1034 q 158 1063 134 1057 q 210 1070 182 1070 q 307 1050 265 1070 q 381 993 348 1031 q 437 899 413 955 q 483 770 462 843 l 610 315 q 652 197 631 244 q 694 123 673 150 q 737 84 715 95 q 780 73 759 73 l 787 73 l 787 0 l 755 0 q 677 7 711 0 q 617 35 643 14 q 569 99 590 57 q 530 208 547 140 q 478 412 497 333 q 458 514 460 491 l 454 514 q 442 472 450 497 q 423 419 434 447 q 401 363 413 391 q 377 312 388 335 l 222 0 l 0 0 l 389 750 "},">":{"x_min":90,"x_max":687,"ha":777,"o":"m 90 145 l 90 254 l 538 496 l 90 740 l 90 850 l 687 525 l 687 468 l 90 145 "},"τ":{"x_min":28,"x_max":687.96875,"ha":732,"o":"m 687 565 l 433 565 q 410 357 418 444 q 403 209 403 271 q 425 125 403 152 q 481 97 447 97 q 537 102 512 97 q 584 114 563 107 l 584 19 q 524 -5 559 3 q 437 -14 488 -14 q 306 35 348 -14 q 265 173 265 84 q 270 258 265 214 q 285 350 275 302 q 308 451 295 398 q 338 565 321 505 l 213 565 q 161 556 183 565 q 127 531 140 547 q 108 493 114 514 q 101 447 101 471 l 28 447 q 45 586 28 529 q 91 678 63 643 q 154 729 119 713 q 222 745 188 745 l 687 745 l 687 565 "},"Ų":{"x_min":22.78125,"x_max":1015.21875,"ha":1038,"o":"m 1015 918 l 955 918 q 928 915 941 918 q 905 903 915 912 q 890 875 895 893 q 885 828 885 858 l 885 286 q 865 160 885 216 q 802 66 845 104 q 694 6 760 27 q 537 -14 628 -14 q 375 3 447 -14 q 254 58 304 20 q 179 156 205 96 q 153 302 153 216 l 153 833 q 147 878 153 861 q 131 903 141 894 q 109 915 121 912 q 82 918 96 918 l 22 918 l 22 992 l 501 992 l 501 918 l 443 918 q 416 915 429 918 q 393 903 403 912 q 378 875 383 893 q 372 828 372 858 l 372 291 q 387 193 372 233 q 428 129 401 153 q 494 94 456 105 q 579 84 531 84 q 662 96 625 84 q 726 133 699 108 q 766 197 752 158 q 780 288 780 235 l 780 833 q 775 878 780 861 q 759 903 769 894 q 737 915 750 912 q 710 918 724 918 l 651 918 l 651 992 l 1015 992 l 1015 918 m 396 -180 q 409 -118 396 -147 q 446 -65 423 -89 q 498 -24 469 -41 q 560 0 528 -7 l 667 0 q 622 -20 645 -6 q 580 -53 599 -33 q 549 -100 562 -74 q 537 -160 537 -127 q 544 -193 537 -179 q 564 -215 551 -207 q 595 -229 577 -224 q 633 -233 612 -233 q 673 -230 652 -233 q 721 -222 695 -228 l 721 -311 q 694 -321 710 -317 q 661 -327 678 -325 q 629 -332 645 -330 q 602 -334 613 -334 q 448 -297 501 -334 q 396 -180 396 -260 "},"Ŵ":{"x_min":0.34375,"x_max":1481.578125,"ha":1482,"o":"m 838 982 l 1030 451 q 1053 385 1042 419 q 1072 321 1063 352 q 1088 265 1081 290 q 1098 221 1095 239 q 1110 276 1103 246 q 1123 340 1116 307 q 1138 409 1130 374 q 1154 478 1145 445 l 1227 778 q 1231 797 1229 786 q 1236 818 1234 808 q 1239 838 1238 829 q 1240 852 1240 847 q 1218 903 1240 888 q 1151 918 1197 918 l 1119 918 l 1119 992 l 1481 992 l 1481 918 l 1455 918 q 1419 914 1434 918 q 1391 898 1403 910 q 1369 865 1379 886 q 1350 810 1359 844 l 1134 0 l 976 0 l 743 652 l 543 0 l 371 0 l 117 844 q 102 880 110 866 q 81 903 93 895 q 54 915 69 911 q 18 918 39 918 l 0 918 l 0 992 l 464 992 l 464 918 l 432 918 q 369 902 390 918 q 348 851 348 886 q 353 817 348 840 q 363 776 357 795 l 455 455 q 471 398 463 429 q 487 336 480 367 q 501 275 495 304 q 510 223 507 246 q 530 307 519 268 q 554 387 542 346 l 737 982 l 838 982 m 537 1089 q 575 1134 553 1108 q 619 1187 597 1160 q 660 1242 640 1215 q 690 1293 679 1269 l 877 1293 q 907 1242 888 1269 q 948 1187 926 1215 q 992 1134 970 1160 q 1030 1089 1013 1108 l 1030 1071 l 934 1071 q 900 1098 920 1082 q 859 1130 880 1113 q 818 1164 838 1147 q 783 1195 798 1181 q 747 1164 767 1181 q 706 1130 727 1147 q 666 1098 686 1113 q 633 1071 647 1082 l 537 1071 l 537 1089 "},"‛":{"x_min":78,"x_max":326.34375,"ha":389,"o":"m 78 839 q 112 951 78 910 q 205 992 146 992 q 277 967 248 992 q 306 896 306 943 q 298 850 306 868 q 279 820 291 832 q 255 800 267 807 q 230 784 242 792 q 211 769 219 777 q 204 747 204 761 q 211 711 204 727 q 235 684 219 696 q 273 660 250 671 q 326 638 295 649 l 326 567 q 211 613 258 585 q 134 676 164 641 q 91 753 105 712 q 78 839 78 795 "},"Ð":{"x_min":38.453125,"x_max":988,"ha":1065,"o":"m 988 514 q 956 305 988 400 q 863 143 925 211 q 709 37 801 75 q 496 0 617 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 476 l 52 476 l 52 561 l 168 561 l 168 833 q 162 878 168 861 q 147 903 157 894 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 496 992 q 703 961 611 992 q 857 871 794 931 q 954 721 920 811 q 988 514 988 632 m 753 514 q 680 810 753 713 q 466 907 607 907 l 387 907 l 387 561 l 560 561 l 560 476 l 387 476 l 387 86 l 464 86 q 590 115 536 86 q 680 200 644 145 q 735 335 716 256 q 753 514 753 414 "},"Λ":{"x_min":0.390625,"x_max":969.6875,"ha":970,"o":"m 0 73 l 66 73 q 83 77 76 73 q 98 92 91 81 q 114 123 106 103 q 134 175 123 143 l 416 992 l 555 992 l 851 140 q 868 107 857 120 q 890 87 878 94 q 914 76 902 80 q 937 73 926 73 l 969 73 l 969 0 l 511 0 l 511 73 l 574 73 q 594 76 585 73 q 611 83 604 78 q 624 97 619 88 q 629 119 629 106 q 625 150 629 132 q 616 179 621 167 l 474 607 q 464 643 470 622 q 452 688 457 665 q 442 733 447 711 q 436 775 438 756 q 429 744 434 764 q 417 700 424 724 q 403 654 411 677 q 390 611 396 630 l 247 189 q 242 172 245 181 q 236 153 239 162 q 232 135 234 143 q 230 120 230 126 q 246 85 230 97 q 286 73 261 73 l 358 73 l 358 0 l 0 0 l 0 73 "},"·":{"x_min":97,"x_max":325,"ha":423,"o":"m 97 493 q 105 546 97 524 q 129 580 114 567 q 166 598 145 593 q 211 604 187 604 q 254 598 234 604 q 291 580 275 593 q 315 546 306 567 q 325 493 325 524 q 315 440 325 461 q 291 406 306 419 q 254 387 275 393 q 211 382 234 382 q 166 387 187 382 q 129 406 145 393 q 105 440 114 419 q 97 493 97 461 "},"Х":{"x_min":13.71875,"x_max":1003.546875,"ha":1017,"o":"m 727 878 q 720 898 727 890 q 704 910 714 906 q 679 917 693 915 q 649 918 665 918 l 645 918 l 645 992 l 970 992 l 970 918 l 957 918 q 921 913 937 918 q 888 896 904 908 q 856 865 872 884 q 820 818 840 846 l 618 543 l 874 147 q 930 89 901 104 q 985 73 959 73 l 1003 73 l 1003 0 l 545 0 l 545 73 l 551 73 q 635 119 635 73 q 633 134 635 127 q 627 152 632 142 q 613 177 622 162 q 588 215 604 192 l 461 408 l 311 205 q 287 165 298 187 q 275 120 275 142 q 294 85 275 97 q 359 73 313 73 l 364 73 l 364 0 l 13 0 l 13 73 l 22 73 q 66 80 47 73 q 102 100 85 87 q 134 130 118 112 q 167 170 150 148 l 410 487 l 181 844 q 158 877 169 863 q 133 900 147 890 q 102 914 119 909 q 61 918 85 918 l 43 918 l 43 992 l 503 992 l 503 918 l 499 918 q 459 915 475 918 q 433 906 443 912 q 420 893 424 901 q 417 878 417 886 q 427 842 417 863 q 453 796 437 820 l 568 624 l 689 793 q 714 835 701 812 q 727 878 727 859 "},"Υ":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 "},"r":{"x_min":27.78125,"x_max":705,"ha":726,"o":"m 491 0 l 27 0 l 27 73 l 31 73 q 75 77 55 73 q 109 91 94 80 q 131 121 123 101 q 139 173 139 141 l 139 576 q 131 625 139 607 q 111 654 124 644 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 315 745 l 343 636 l 349 636 q 379 690 363 667 q 418 729 396 714 q 472 753 441 745 q 545 761 503 761 q 666 732 627 761 q 705 648 705 703 q 658 549 705 584 q 528 514 612 514 q 525 564 528 542 q 514 600 522 586 q 493 621 507 614 q 460 629 480 629 q 418 617 436 629 q 389 585 401 605 q 369 541 377 566 q 357 492 361 517 q 351 445 352 468 q 349 406 349 423 l 349 166 q 357 117 349 136 q 377 89 364 99 q 408 76 390 80 q 446 73 426 73 l 491 73 l 491 0 "},"ж":{"x_min":0,"x_max":1280,"ha":1280,"o":"m 440 73 l 442 73 q 475 76 458 73 q 507 89 493 80 q 532 116 522 99 q 542 164 542 134 l 542 351 q 503 348 520 351 q 473 335 487 345 q 446 309 459 326 q 417 263 433 292 l 347 132 q 297 62 324 88 q 236 22 270 36 q 159 4 202 8 q 58 0 115 0 l 0 0 l 0 73 l 4 73 q 45 77 27 73 q 79 91 63 81 q 110 120 95 101 q 141 166 124 138 l 218 297 q 257 350 236 328 q 299 385 277 371 q 343 407 320 400 q 388 417 366 415 q 366 438 377 427 q 343 464 355 449 q 316 499 331 479 q 284 546 302 519 q 250 593 265 573 q 222 626 235 613 q 196 645 208 639 q 172 651 184 651 q 125 632 141 651 q 103 580 108 612 q 71 588 86 582 q 45 606 56 595 q 27 633 33 618 q 21 668 21 649 q 26 699 21 684 q 46 726 32 715 q 83 745 60 738 q 140 753 105 753 q 211 741 181 753 q 264 710 240 730 q 307 660 287 689 q 351 594 328 631 q 407 508 385 541 q 445 458 429 475 q 482 435 461 442 q 542 428 503 428 l 542 580 q 532 628 542 610 q 507 655 522 645 q 475 668 493 664 q 442 671 458 671 l 440 671 l 440 745 l 833 745 l 833 671 l 830 671 q 800 668 816 671 q 770 655 784 664 q 748 628 756 645 q 739 580 739 610 l 739 428 q 798 435 777 428 q 834 458 819 442 q 873 508 851 475 q 929 594 894 541 q 972 660 952 631 q 1016 710 992 689 q 1069 741 1040 730 q 1139 753 1099 753 q 1197 745 1174 753 q 1234 726 1220 738 q 1253 699 1248 715 q 1259 668 1259 684 q 1252 633 1259 649 q 1234 606 1246 618 q 1208 588 1223 595 q 1177 580 1193 582 q 1155 632 1172 612 q 1107 651 1138 651 q 1083 645 1095 651 q 1058 626 1071 639 q 1029 593 1044 613 q 995 546 1014 573 q 963 499 977 519 q 937 464 950 479 q 914 438 925 449 q 891 417 903 427 q 936 407 914 415 q 981 385 959 400 q 1023 350 1002 371 q 1062 297 1044 328 l 1138 166 q 1170 120 1155 138 q 1200 91 1185 101 q 1234 77 1216 81 q 1275 73 1252 73 l 1280 73 l 1280 0 l 1221 0 q 1121 4 1164 0 q 1043 22 1077 8 q 983 62 1009 36 q 933 132 956 88 l 862 263 q 834 309 847 292 q 807 335 821 326 q 777 348 793 345 q 739 351 761 351 l 739 164 q 748 116 739 134 q 770 89 756 99 q 800 76 784 80 q 830 73 816 73 l 833 73 l 833 0 l 440 0 l 440 73 "},"Ø":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 341 21 429 -14 l 299 -56 l 201 -56 l 265 61 q 123 238 170 127 q 77 498 77 350 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 656 996 606 1007 q 752 967 707 986 l 795 1048 l 892 1048 l 827 927 q 967 752 919 862 q 1016 496 1016 642 m 310 496 q 319 340 310 410 q 350 219 329 271 l 692 858 q 630 901 666 886 q 548 916 594 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 782 496 q 773 651 782 583 q 744 773 763 720 l 401 133 q 464 90 428 104 q 547 76 500 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 "},"Ỳ":{"x_min":0.34375,"x_max":962.5625,"ha":962,"o":"m 228 0 l 228 73 l 293 73 q 324 75 310 73 q 350 86 339 77 q 367 111 361 94 q 374 157 374 128 l 374 351 l 117 844 q 97 879 106 865 q 77 902 88 893 q 52 914 66 910 q 18 918 39 918 l 0 918 l 0 992 l 465 992 l 465 918 l 441 918 q 379 901 399 918 q 358 856 358 884 q 364 817 358 838 q 379 779 371 797 l 482 575 q 518 496 504 530 q 543 430 532 462 q 576 510 557 467 q 618 600 595 553 l 698 766 q 718 817 713 797 q 722 850 722 838 q 699 902 722 886 q 630 918 677 918 l 599 918 l 599 992 l 962 992 l 962 918 l 936 918 q 905 913 918 918 q 882 897 893 909 q 859 863 871 884 q 831 810 847 842 l 595 349 l 595 159 q 601 112 595 129 q 617 86 607 95 q 642 75 628 77 q 672 73 656 73 l 740 73 l 740 0 l 228 0 m 521 1071 q 449 1118 489 1089 q 372 1175 409 1146 q 305 1233 335 1205 q 263 1278 275 1260 l 263 1293 l 480 1293 q 508 1242 491 1269 q 544 1187 525 1215 q 582 1134 562 1160 q 616 1089 601 1108 l 616 1071 l 521 1071 "},"÷":{"x_min":90,"x_max":687,"ha":777,"o":"m 311 759 q 316 799 311 782 q 332 825 322 815 q 357 839 343 835 q 388 844 371 844 q 418 839 404 844 q 443 825 432 835 q 459 799 453 815 q 466 759 466 782 q 459 719 466 736 q 443 693 453 703 q 418 678 432 683 q 388 674 404 674 q 333 693 355 674 q 311 759 311 712 m 311 233 q 316 273 311 257 q 332 299 322 290 q 357 314 343 309 q 388 318 371 318 q 418 314 404 318 q 443 299 432 309 q 459 273 453 290 q 466 233 466 257 q 459 194 466 210 q 443 167 453 178 q 418 153 432 157 q 388 149 404 149 q 333 167 355 149 q 311 233 311 186 m 687 446 l 90 446 l 90 546 l 687 546 l 687 446 "},"с":{"x_min":65,"x_max":681,"ha":732,"o":"m 409 -14 q 269 5 332 -14 q 160 70 206 25 q 90 189 115 116 q 65 369 65 262 q 91 557 65 481 q 163 677 117 632 q 271 742 208 723 q 405 762 333 762 q 524 750 472 762 q 610 719 575 739 q 663 673 645 700 q 681 616 681 646 q 673 572 681 593 q 645 534 665 551 q 590 508 625 518 q 501 498 555 498 q 496 566 501 534 q 482 623 492 599 q 454 662 472 648 q 410 677 437 677 q 356 662 380 677 q 314 612 332 648 q 288 518 297 577 q 279 370 279 459 q 317 159 279 229 q 444 89 356 89 q 511 98 480 89 q 569 121 543 106 q 614 157 594 137 q 645 202 633 178 q 670 174 662 192 q 679 138 679 157 q 663 85 679 112 q 614 35 647 57 q 531 0 581 13 q 409 -14 480 -14 "},"h":{"x_min":23.703125,"x_max":889.65625,"ha":926,"o":"m 581 0 l 581 456 q 575 536 581 501 q 556 595 569 571 q 521 631 543 618 q 470 643 500 643 q 412 626 435 643 q 375 579 389 608 q 356 510 362 549 q 349 429 349 471 l 349 164 q 357 117 349 134 q 377 89 364 99 q 408 76 389 79 q 450 73 427 73 l 454 73 l 454 0 l 27 0 l 27 73 l 30 73 q 73 76 54 73 q 108 90 93 80 q 130 119 122 100 q 139 169 139 138 l 139 897 q 129 941 139 924 q 104 967 119 958 q 72 979 89 976 q 39 981 54 981 l 23 981 l 23 1055 l 349 1055 l 349 826 q 348 768 349 799 q 344 710 346 736 q 339 649 341 679 l 351 649 q 395 711 372 688 q 445 744 418 733 q 501 758 471 755 q 563 762 530 762 q 659 746 616 762 q 731 698 701 730 q 776 615 760 665 q 792 494 792 564 l 792 172 q 797 120 792 139 q 815 90 803 101 q 844 77 826 80 q 885 73 861 73 l 889 73 l 889 0 l 581 0 "},"f":{"x_min":26.140625,"x_max":671,"ha":566,"o":"m 26 0 l 26 73 l 56 73 q 88 76 71 73 q 120 89 106 80 q 145 116 135 99 q 155 164 155 134 l 155 650 l 31 650 l 31 745 l 155 745 l 155 796 q 171 911 155 860 q 223 996 188 961 q 311 1049 258 1031 q 438 1068 365 1068 q 550 1060 506 1068 q 622 1038 595 1052 q 659 1006 648 1024 q 671 966 671 987 q 628 897 671 919 q 500 876 586 876 q 496 912 500 893 q 485 949 493 932 q 463 977 476 966 q 430 988 450 988 q 401 979 413 988 q 381 950 389 970 q 370 898 373 930 q 366 820 366 866 l 366 745 l 558 745 l 558 650 l 366 650 l 366 164 q 376 116 366 134 q 400 89 386 99 q 432 76 415 80 q 464 73 450 73 l 530 73 l 530 0 l 26 0 "},"“":{"x_min":78,"x_max":616.34375,"ha":679,"o":"m 368 719 q 381 805 368 763 q 424 882 395 846 q 501 945 454 917 q 616 992 548 973 l 616 920 q 563 898 586 909 q 525 874 540 887 q 501 847 509 862 q 494 811 494 831 q 501 789 494 797 q 520 774 509 781 q 545 758 532 766 q 569 739 557 751 q 588 708 581 727 q 596 662 596 690 q 567 591 596 615 q 495 567 538 567 q 402 607 436 567 q 368 719 368 648 m 78 719 q 91 805 78 763 q 134 882 105 846 q 211 945 164 917 q 326 992 258 973 l 326 920 q 273 898 295 909 q 235 874 250 887 q 211 847 219 862 q 204 811 204 831 q 211 789 204 797 q 230 774 219 781 q 255 758 242 766 q 279 739 267 751 q 298 708 291 727 q 306 662 306 690 q 277 591 306 615 q 205 567 248 567 q 112 607 146 567 q 78 719 78 648 "},"A":{"x_min":5.8125,"x_max":1046.21875,"ha":1046,"o":"m 303 326 l 262 206 q 251 167 257 189 q 245 127 245 144 q 251 103 245 113 q 265 87 256 93 q 285 77 274 80 q 308 73 296 73 l 367 73 l 367 0 l 5 0 l 5 73 l 22 73 q 56 77 41 73 q 84 93 71 82 q 109 124 98 104 q 134 175 121 143 l 435 992 l 625 992 l 916 173 q 937 125 926 144 q 961 94 948 105 q 989 78 975 83 q 1021 73 1004 73 l 1046 73 l 1046 0 l 587 0 l 587 73 l 642 73 q 663 76 652 73 q 682 86 673 80 q 696 103 690 92 q 701 127 701 113 q 697 160 701 144 q 689 187 693 175 l 640 326 l 303 326 m 539 639 q 524 689 532 662 q 508 742 516 715 q 493 796 500 769 q 481 847 486 823 q 467 801 475 826 q 449 749 458 776 q 431 696 440 723 q 414 645 422 670 l 332 411 l 612 411 l 539 639 "},"O":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 340 22 428 -14 q 193 126 251 59 q 106 288 135 193 q 77 498 77 382 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 748 970 661 1007 q 894 867 835 934 q 985 706 954 800 q 1016 496 1016 612 m 310 496 q 323 319 310 397 q 364 187 336 241 q 437 104 392 133 q 547 76 482 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 q 770 674 782 596 q 729 806 757 752 q 657 888 702 860 q 548 916 612 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 "},"Đ":{"x_min":38.453125,"x_max":988,"ha":1065,"o":"m 988 514 q 956 305 988 400 q 863 143 925 211 q 709 37 801 75 q 496 0 617 0 l 38 0 l 38 73 l 96 73 q 125 76 112 73 q 147 89 138 80 q 162 116 157 99 q 168 164 168 134 l 168 476 l 52 476 l 52 561 l 168 561 l 168 833 q 162 878 168 861 q 147 903 157 894 q 124 915 137 912 q 96 918 111 918 l 38 918 l 38 992 l 496 992 q 703 961 611 992 q 857 871 794 931 q 954 721 920 811 q 988 514 988 632 m 753 514 q 680 810 753 713 q 466 907 607 907 l 387 907 l 387 561 l 560 561 l 560 476 l 387 476 l 387 86 l 464 86 q 590 115 536 86 q 680 200 644 145 q 735 335 716 256 q 753 514 753 414 "},"3":{"x_min":39,"x_max":713,"ha":777,"o":"m 338 -14 q 202 0 259 -14 q 109 36 146 13 q 56 89 73 59 q 39 152 39 119 q 48 198 39 178 q 74 233 57 219 q 111 253 90 247 q 157 260 133 260 q 169 183 157 216 q 204 127 182 150 q 258 94 226 105 q 327 82 289 82 q 392 92 361 82 q 447 125 423 101 q 484 187 470 148 q 498 287 498 227 q 484 360 498 327 q 443 417 470 393 q 376 455 416 441 q 284 468 336 468 l 198 468 l 198 555 l 289 555 q 367 569 334 555 q 422 611 400 584 q 454 676 444 638 q 465 759 465 714 q 436 878 465 835 q 350 921 407 921 q 289 902 313 921 q 253 854 266 884 q 235 784 240 823 q 230 705 230 746 q 97 735 144 705 q 50 829 50 765 q 69 898 50 866 q 127 954 89 930 q 223 992 166 978 q 357 1006 281 1006 q 490 991 431 1006 q 591 946 549 976 q 655 875 633 917 q 678 779 678 833 q 661 692 678 732 q 616 622 645 653 q 549 567 588 591 q 465 528 511 544 q 551 504 507 521 q 631 459 595 487 q 689 388 666 430 q 713 285 713 345 q 681 143 713 200 q 597 50 649 85 q 477 0 544 15 q 338 -14 409 -14 "},"Ǿ":{"x_min":77,"x_max":1016,"ha":1093,"o":"m 1016 496 q 985 287 1016 382 q 894 126 954 193 q 747 22 834 59 q 547 -14 660 -14 q 341 21 429 -14 l 299 -56 l 201 -56 l 265 61 q 123 238 170 127 q 77 498 77 350 q 106 707 77 613 q 193 867 135 801 q 340 970 252 934 q 548 1007 429 1007 q 656 996 606 1007 q 752 967 707 986 l 795 1048 l 892 1048 l 827 927 q 967 752 919 862 q 1016 496 1016 642 m 310 496 q 319 340 310 410 q 350 219 329 271 l 692 858 q 630 901 666 886 q 548 916 594 916 q 438 888 483 916 q 364 806 392 860 q 323 674 336 752 q 310 496 310 596 m 782 496 q 773 651 782 583 q 744 773 763 720 l 401 133 q 464 90 428 104 q 547 76 500 76 q 657 104 612 76 q 729 187 702 133 q 770 319 757 241 q 782 496 782 397 m 452 1089 q 485 1134 466 1108 q 522 1187 503 1160 q 558 1242 541 1215 q 585 1293 574 1269 l 804 1293 l 804 1278 q 761 1233 791 1260 q 694 1175 731 1205 q 618 1118 657 1146 q 546 1071 578 1089 l 452 1071 l 452 1089 "},"⅛":{"x_min":31.015625,"x_max":1134,"ha":1167,"o":"m 324 999 l 324 512 q 329 484 324 495 q 343 468 334 474 q 363 461 351 463 q 388 460 375 460 l 445 460 l 445 399 l 53 399 l 53 460 l 123 460 q 148 461 137 460 q 168 468 159 463 q 182 484 177 474 q 187 512 187 495 l 187 906 q 129 844 154 868 q 78 821 103 821 q 44 840 58 821 q 31 889 31 860 q 86 909 56 895 q 159 952 117 923 l 221 999 l 324 999 m 388 0 l 280 0 l 775 992 l 883 992 l 388 0 m 651 152 q 662 202 651 181 q 692 240 673 223 q 738 270 712 257 q 793 294 764 283 q 747 322 769 306 q 709 357 725 337 q 682 402 692 377 q 673 457 673 427 q 685 511 673 484 q 724 559 697 537 q 794 593 751 580 q 900 607 838 607 q 987 597 948 607 q 1053 569 1026 588 q 1095 525 1080 551 q 1110 466 1110 499 q 1100 420 1110 441 q 1074 382 1091 399 q 1036 351 1058 364 q 990 327 1015 337 q 1051 296 1024 312 q 1096 260 1077 280 q 1124 215 1114 240 q 1134 158 1134 190 q 1118 92 1134 122 q 1072 38 1103 61 q 995 2 1041 15 q 887 -10 949 -10 q 784 2 828 -10 q 710 37 739 15 q 665 89 680 59 q 651 152 651 118 m 895 51 q 966 72 940 51 q 992 137 992 93 q 984 176 992 159 q 959 208 975 194 q 919 235 943 222 q 862 261 894 248 q 812 215 832 243 q 792 147 792 187 q 818 78 792 105 q 895 51 844 51 m 961 463 q 957 495 961 480 q 943 521 952 510 q 921 539 935 532 q 891 545 908 545 q 839 525 856 545 q 821 470 821 505 q 829 431 821 447 q 849 401 837 414 q 878 379 862 388 q 910 362 894 370 q 947 400 933 377 q 961 463 961 423 "},"4":{"x_min":18,"x_max":750.453125,"ha":777,"o":"m 606 258 l 606 173 q 615 121 606 141 q 639 91 624 101 q 675 77 654 80 q 719 73 696 73 l 737 73 l 737 0 l 250 0 l 250 73 l 289 73 q 333 77 313 73 q 369 91 354 80 q 394 121 384 101 q 403 173 403 141 l 403 258 l 18 258 l 18 343 l 412 992 l 606 992 l 606 350 l 750 350 l 750 258 l 606 258 m 403 593 q 405 724 403 654 q 412 860 407 795 q 390 815 405 844 q 359 756 376 787 q 326 699 342 726 q 302 660 310 673 l 114 350 l 403 350 l 403 593 "},"Ẁ":{"x_min":0.34375,"x_max":1481.578125,"ha":1482,"o":"m 838 982 l 1030 451 q 1053 385 1042 419 q 1072 321 1063 352 q 1088 265 1081 290 q 1098 221 1095 239 q 1110 276 1103 246 q 1123 340 1116 307 q 1138 409 1130 374 q 1154 478 1145 445 l 1227 778 q 1231 797 1229 786 q 1236 818 1234 808 q 1239 838 1238 829 q 1240 852 1240 847 q 1218 903 1240 888 q 1151 918 1197 918 l 1119 918 l 1119 992 l 1481 992 l 1481 918 l 1455 918 q 1419 914 1434 918 q 1391 898 1403 910 q 1369 865 1379 886 q 1350 810 1359 844 l 1134 0 l 976 0 l 743 652 l 543 0 l 371 0 l 117 844 q 102 880 110 866 q 81 903 93 895 q 54 915 69 911 q 18 918 39 918 l 0 918 l 0 992 l 464 992 l 464 918 l 432 918 q 369 902 390 918 q 348 851 348 886 q 353 817 348 840 q 363 776 357 795 l 455 455 q 471 398 463 429 q 487 336 480 367 q 501 275 495 304 q 510 223 507 246 q 530 307 519 268 q 554 387 542 346 l 737 982 l 838 982 m 781 1071 q 709 1118 749 1089 q 632 1175 669 1146 q 565 1233 595 1205 q 523 1278 535 1260 l 523 1293 l 740 1293 q 768 1242 751 1269 q 804 1187 785 1215 q 842 1134 822 1160 q 876 1089 861 1108 l 876 1071 l 781 1071 "},"Ť":{"x_min":13,"x_max":893,"ha":907,"o":"m 563 164 q 568 116 563 134 q 584 89 574 99 q 606 76 593 80 q 634 73 619 73 l 692 73 l 692 0 l 213 0 l 213 73 l 271 73 q 300 76 287 73 q 322 89 313 80 q 337 116 332 99 q 343 164 343 134 l 343 907 l 231 907 q 179 900 200 907 q 144 881 158 893 q 125 850 131 868 q 116 809 118 832 l 106 723 l 13 723 l 20 992 l 886 992 l 893 723 l 800 723 l 789 809 q 780 850 787 832 q 761 881 774 868 q 726 900 747 893 q 674 907 705 907 l 563 907 l 563 164 m 207 1293 l 303 1293 q 336 1265 317 1281 q 376 1233 356 1250 q 417 1199 397 1215 q 453 1167 437 1182 q 488 1199 468 1182 q 529 1233 508 1215 q 570 1265 550 1250 q 604 1293 590 1281 l 700 1293 l 700 1274 q 662 1229 683 1255 q 618 1176 640 1203 q 577 1121 596 1148 q 547 1071 558 1094 l 360 1071 q 330 1121 349 1094 q 289 1176 310 1148 q 245 1229 267 1203 q 207 1274 223 1255 l 207 1293 "},"ψ":{"x_min":37.6875,"x_max":933,"ha":997,"o":"m 933 434 q 916 281 933 356 q 861 147 899 207 q 761 45 823 87 q 607 -8 698 4 l 607 -334 l 524 -334 l 524 -14 q 358 9 431 -13 q 236 76 285 32 q 160 185 186 120 q 134 334 134 250 l 134 586 q 127 630 134 614 q 109 656 121 647 q 80 668 98 665 q 37 671 62 671 l 37 745 l 343 745 l 343 323 q 385 162 343 220 q 524 92 427 105 l 524 1055 l 607 1055 l 607 91 q 702 119 660 95 q 773 183 744 144 q 817 277 802 223 q 831 396 831 331 q 820 505 831 460 q 790 580 808 551 q 752 627 772 610 q 715 650 732 643 q 720 691 715 671 q 735 724 725 710 q 760 747 745 739 q 796 756 775 756 q 850 730 825 756 q 894 660 876 704 q 922 558 912 616 q 933 434 933 500 "},"ŗ":{"x_min":27.78125,"x_max":705,"ha":726,"o":"m 491 0 l 27 0 l 27 73 l 31 73 q 75 77 55 73 q 109 91 94 80 q 131 121 123 101 q 139 173 139 141 l 139 576 q 131 625 139 607 q 111 654 124 644 q 80 668 98 664 q 38 671 61 671 l 34 671 l 34 745 l 315 745 l 343 636 l 349 636 q 379 690 363 667 q 418 729 396 714 q 472 753 441 745 q 545 761 503 761 q 666 732 627 761 q 705 648 705 703 q 658 549 705 584 q 528 514 612 514 q 525 564 528 542 q 514 600 522 586 q 493 621 507 614 q 460 629 480 629 q 418 617 436 629 q 389 585 401 605 q 369 541 377 566 q 357 492 361 517 q 351 445 352 468 q 349 406 349 423 l 349 166 q 357 117 349 136 q 377 89 364 99 q 408 76 390 80 q 446 73 426 73 l 491 73 l 491 0 m 127 -289 q 141 -242 133 -268 q 157 -189 149 -216 q 171 -134 164 -161 q 181 -85 177 -108 l 343 -85 l 343 -98 q 318 -147 333 -120 q 284 -202 302 -174 q 247 -257 266 -230 q 210 -307 228 -285 l 127 -307 l 127 -289 "}},"cssFontWeight":"bold","ascender":1290,"underlinePosition":-154,"cssFontStyle":"normal","boundingBox":{"yMin":-387,"xMin":-289.125,"yMax":1359,"xMax":1773},"resolution":1000,"original_font_information":{"postscript_name":"DroidSerif-Bold","version_string":"Version 1.00 build 107","vendor_url":"http://www.ascendercorp.com/","full_font_name":"Droid Serif Bold","font_family_name":"Droid Serif","copyright":"Digitized data copyright © 2006, Google Corporation.","description":"","trademark":"Droid is a trademark of Google and may be registered in certain jurisdictions.","designer":"","designer_url":"http://www.ascendercorp.com/typedesigners.html","unique_font_identifier":"Ascender - Droid Serif Bold","license_url":"http://ascendercorp.com/eula10.html","license_description":"This font software is the valuable property of Ascender Corporation and/or its suppliers and its use by you is covered under the terms of a license agreement. This font software is licensed to you by Ascender Corporation for your personal or business use on up to five personal computers. You may not use this font software on more than five personal computers unless you have obtained a license from Ascender to do so. Except as specifically permitted by the license, you may not copy this font software.\n\nIf you have any questions, please review the license agreement you received with this font software, and/or contact Ascender Corporation. \n\nContact Information:\nAscender Corporation\nWeb http://www.ascendercorp.com/","manufacturer_name":"Ascender Corporation","font_sub_family_name":"Bold"},"descender":-328,"familyName":"Droid Serif","lineHeight":1617,"underlineThickness":102});/**
 * tQuery.createText('foobar')
*/
define(function(){
	tQuery.register('createText', function(text, options){
		// handle parameters
		options	= tQuery.extend(options, {
			size		: 1,
			height		: 0.4,
			curveSegments	: 4,
	
			weight		: "bold",
			font		: "droid serif"
		});
		// create the geometry
		var geometry	= new THREE.TextGeometry(text, options);
	
		// center the geometry
		// - THREE.TextGeometry isnt centered for unknown reasons. all other geometries are centered
		geometry.computeBoundingBox();
		var center	= new THREE.Vector3();
		center.x	= ( geometry.boundingBox.max.x - geometry.boundingBox.min.x ) / 2;
		center.y	= ( geometry.boundingBox.max.y - geometry.boundingBox.min.y ) / 2;
		center.z	= ( geometry.boundingBox.max.z - geometry.boundingBox.min.z ) / 2;
		geometry.vertices.forEach(function(vertex){
			vertex.position.subSelf(center);
		});
		
		// create a mesh with it
		var material	= new THREE.MeshNormalMaterial();
		var mesh	= new THREE.Mesh( geometry, material );
		// return a tQuery object
		return tQuery(mesh);
	});
});/**
 * plugin to handle deviceOrientation API
*/
define(['plugins/csg/tquery.object3d.csg'], function(){
	tQuery.Mesh.register('linkify', function(url){
		var mesh	= tQuery(this.get(0));
		// measure mesh size
		var size	= mesh.geometry().computeAll().size();
		
		// build the underline
		var underlineH	= size.y / 10;
		var deltaY	= size.y / 20;
		var underline	= tQuery.createCube(size.x, underlineH, size.z)
				.translateY(-size.y/2 - deltaY - underlineH/2);
		// make it invisible by default
		underline.get(0).visible	= false;
		// add it to the mesh
		mesh.add(underline);
		
		// bind the click
		mesh.on('click', function(event){
			window.open(url, '_blank');
		});
		// bind 'mouseover'
		mesh.on('mouseover', function(){
			underline.get(0).visible	= true;
			document.body.style.cursor	= 'pointer';
		});
		// bind 'mouseout'
		mesh.on('mouseout', function(){
			underline.get(0).visible	= false;		
			document.body.style.cursor	= 'default';
		});
	});
});